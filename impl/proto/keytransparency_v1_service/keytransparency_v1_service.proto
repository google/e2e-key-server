// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Key Transparency Service
//
// The Key Transparency Service API consists of a map of user names to public
// keys. Each user name also has a history of public keys that have been
// associated with it.
package keytransparency.v1.service;

import "github.com/google/keytransparency/core/proto/keytransparency_v1_types/keytransparency_v1_types.proto";
import "google/api/annotations.proto";


// The KeyTransparencyService API represents a directory of public keys.
// The API defines the following resource model:
//
// - The API has a collection of [Entry][keytransparency.Entry]
//   resources named `/user/*`.
//
// - Entries have a collection of historical
//   [Entry][keytransparency.Entry] resources named `/users/*/history`.
//
service KeyTransparencyService {
  // GetEntry returns a user's entry in the Merkle Tree.
  //
  // Entries contain signed commitments to a profile, which is also returned.
  rpc GetEntry(keytransparency.v1.types.GetEntryRequest) returns (keytransparency.v1.types.GetEntryResponse) {
    option (google.api.http) = { get: "/v1/users/{user_id}" };
  }

  // ListEntryHistory returns a list of historic GetEntry values.
  //
  // Clients verify their account history by observing correct values for their
  // account over time.
  rpc ListEntryHistory(keytransparency.v1.types.ListEntryHistoryRequest) returns (keytransparency.v1.types.ListEntryHistoryResponse) {
    option (google.api.http) = { get: "/v1/users/{user_id}/history" };
  }

  // UpdateEntry updates a user's profile.
  //
  // Returns the current user profile.
  // Clients must retry until this function returns a proof containing the desired value.
  rpc UpdateEntry(keytransparency.v1.types.UpdateEntryRequest) returns (keytransparency.v1.types.UpdateEntryResponse) {
    option (google.api.http) = {
      put: "/v1/users/{user_id}"
      body: "entry_update"
    };
  }

  // GetDomainInfo returns all info tied to the specified domain.
  //
  // This API to get all necessary data needed to verify a particular
  // key-server. Data contains for instance the tree-info, like for instance the
  // log-/map-id and the corresponding public-keys.
  rpc GetDomainInfo(keytransparency.v1.types.GetDomainInfoRequest) returns (keytransparency.v1.types.GetDomainInfoResponse) {
    option (google.api.http) = { get: "/v1/domain/info" };
  }
}

// The KeyTransparencyAdminService API provides batch access to the directory of public keys. 
service KeyTransparencyAdminService {
  // BatchSetEntries uses an authorized_public key to perform a set request on multiple entries at once.  
  rpc BatchUpdateEntries(keytransparency.v1.types.BatchUpdateEntriesRequest) returns (keytransparency.v1.types.BatchUpdateEntriesResponse) {
    option (google.api.http) = {
      post: "/v1/users:batch"
      body: ""
    };
  }
}

