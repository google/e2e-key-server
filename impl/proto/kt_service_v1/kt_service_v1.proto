// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Key Transparency Service
//
// The Key Transparency Service API consists of a map of user names to public
// keys. Each user name also has a history of public keys that have been
// associated with it.
package keytransparency.v1;

import "github.com/google/key-transparency/core/proto/kt_types_v1/kt_types_v1.proto";
import "google/api/annotations.proto";


// The KeyTransparencyService API represents a directory of public keys.
// The API defines the following resource model:
//
// - The API has a collection of [Entry][keytransparency.Entry]
//   resources named `/user/*`.
//
// - Entries have a collection of historical
//   [Entry][keytransparency.Entry] resources named `/users/*/history`.
//
service KeyTransparencyService {
  // GetEntry returns a user's entry in the Merkle Tree.
  //
  // Entries contain signed commitments to a profile, which is also returned.
  rpc GetEntry(GetEntryRequest) returns (GetEntryResponse) {
    option (google.api.http) = { get: "/v1/users/{user_id}" };
  }

  // ListEntryHistory returns a list of historic GetEntry values.
  //
  // Clients verify their account history by observing correct values for their
  // account over time.
  rpc ListEntryHistory(ListEntryHistoryRequest) returns (ListEntryHistoryResponse) {
    option (google.api.http) = { get: "/v1/users/{user_id}/history" };
  }

  // UpdateEntry submits a SignedEntryUpdate.
  //
  // Returns empty until this update has been included in an epoch.
  // Clients must retry until this function returns a proof.
  rpc UpdateEntry(UpdateEntryRequest) returns (UpdateEntryResponse) {
    option (google.api.http) = {
      put: "/v1/users/{user_id}"
      body: "entry_update"
    };
  }

  // HkpLookup implements a SKS server lookup functions.
  rpc HkpLookup(HkpLookupRequest) returns (HttpResponse){
    option (google.api.http) = { get: "/v1/hkp/lookup" };
  }
}
