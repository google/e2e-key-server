// Code generated by protoc-gen-go.
// source: impl/proto/kt_service_v1/kt_service_v1.proto
// DO NOT EDIT!

/*
Package keytransparency_v1 is a generated protocol buffer package.

It is generated from these files:
	impl/proto/kt_service_v1/kt_service_v1.proto

It has these top-level messages:
*/
package keytransparency_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import keytransparency_v11 "github.com/google/key-transparency/core/proto/kt_types_v1"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for KeyTransparencyService service

type KeyTransparencyServiceClient interface {
	// GetEntry returns a user's entry in the Merkle Tree.
	//
	// Entries contain signed commitments to a profile, which is also returned.
	GetEntry(ctx context.Context, in *keytransparency_v11.GetEntryRequest, opts ...grpc.CallOption) (*keytransparency_v11.GetEntryResponse, error)
	// ListEntryHistory returns a list of historic GetEntry values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(ctx context.Context, in *keytransparency_v11.ListEntryHistoryRequest, opts ...grpc.CallOption) (*keytransparency_v11.ListEntryHistoryResponse, error)
	// UpdateEntry submits a SignedEntryUpdate.
	//
	// Returns empty until this update has been included in an epoch.
	// Clients must retry until this function returns a proof.
	UpdateEntry(ctx context.Context, in *keytransparency_v11.UpdateEntryRequest, opts ...grpc.CallOption) (*keytransparency_v11.UpdateEntryResponse, error)
	// HkpLookup implements a SKS server lookup functions.
	HkpLookup(ctx context.Context, in *keytransparency_v11.HkpLookupRequest, opts ...grpc.CallOption) (*keytransparency_v11.HttpResponse, error)
}

type keyTransparencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyServiceClient(cc *grpc.ClientConn) KeyTransparencyServiceClient {
	return &keyTransparencyServiceClient{cc}
}

func (c *keyTransparencyServiceClient) GetEntry(ctx context.Context, in *keytransparency_v11.GetEntryRequest, opts ...grpc.CallOption) (*keytransparency_v11.GetEntryResponse, error) {
	out := new(keytransparency_v11.GetEntryResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.KeyTransparencyService/GetEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) ListEntryHistory(ctx context.Context, in *keytransparency_v11.ListEntryHistoryRequest, opts ...grpc.CallOption) (*keytransparency_v11.ListEntryHistoryResponse, error) {
	out := new(keytransparency_v11.ListEntryHistoryResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.KeyTransparencyService/ListEntryHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) UpdateEntry(ctx context.Context, in *keytransparency_v11.UpdateEntryRequest, opts ...grpc.CallOption) (*keytransparency_v11.UpdateEntryResponse, error) {
	out := new(keytransparency_v11.UpdateEntryResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.KeyTransparencyService/UpdateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) HkpLookup(ctx context.Context, in *keytransparency_v11.HkpLookupRequest, opts ...grpc.CallOption) (*keytransparency_v11.HttpResponse, error) {
	out := new(keytransparency_v11.HttpResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.KeyTransparencyService/HkpLookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyTransparencyService service

type KeyTransparencyServiceServer interface {
	// GetEntry returns a user's entry in the Merkle Tree.
	//
	// Entries contain signed commitments to a profile, which is also returned.
	GetEntry(context.Context, *keytransparency_v11.GetEntryRequest) (*keytransparency_v11.GetEntryResponse, error)
	// ListEntryHistory returns a list of historic GetEntry values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(context.Context, *keytransparency_v11.ListEntryHistoryRequest) (*keytransparency_v11.ListEntryHistoryResponse, error)
	// UpdateEntry submits a SignedEntryUpdate.
	//
	// Returns empty until this update has been included in an epoch.
	// Clients must retry until this function returns a proof.
	UpdateEntry(context.Context, *keytransparency_v11.UpdateEntryRequest) (*keytransparency_v11.UpdateEntryResponse, error)
	// HkpLookup implements a SKS server lookup functions.
	HkpLookup(context.Context, *keytransparency_v11.HkpLookupRequest) (*keytransparency_v11.HttpResponse, error)
}

func RegisterKeyTransparencyServiceServer(s *grpc.Server, srv KeyTransparencyServiceServer) {
	s.RegisterService(&_KeyTransparencyService_serviceDesc, srv)
}

func _KeyTransparencyService_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v11.GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.KeyTransparencyService/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).GetEntry(ctx, req.(*keytransparency_v11.GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_ListEntryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v11.ListEntryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).ListEntryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.KeyTransparencyService/ListEntryHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).ListEntryHistory(ctx, req.(*keytransparency_v11.ListEntryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v11.UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.KeyTransparencyService/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).UpdateEntry(ctx, req.(*keytransparency_v11.UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_HkpLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v11.HkpLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).HkpLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.KeyTransparencyService/HkpLookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).HkpLookup(ctx, req.(*keytransparency_v11.HkpLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keytransparency.v1.KeyTransparencyService",
	HandlerType: (*KeyTransparencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntry",
			Handler:    _KeyTransparencyService_GetEntry_Handler,
		},
		{
			MethodName: "ListEntryHistory",
			Handler:    _KeyTransparencyService_ListEntryHistory_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _KeyTransparencyService_UpdateEntry_Handler,
		},
		{
			MethodName: "HkpLookup",
			Handler:    _KeyTransparencyService_HkpLookup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("impl/proto/kt_service_v1/kt_service_v1.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4b, 0xfb, 0x30,
	0x18, 0x80, 0xd9, 0x8f, 0x1f, 0xa2, 0x55, 0x64, 0x44, 0xdc, 0xa1, 0x53, 0x10, 0x27, 0x8a, 0x38,
	0x1b, 0xa6, 0x37, 0xef, 0xe2, 0x60, 0x3b, 0xf9, 0xe7, 0x5c, 0xba, 0xee, 0x65, 0x0b, 0xdd, 0x92,
	0x98, 0xbc, 0x1d, 0x14, 0xf1, 0xe2, 0xcd, 0xab, 0xde, 0xfc, 0x5a, 0x7e, 0x05, 0x3f, 0x88, 0x59,
	0xda, 0xce, 0xaa, 0x41, 0x3d, 0x2d, 0x23, 0x4f, 0xde, 0xe7, 0xe1, 0xa5, 0x5e, 0x9b, 0x4d, 0xe5,
	0x84, 0x4a, 0x25, 0x50, 0xd0, 0x04, 0x43, 0x0d, 0x6a, 0xc6, 0x62, 0x08, 0x67, 0x9d, 0xcf, 0xff,
	0x02, 0x4b, 0x10, 0x92, 0x40, 0x86, 0x2a, 0xe2, 0x5a, 0x46, 0x0a, 0x78, 0x9c, 0x05, 0xb3, 0x8e,
	0xdf, 0x1b, 0x31, 0x1c, 0xa7, 0x83, 0x20, 0x16, 0x53, 0x3a, 0x12, 0x62, 0x34, 0x01, 0x6a, 0xa8,
	0xe3, 0x2a, 0x46, 0x63, 0xa1, 0xe0, 0x43, 0x82, 0x99, 0x04, 0x5d, 0x28, 0xca, 0x73, 0x2e, 0xf0,
	0xb7, 0x8a, 0x09, 0x91, 0x64, 0x34, 0xe2, 0x5c, 0x60, 0x84, 0x4c, 0x70, 0x9d, 0xdf, 0x9e, 0xbc,
	0xfc, 0xf7, 0x1a, 0x3d, 0xc8, 0xae, 0x2b, 0xa3, 0xaf, 0xf2, 0x44, 0xa2, 0xbc, 0xe5, 0x0b, 0xc0,
	0x73, 0x8e, 0x2a, 0x23, 0xad, 0xe0, 0x7b, 0x66, 0x50, 0xde, 0x5e, 0xc2, 0x6d, 0x0a, 0x1a, 0xfd,
	0xbd, 0x9f, 0x21, 0x2d, 0x8d, 0x16, 0x76, 0x9b, 0x0f, 0xaf, 0x6f, 0xcf, 0xff, 0x36, 0xc9, 0x06,
	0x35, 0xb9, 0xa9, 0xd9, 0x87, 0xa6, 0x77, 0xf3, 0x9f, 0x90, 0x0d, 0xef, 0xc9, 0x53, 0xcd, 0xab,
	0xf7, 0x99, 0xce, 0x9f, 0x74, 0xcd, 0x41, 0x18, 0xf9, 0x91, 0x6b, 0xee, 0x57, 0xaa, 0x8c, 0x68,
	0xff, 0x0d, 0x2e, 0x62, 0x5a, 0x36, 0x66, 0x9b, 0x34, 0x1d, 0x31, 0x74, 0x5c, 0xf8, 0x1f, 0x6b,
	0xde, 0xea, 0x8d, 0x1c, 0x46, 0x08, 0xf9, 0x32, 0xf6, 0x5d, 0x8a, 0x0a, 0x50, 0xa6, 0x1c, 0xfc,
	0xca, 0x15, 0x15, 0x87, 0xb6, 0xa2, 0xe5, 0xbb, 0x56, 0x72, 0xb6, 0x06, 0x73, 0x36, 0x4c, 0xed,
	0x3b, 0x92, 0x78, 0x2b, 0xdd, 0x44, 0xf6, 0x85, 0x48, 0x52, 0x49, 0x9c, 0x0b, 0x5f, 0x5c, 0x97,
	0x19, 0x3b, 0x4e, 0x0a, 0x51, 0x2e, 0xfc, 0x0d, 0xeb, 0xaf, 0x93, 0xf5, 0xb9, 0x7f, 0x9c, 0x48,
	0x3a, 0xb1, 0x03, 0x06, 0x4b, 0xf6, 0x1b, 0x39, 0x7d, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x96, 0xd8,
	0xcb, 0x32, 0xd2, 0x02, 0x00, 0x00,
}
