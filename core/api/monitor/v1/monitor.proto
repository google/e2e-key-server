// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/google/keytransparency/core/api/monitor/v1/monitor_go_proto";

// Monitor Service
//
// The Key Transparency monitor server service consists of APIs to fetch
// monitor results queried using the mutations API.
package google.keytransparency.monitor.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "trillian.proto";

// GetStateRequest requests the verification state of a keytransparency domain
// for a particular point in time.
message GetStateRequest {
  // kt_url is the URL of the keytransparency server for which the monitoring
  // result will be returned.
  string kt_url = 2;

  // domain_id identifies the merkle tree being monitored.
  string domain_id = 3;

  // epoch specifies the revision for which the monitoring results will
  // be returned (epochs start at 0).
  int64 epoch = 1;
}

// State represents the monitor's evaluation of a Key Transparency domain
// at a particular epoch.
message State {
  // smr contains the map root for the sparse Merkle Tree signed with the
  // monitor's key on success. If the checks were not successful the
  // smr will be empty. The epochs are encoded into the smr map_revision.
  trillian.SignedMapRoot smr = 1;

  // seen_time contains the time when this particular signed map root was
  // retrieved and processed.
  google.protobuf.Timestamp seen_time = 2;

  // errors contains a list of errors representing the verification checks
  // that failed while monitoring the key-transparency server.
  repeated google.rpc.Status errors = 3;
 }

// The Monitor Service API allows clients to query the monitors observed and
// validated signed map roots.
//
// - Signed Map Roots can be collected using the GetSignedMapRoot APIs.
// - Monitor resources are named:
//   - /monitor/v1/servers/{kt_url}/domains/{domain_id}/states/{epoch}
//   - /monitor/v1/servers/{kt_url}/domains/{domain_id}/states:latest
//
service Monitor {
  // GetSignedMapRoot returns the latest valid signed map root the monitor
  // observed. Additionally, the response contains extra data necessary to
  // reproduce errors on failure.
  //
  // Returns the signed map root for the latest epoch the monitor observed. If
  // the monitor could not reconstruct the map root given the set of mutations
  // from the previous to the current epoch it won't sign the map root and
  // additional data will be provided to reproduce the failure.
  rpc GetState(GetStateRequest) returns (State) {
    option (google.api.http) = { get: "/monitor/v1/servers/{kt_url}/domains/{domain_id}/states:latest" };
  }

  // GetSignedMapRootByRevision returns the monitor's result for a specific map
  // revision.
  //
  // Returns the signed map root for the specified epoch the monitor observed.
  // If the monitor could not reconstruct the map root given the set of
  // mutations from the previous to the current epoch it won't sign the map root
  // and additional data will be provided to reproduce the failure.
  rpc GetStateByRevision(GetStateRequest) returns(State) {
    option (google.api.http) = { get: "/monitor/v1/servers/{kt_url}/domains/{domain_id}/states/{epoch}" };
  }
}


