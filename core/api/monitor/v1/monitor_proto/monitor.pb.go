// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/monitor/v1/monitor_proto/monitor.proto

/*
Package monitor_proto is a generated protocol buffer package.

Monitor Service

The Key Transparency monitor server service consists of APIs to fetch
monitor results queried using the mutations API.

It is generated from these files:
	api/monitor/v1/monitor_proto/monitor.proto

It has these top-level messages:
	GetStateRequest
	State
*/
package monitor_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"
import trillian "github.com/google/trillian"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// GetStateRequest requests the state of a keytransparency domain for a particular
// point in time.
type GetStateRequest struct {
	// kt_url is the URL of the keytransparency server for which the monitoring
	// result will be returned.
	KtUrl string `protobuf:"bytes,2,opt,name=kt_url,json=ktUrl" json:"kt_url,omitempty"`
	// domain_id identifies the merkel tree being monitored.
	DomainId string `protobuf:"bytes,3,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// epoch specifies the revision for which the monitoring results will
	// be returned (epochs start at 0).
	Epoch int64 `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
}

func (m *GetStateRequest) Reset()                    { *m = GetStateRequest{} }
func (m *GetStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStateRequest) ProtoMessage()               {}
func (*GetStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetStateRequest) GetKtUrl() string {
	if m != nil {
		return m.KtUrl
	}
	return ""
}

func (m *GetStateRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetStateRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// State represents the monitor's evaluation of a Key Transparency domain
// at a particular epoch.
type State struct {
	// smr contains the map root for the sparse Merkle Tree signed with the
	// monitor's key on success. If the checks were not successful the
	// smr will be empty. The epochs are encoded into the smr map_revision.
	Smr *trillian.SignedMapRoot `protobuf:"bytes,1,opt,name=smr" json:"smr,omitempty"`
	// seen_timestamp_nanos contains the time in nanoseconds where this particular
	// signed map root was retrieved and processed. The actual timestamp of the
	// smr returned by the server is contained in above smr field.
	SeenTimestampNanos int64 `protobuf:"varint,2,opt,name=seen_timestamp_nanos,json=seenTimestampNanos" json:"seen_timestamp_nanos,omitempty"`
	// errors contains a list of errors representing the verification checks
	// that failed while monitoring the key-transparency server.
	Errors []*google_rpc.Status `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *State) GetSmr() *trillian.SignedMapRoot {
	if m != nil {
		return m.Smr
	}
	return nil
}

func (m *State) GetSeenTimestampNanos() int64 {
	if m != nil {
		return m.SeenTimestampNanos
	}
	return 0
}

func (m *State) GetErrors() []*google_rpc.Status {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*GetStateRequest)(nil), "google.keytransparency.monitor.v1.GetStateRequest")
	proto.RegisterType((*State)(nil), "google.keytransparency.monitor.v1.State")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Monitor service

type MonitorClient interface {
	// GetSignedMapRoot returns the latest valid signed map root the monitor
	// observed. Additionally, the response contains additional data necessary to
	// reproduce errors on failure.
	//
	// Returns the signed map root for the latest epoch the monitor observed. If
	// the monitor could not reconstruct the map root given the set of mutations
	// from the previous to the current epoch it won't sign the map root and
	// additional data will be provided to reproduce the failure.
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*State, error)
	// GetSignedMapRootByRevision works similar to GetSignedMapRoot but returns
	// the monitor's result for a specific map revision.
	//
	// Returns the signed map root for the specified epoch the monitor observed.
	// If the monitor could not reconstruct the map root given the set of
	// mutations from the previous to the current epoch it won't sign the map root
	// and additional data will be provided to reproduce the failure.
	GetStateByRevision(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*State, error)
}

type monitorClient struct {
	cc *grpc.ClientConn
}

func NewMonitorClient(cc *grpc.ClientConn) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := grpc.Invoke(ctx, "/google.keytransparency.monitor.v1.Monitor/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) GetStateByRevision(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := grpc.Invoke(ctx, "/google.keytransparency.monitor.v1.Monitor/GetStateByRevision", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Monitor service

type MonitorServer interface {
	// GetSignedMapRoot returns the latest valid signed map root the monitor
	// observed. Additionally, the response contains additional data necessary to
	// reproduce errors on failure.
	//
	// Returns the signed map root for the latest epoch the monitor observed. If
	// the monitor could not reconstruct the map root given the set of mutations
	// from the previous to the current epoch it won't sign the map root and
	// additional data will be provided to reproduce the failure.
	GetState(context.Context, *GetStateRequest) (*State, error)
	// GetSignedMapRootByRevision works similar to GetSignedMapRoot but returns
	// the monitor's result for a specific map revision.
	//
	// Returns the signed map root for the specified epoch the monitor observed.
	// If the monitor could not reconstruct the map root given the set of
	// mutations from the previous to the current epoch it won't sign the map root
	// and additional data will be provided to reproduce the failure.
	GetStateByRevision(context.Context, *GetStateRequest) (*State, error)
}

func RegisterMonitorServer(s *grpc.Server, srv MonitorServer) {
	s.RegisterService(&_Monitor_serviceDesc, srv)
}

func _Monitor_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.monitor.v1.Monitor/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_GetStateByRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetStateByRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.monitor.v1.Monitor/GetStateByRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetStateByRevision(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Monitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.monitor.v1.Monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Monitor_GetState_Handler,
		},
		{
			MethodName: "GetStateByRevision",
			Handler:    _Monitor_GetStateByRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/monitor/v1/monitor_proto/monitor.proto",
}

func init() { proto.RegisterFile("api/monitor/v1/monitor_proto/monitor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0x94, 0x63, 0x25, 0xb4, 0x5b, 0x09, 0xa4, 0x55, 0x51, 0xa3, 0xc0, 0x21, 0xe4, 0x14, 0x7a,
	0xd8, 0xa5, 0xe1, 0xc6, 0x81, 0x9f, 0x22, 0xa8, 0x38, 0x94, 0x83, 0x03, 0x17, 0x38, 0x58, 0x5b,
	0xe7, 0x53, 0xba, 0x8a, 0xbd, 0x9f, 0xf9, 0xf6, 0x4b, 0xa4, 0x28, 0xca, 0x85, 0x27, 0x40, 0xe2,
	0x45, 0xb8, 0xf3, 0x18, 0xbc, 0x02, 0x4f, 0xc1, 0x09, 0x79, 0x37, 0xae, 0x50, 0x25, 0x04, 0x42,
	0xe2, 0x62, 0x7b, 0x3c, 0xb3, 0x9f, 0x67, 0xc7, 0xb3, 0xe2, 0xd8, 0xd4, 0x56, 0x57, 0xe8, 0x2c,
	0x23, 0xe9, 0xd5, 0x49, 0xfb, 0x98, 0xd7, 0x84, 0x8c, 0x2d, 0x52, 0x01, 0xc9, 0x7b, 0x73, 0xc4,
	0x79, 0x09, 0x6a, 0x01, 0x6b, 0x26, 0xe3, 0x7c, 0x6d, 0x08, 0x5c, 0xb1, 0x56, 0xad, 0x6a, 0x75,
	0x32, 0xb8, 0x1b, 0x25, 0xba, 0x99, 0x6a, 0x9c, 0x43, 0x36, 0x6c, 0xd1, 0xf9, 0x38, 0x60, 0x70,
	0xb4, 0x63, 0xa9, 0x2e, 0xb4, 0x67, 0xc3, 0xcb, 0x96, 0xb8, 0xc9, 0x64, 0xcb, 0xd2, 0x1a, 0x17,
	0xf1, 0xe8, 0xbd, 0xb8, 0x75, 0x06, 0x3c, 0x65, 0xc3, 0x90, 0xc1, 0x87, 0x25, 0x78, 0x96, 0xb7,
	0x45, 0x6f, 0xc1, 0xf9, 0x92, 0xca, 0x7e, 0x67, 0x98, 0x8c, 0xf7, 0xb3, 0xee, 0x82, 0xdf, 0x52,
	0x29, 0xef, 0x88, 0xfd, 0x19, 0x56, 0xc6, 0xba, 0xdc, 0xce, 0xfa, 0x69, 0x60, 0xf6, 0xe2, 0x8b,
	0x57, 0x33, 0x79, 0x28, 0xba, 0x50, 0x63, 0x71, 0xd9, 0x4f, 0x86, 0xc9, 0x38, 0xcd, 0x22, 0x18,
	0x7d, 0x4a, 0x44, 0x37, 0x8c, 0x96, 0xf7, 0x45, 0xea, 0x2b, 0x0a, 0xec, 0xc1, 0xe4, 0x48, 0x5d,
	0x99, 0x98, 0xda, 0xb9, 0x83, 0xd9, 0xb9, 0xa9, 0x33, 0x44, 0xce, 0x1a, 0x8d, 0x7c, 0x20, 0x0e,
	0x3d, 0x80, 0xcb, 0xd9, 0x56, 0xe0, 0xd9, 0x54, 0x75, 0xee, 0x8c, 0x43, 0x1f, 0xcc, 0xa4, 0x99,
	0x6c, 0xb8, 0x37, 0x2d, 0xf5, 0xba, 0x61, 0xe4, 0xb1, 0xe8, 0x01, 0x11, 0x92, 0xef, 0xa7, 0xc3,
	0x74, 0x7c, 0x30, 0x91, 0x6a, 0x17, 0x1f, 0xd5, 0x85, 0x9a, 0x86, 0xdd, 0x67, 0x3b, 0xc5, 0xe4,
	0x47, 0x47, 0xdc, 0x38, 0x8f, 0x29, 0xca, 0x2f, 0x89, 0xd8, 0x6b, 0x37, 0x2f, 0x27, 0xea, 0x8f,
	0x99, 0xab, 0x6b, 0x49, 0x0d, 0xc6, 0x7f, 0xb1, 0x26, 0x2c, 0x18, 0xbd, 0xfc, 0xf8, 0xed, 0xfb,
	0xe7, 0xce, 0x53, 0xf9, 0xf8, 0xd7, 0x06, 0x78, 0xa0, 0x15, 0x90, 0xd7, 0x9b, 0x18, 0xf7, 0x56,
	0xc7, 0x38, 0xbd, 0xde, 0x5c, 0x05, 0xbd, 0x0d, 0x7f, 0x0f, 0xfc, 0xa3, 0xb2, 0xb9, 0xb2, 0xfc,
	0x9a, 0x08, 0xd9, 0xba, 0x38, 0x5d, 0x67, 0xb0, 0xb2, 0xde, 0xa2, 0xfb, 0xcf, 0xe6, 0xcf, 0x82,
	0xf9, 0x67, 0xf2, 0xc9, 0x3f, 0x9a, 0xd7, 0x9b, 0x50, 0x87, 0xed, 0xe9, 0x8b, 0x77, 0xcf, 0xe7,
	0x96, 0x2f, 0x97, 0x17, 0xaa, 0xc0, 0x4a, 0xef, 0x2a, 0x7a, 0xed, 0xf3, 0xba, 0x40, 0x8a, 0xad,
	0xfe, 0xdd, 0x59, 0xb9, 0xe8, 0x85, 0xdb, 0xc3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xde, 0xe0,
	0x38, 0x82, 0x52, 0x03, 0x00, 0x00,
}
