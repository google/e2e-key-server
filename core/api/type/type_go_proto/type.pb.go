// Code generated by protoc-gen-go. DO NOT EDIT.
// source: type/type.proto

/*
Package type_proto is a generated protocol buffer package.

It is generated from these files:
	type/type.proto
	type/keymaster.proto
	type/authz.proto

It has these top-level messages:
	User
	Metadata
	SigningKey
	VerifyingKey
	KeySet
*/
package type_go_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"
import google_crypto_tink "github.com/google/tink/proto/tink_go_proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// User represents plain account information that gets committed to and obfuscated in Entry.
type User struct {
	// domain_id specifies the domain.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// app_id specifies that application.
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// user_id specifies the user.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// public_key_data is the public key material for this account.
	PublicKeyData []byte `protobuf:"bytes,4,opt,name=public_key_data,json=publicKeyData,proto3" json:"public_key_data,omitempty"`
	// authorized_keys is the set of keys allowed to sign updates for this entry.
	AuthorizedKeys *google_crypto_tink.Keyset `protobuf:"bytes,5,opt,name=authorized_keys,json=authorizedKeys" json:"authorized_keys,omitempty"`
	// status is set when account is part of a batch operation.
	Status *google_rpc.Status `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *User) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *User) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User) GetPublicKeyData() []byte {
	if m != nil {
		return m.PublicKeyData
	}
	return nil
}

func (m *User) GetAuthorizedKeys() *google_crypto_tink.Keyset {
	if m != nil {
		return m.AuthorizedKeys
	}
	return nil
}

func (m *User) GetStatus() *google_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "google.keytransparency.type.User")
}

func init() { proto.RegisterFile("type/type.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4d, 0x4b, 0x33, 0x31,
	0x14, 0x85, 0x99, 0xf7, 0x6d, 0x47, 0x1b, 0x3f, 0x0a, 0x01, 0xe9, 0xd0, 0x6e, 0x8a, 0x0b, 0x29,
	0x2e, 0x12, 0xd0, 0x9d, 0xb8, 0x52, 0x37, 0xa5, 0xbb, 0x11, 0x37, 0x6e, 0x86, 0x34, 0xb9, 0xb4,
	0xa1, 0xed, 0xe4, 0x92, 0xdc, 0x59, 0xc4, 0xdf, 0xec, 0x8f, 0x90, 0x64, 0xaa, 0x82, 0x9b, 0x7c,
	0x3c, 0xe7, 0x1c, 0xb8, 0xf7, 0xb0, 0x31, 0x45, 0x04, 0x99, 0x0e, 0x81, 0xde, 0x91, 0xe3, 0xb3,
	0x8d, 0x73, 0x9b, 0x3d, 0x88, 0x1d, 0x44, 0xf2, 0xaa, 0x0d, 0xa8, 0x3c, 0xb4, 0x3a, 0x8a, 0x64,
	0x99, 0x4e, 0x7a, 0x51, 0x7a, 0xd4, 0x32, 0x90, 0xa2, 0x2e, 0xf4, 0xa9, 0x29, 0x23, 0xdb, 0xee,
	0xfa, 0xf7, 0xf5, 0x67, 0xc1, 0x06, 0x6f, 0x01, 0x3c, 0x9f, 0xb1, 0x91, 0x71, 0x07, 0x65, 0xdb,
	0xc6, 0x9a, 0xaa, 0x98, 0x17, 0x8b, 0x51, 0x7d, 0xda, 0x83, 0xa5, 0xe1, 0x57, 0xac, 0x54, 0x88,
	0x49, 0xf9, 0x97, 0x95, 0xa1, 0x42, 0x5c, 0x1a, 0x3e, 0x61, 0x27, 0x5d, 0x00, 0x9f, 0xf8, 0xff,
	0xcc, 0xcb, 0xf4, 0x5d, 0x1a, 0x7e, 0xc3, 0xc6, 0xd8, 0xad, 0xf7, 0x56, 0x37, 0x3b, 0x88, 0x8d,
	0x51, 0xa4, 0xaa, 0xc1, 0xbc, 0x58, 0x9c, 0xd7, 0x17, 0x3d, 0x5e, 0x41, 0x7c, 0x51, 0xa4, 0xf8,
	0x33, 0x1b, 0xab, 0x8e, 0xb6, 0xce, 0xdb, 0x0f, 0x30, 0xc9, 0x1b, 0xaa, 0xe1, 0xbc, 0x58, 0x9c,
	0xdd, 0x4d, 0xc5, 0x71, 0x33, 0xed, 0x23, 0x92, 0x13, 0x79, 0xe2, 0x15, 0xc4, 0x00, 0x54, 0x5f,
	0xfe, 0x46, 0x12, 0xe1, 0xb7, 0xac, 0xec, 0xd7, 0xab, 0xca, 0x9c, 0xe5, 0xdf, 0x59, 0x8f, 0x5a,
	0xbc, 0x66, 0xa5, 0x3e, 0x3a, 0x9e, 0x1e, 0xdf, 0x1f, 0x36, 0x96, 0xb6, 0xdd, 0x5a, 0x68, 0x77,
	0x90, 0xc7, 0x82, 0xfe, 0xb4, 0x27, 0xb5, 0xf3, 0x20, 0x15, 0x5a, 0xf9, 0x53, 0x77, 0x93, 0xcb,
	0x5a, 0x97, 0xf9, 0xba, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xab, 0x43, 0x78, 0xa9, 0x88, 0x01,
	0x00, 0x00,
}
