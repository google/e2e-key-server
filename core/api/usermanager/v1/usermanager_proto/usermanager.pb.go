// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/usermanager/v1/usermanager_proto/usermanager.proto

/*
Package usermanager_proto is a generated protocol buffer package.

It is generated from these files:
	api/usermanager/v1/usermanager_proto/usermanager.proto

It has these top-level messages:
	GetKeySetRequest
	CreateUserRequest
	UpdateUserRequest
	BatchCreateUserRequest
	BatchCreateUserResponse
	BatchUpdateUserRequest
	BatchUpdateUserResponse
*/
package usermanager_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "google.golang.org/genproto/protobuf/field_mask"
import keytransparency_v1_proto "github.com/google/keytransparency/core/proto/keytransparency_v1_proto"
import keymaster_proto "github.com/google/keytransparency/core/proto/keymaster_proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// GetKeySetsRequest requests the keyset of a domain_id/app_id
type GetKeySetRequest struct {
	// domain_id identifies the domain.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// app_id identifies the application.
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *GetKeySetRequest) Reset()                    { *m = GetKeySetRequest{} }
func (m *GetKeySetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKeySetRequest) ProtoMessage()               {}
func (*GetKeySetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetKeySetRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetKeySetRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

// CreateUserRequest specifies the information with which a new user should be initialized.
// New users will be signed with the current active key.
// It is the responsibility of authorized callers to verify that domain_id/app_id/user_id is correct.
type CreateUserRequest struct {
	// user is the user to create.
	User *keytransparency_v1_proto.User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	// add_signing_keys specifies whether to add this service's signing keys to the set of authorized_keys.
	// This must be set to true if any further operations from this API are meant to succeed.
	// If set to false, there must be at least one key in authorized_keys.
	AddSigningKeys bool `protobuf:"varint,7,opt,name=add_signing_keys,json=addSigningKeys" json:"add_signing_keys,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateUserRequest) GetUser() *keytransparency_v1_proto.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateUserRequest) GetAddSigningKeys() bool {
	if m != nil {
		return m.AddSigningKeys
	}
	return false
}

// UpdateUserRequest sets the data field for the user.
// The user must have the service's current signing key in its list of
// authorized_keys in order to succeed.
type UpdateUserRequest struct {
	// user contains data which will be applied to the user.
	User *keytransparency_v1_proto.User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	// update_mask specifies which fields of user to update.
	// For example: "data" or "authorized_keys"
	UpdateMask *google_protobuf1.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateUserRequest) GetUser() *keytransparency_v1_proto.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UpdateUserRequest) GetUpdateMask() *google_protobuf1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// BatchCreateUserRequest creates multiple users all at once.
type BatchCreateUserRequest struct {
	// domain_id identifies the domain.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// app_id identifies the application.
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// users is the set of users to create.
	Users []*keytransparency_v1_proto.User `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	// add_signing_keys specifies whether to add this service's signing_keys to the set of authorized_keys.
	// This must be set to true if any further operations from this API are meant to succeed.
	// If set to false, there must be at least one key in authorized_keys.
	AddSigningKeys bool `protobuf:"varint,4,opt,name=add_signing_keys,json=addSigningKeys" json:"add_signing_keys,omitempty"`
}

func (m *BatchCreateUserRequest) Reset()                    { *m = BatchCreateUserRequest{} }
func (m *BatchCreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchCreateUserRequest) ProtoMessage()               {}
func (*BatchCreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BatchCreateUserRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *BatchCreateUserRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *BatchCreateUserRequest) GetUsers() []*keytransparency_v1_proto.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *BatchCreateUserRequest) GetAddSigningKeys() bool {
	if m != nil {
		return m.AddSigningKeys
	}
	return false
}

// BatchCreateUserRequest creates multiple users at once.
type BatchCreateUserResponse struct {
	// users returns the list of created users.
	Users []*keytransparency_v1_proto.User `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *BatchCreateUserResponse) Reset()                    { *m = BatchCreateUserResponse{} }
func (m *BatchCreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*BatchCreateUserResponse) ProtoMessage()               {}
func (*BatchCreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BatchCreateUserResponse) GetUsers() []*keytransparency_v1_proto.User {
	if m != nil {
		return m.Users
	}
	return nil
}

// BatchUpdateUserRequest creates multiple users all at once.
type BatchUpdateUserRequest struct {
	// domain_id identifies the domain.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// app_id identifies the application.
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// users is the set of users to create.
	Users []*keytransparency_v1_proto.User `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	// update_mask specifies which fields of user to update.
	// For example: "data" or "authorized_keys"
	UpdateMask *google_protobuf1.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *BatchUpdateUserRequest) Reset()                    { *m = BatchUpdateUserRequest{} }
func (m *BatchUpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchUpdateUserRequest) ProtoMessage()               {}
func (*BatchUpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BatchUpdateUserRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *BatchUpdateUserRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *BatchUpdateUserRequest) GetUsers() []*keytransparency_v1_proto.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *BatchUpdateUserRequest) GetUpdateMask() *google_protobuf1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// BatchUpdateUserRequest creates multiple users at once.
type BatchUpdateUserResponse struct {
	// users returns the list of created users.
	Users []*keytransparency_v1_proto.User `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *BatchUpdateUserResponse) Reset()                    { *m = BatchUpdateUserResponse{} }
func (m *BatchUpdateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*BatchUpdateUserResponse) ProtoMessage()               {}
func (*BatchUpdateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BatchUpdateUserResponse) GetUsers() []*keytransparency_v1_proto.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*GetKeySetRequest)(nil), "keytransparency.usermanager.v1.GetKeySetRequest")
	proto.RegisterType((*CreateUserRequest)(nil), "keytransparency.usermanager.v1.CreateUserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "keytransparency.usermanager.v1.UpdateUserRequest")
	proto.RegisterType((*BatchCreateUserRequest)(nil), "keytransparency.usermanager.v1.BatchCreateUserRequest")
	proto.RegisterType((*BatchCreateUserResponse)(nil), "keytransparency.usermanager.v1.BatchCreateUserResponse")
	proto.RegisterType((*BatchUpdateUserRequest)(nil), "keytransparency.usermanager.v1.BatchUpdateUserRequest")
	proto.RegisterType((*BatchUpdateUserResponse)(nil), "keytransparency.usermanager.v1.BatchUpdateUserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserManagerService service

type UserManagerServiceClient interface {
	// GetKeySet returns a list of public keys (a keyset) that corresponds to the signing keys
	// this service has for a given domain and app.
	GetKeySet(ctx context.Context, in *GetKeySetRequest, opts ...grpc.CallOption) (*keymaster_proto.KeySet, error)
	// CreateUser creates a new user and initializes it.
	// If the user already exists, this operation will fail.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.User, error)
	// UpdateUserData sets the public key for an user.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.User, error)
	// BatchCreateUser creates a set of new users.
	BatchCreateUser(ctx context.Context, in *BatchCreateUserRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.User, error)
	// BatchUpdateUser updates a set of users.
	BatchUpdateUser(ctx context.Context, in *BatchUpdateUserRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.User, error)
}

type userManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserManagerServiceClient(cc *grpc.ClientConn) UserManagerServiceClient {
	return &userManagerServiceClient{cc}
}

func (c *userManagerServiceClient) GetKeySet(ctx context.Context, in *GetKeySetRequest, opts ...grpc.CallOption) (*keymaster_proto.KeySet, error) {
	out := new(keymaster_proto.KeySet)
	err := grpc.Invoke(ctx, "/keytransparency.usermanager.v1.UserManagerService/GetKeySet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.User, error) {
	out := new(keytransparency_v1_proto.User)
	err := grpc.Invoke(ctx, "/keytransparency.usermanager.v1.UserManagerService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.User, error) {
	out := new(keytransparency_v1_proto.User)
	err := grpc.Invoke(ctx, "/keytransparency.usermanager.v1.UserManagerService/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) BatchCreateUser(ctx context.Context, in *BatchCreateUserRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.User, error) {
	out := new(keytransparency_v1_proto.User)
	err := grpc.Invoke(ctx, "/keytransparency.usermanager.v1.UserManagerService/BatchCreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) BatchUpdateUser(ctx context.Context, in *BatchUpdateUserRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.User, error) {
	out := new(keytransparency_v1_proto.User)
	err := grpc.Invoke(ctx, "/keytransparency.usermanager.v1.UserManagerService/BatchUpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserManagerService service

type UserManagerServiceServer interface {
	// GetKeySet returns a list of public keys (a keyset) that corresponds to the signing keys
	// this service has for a given domain and app.
	GetKeySet(context.Context, *GetKeySetRequest) (*keymaster_proto.KeySet, error)
	// CreateUser creates a new user and initializes it.
	// If the user already exists, this operation will fail.
	CreateUser(context.Context, *CreateUserRequest) (*keytransparency_v1_proto.User, error)
	// UpdateUserData sets the public key for an user.
	UpdateUser(context.Context, *UpdateUserRequest) (*keytransparency_v1_proto.User, error)
	// BatchCreateUser creates a set of new users.
	BatchCreateUser(context.Context, *BatchCreateUserRequest) (*keytransparency_v1_proto.User, error)
	// BatchUpdateUser updates a set of users.
	BatchUpdateUser(context.Context, *BatchUpdateUserRequest) (*keytransparency_v1_proto.User, error)
}

func RegisterUserManagerServiceServer(s *grpc.Server, srv UserManagerServiceServer) {
	s.RegisterService(&_UserManagerService_serviceDesc, srv)
}

func _UserManagerService_GetKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).GetKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.usermanager.v1.UserManagerService/GetKeySet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).GetKeySet(ctx, req.(*GetKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.usermanager.v1.UserManagerService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.usermanager.v1.UserManagerService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_BatchCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).BatchCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.usermanager.v1.UserManagerService/BatchCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).BatchCreateUser(ctx, req.(*BatchCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_BatchUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).BatchUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.usermanager.v1.UserManagerService/BatchUpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).BatchUpdateUser(ctx, req.(*BatchUpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keytransparency.usermanager.v1.UserManagerService",
	HandlerType: (*UserManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeySet",
			Handler:    _UserManagerService_GetKeySet_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserManagerService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserManagerService_UpdateUser_Handler,
		},
		{
			MethodName: "BatchCreateUser",
			Handler:    _UserManagerService_BatchCreateUser_Handler,
		},
		{
			MethodName: "BatchUpdateUser",
			Handler:    _UserManagerService_BatchUpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/usermanager/v1/usermanager_proto/usermanager.proto",
}

func init() {
	proto.RegisterFile("api/usermanager/v1/usermanager_proto/usermanager.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0x66, 0x93, 0xf4, 0x27, 0x53, 0xd0, 0x76, 0x40, 0x1b, 0xa2, 0x94, 0xb0, 0x57, 0xa1, 0xc2,
	0xac, 0x89, 0x52, 0x24, 0x52, 0x90, 0x08, 0xd5, 0x12, 0x82, 0x92, 0x50, 0x10, 0x2f, 0x5c, 0x26,
	0xd9, 0xd3, 0xed, 0x92, 0x66, 0x77, 0xba, 0x33, 0x09, 0x84, 0xd2, 0x1b, 0xf1, 0x0d, 0xbc, 0xf1,
	0xce, 0x17, 0xf0, 0xce, 0x07, 0xe8, 0x43, 0xf8, 0x0a, 0x3e, 0x88, 0xcc, 0xcc, 0x26, 0x59, 0x76,
	0x63, 0x37, 0xa9, 0x3f, 0x37, 0x49, 0xe6, 0xcc, 0x99, 0x3d, 0xdf, 0xcf, 0x9c, 0xb3, 0x41, 0x07,
	0x94, 0x79, 0xd6, 0x88, 0x43, 0x38, 0xa4, 0x3e, 0x75, 0x21, 0xb4, 0xc6, 0xb5, 0xf8, 0xd2, 0x66,
	0x61, 0x20, 0x82, 0x78, 0x84, 0xa8, 0x08, 0xde, 0x1b, 0xc0, 0x44, 0x84, 0xd4, 0xe7, 0x8c, 0x86,
	0xe0, 0xf7, 0x27, 0x24, 0x9e, 0x32, 0xae, 0x95, 0x1f, 0xba, 0x41, 0xe0, 0x9e, 0x83, 0x25, 0x1f,
	0x4f, 0x7d, 0x3f, 0x10, 0x54, 0x78, 0x81, 0xcf, 0xf5, 0xe9, 0x72, 0x25, 0xda, 0x55, 0xab, 0xde,
	0xe8, 0xd4, 0x3a, 0xf5, 0xe0, 0xdc, 0xb1, 0x87, 0x94, 0x0f, 0xa2, 0x8c, 0x43, 0x5d, 0x38, 0x51,
	0xc5, 0x1e, 0xd7, 0xec, 0x9b, 0x37, 0xa2, 0xe3, 0x8f, 0x66, 0x59, 0x43, 0xca, 0xc5, 0x8c, 0x47,
	0x62, 0xad, 0x93, 0xcd, 0x23, 0xb4, 0xfd, 0x0a, 0x44, 0x0b, 0x26, 0x5d, 0x10, 0x1d, 0xb8, 0x18,
	0x01, 0x17, 0xf8, 0x01, 0x2a, 0x3a, 0xc1, 0x90, 0x7a, 0xbe, 0xed, 0x39, 0x25, 0xa3, 0x62, 0x54,
	0x8b, 0x9d, 0x4d, 0x1d, 0x38, 0x76, 0xf0, 0x3d, 0xb4, 0x4e, 0x19, 0x93, 0x3b, 0x39, 0xb5, 0xb3,
	0x46, 0x19, 0x3b, 0x76, 0xcc, 0x0b, 0xb4, 0xf3, 0x32, 0x04, 0x2a, 0xe0, 0x84, 0x43, 0x38, 0x7d,
	0x50, 0x1d, 0x15, 0xa4, 0x34, 0x2a, 0x73, 0xab, 0xbe, 0x47, 0x92, 0xba, 0x8d, 0x6b, 0x1a, 0x05,
	0x51, 0x87, 0x54, 0x2e, 0xae, 0xa2, 0x6d, 0xea, 0x38, 0x36, 0xf7, 0x5c, 0xdf, 0xf3, 0x5d, 0x7b,
	0x00, 0x13, 0x5e, 0xda, 0xa8, 0x18, 0xd5, 0xcd, 0xce, 0x1d, 0xea, 0x38, 0x5d, 0x1d, 0x6e, 0xc1,
	0x84, 0x9b, 0x9f, 0x0c, 0xb4, 0x73, 0xc2, 0x9c, 0xbf, 0x50, 0xf3, 0x39, 0xda, 0x1a, 0xa9, 0x07,
	0x29, 0x17, 0x4a, 0x79, 0x75, 0xb4, 0x4c, 0xb4, 0x51, 0x64, 0x6a, 0x14, 0x39, 0x92, 0x46, 0xb5,
	0x29, 0x1f, 0x74, 0x90, 0x4e, 0x97, 0xbf, 0xcd, 0x6f, 0x06, 0xba, 0xdf, 0xa4, 0xa2, 0x7f, 0x96,
	0xe6, 0x7f, 0x0b, 0x21, 0xf1, 0x53, 0xb4, 0x26, 0x31, 0xf1, 0x52, 0xbe, 0x92, 0x5f, 0x82, 0x80,
	0x4e, 0x5e, 0xa8, 0x5a, 0x61, 0xa1, 0x6a, 0x6f, 0xd0, 0x6e, 0x0a, 0x2d, 0x67, 0x81, 0xcf, 0x61,
	0x5e, 0x3a, 0xb7, 0x42, 0x69, 0xf3, 0x7a, 0xca, 0x3f, 0xed, 0xc5, 0xff, 0xe3, 0x9f, 0x70, 0xb0,
	0xb0, 0x92, 0x83, 0x53, 0x49, 0xe2, 0x04, 0xfe, 0x44, 0x92, 0xfa, 0xd7, 0x0d, 0x84, 0xe5, 0xba,
	0xad, 0x67, 0x42, 0x17, 0xc2, 0xb1, 0xd7, 0x07, 0xfc, 0xc5, 0x40, 0xc5, 0x59, 0xb3, 0xe1, 0xc7,
	0xe4, 0xe6, 0x31, 0x42, 0x92, 0x7d, 0x59, 0xde, 0x25, 0xb3, 0x1e, 0x8e, 0x8a, 0xea, 0x7d, 0xf3,
	0xc5, 0xc7, 0x1f, 0x3f, 0x3f, 0xe7, 0x1a, 0xf8, 0x59, 0x72, 0x9a, 0x69, 0xb1, 0xb9, 0x75, 0x39,
	0xb3, 0xe1, 0xca, 0xa2, 0x8c, 0x71, 0xeb, 0x52, 0x4b, 0x7f, 0x25, 0xa7, 0x02, 0x07, 0x81, 0xaf,
	0x0d, 0x84, 0xe6, 0x37, 0x02, 0xd7, 0xb2, 0xb0, 0xa5, 0xee, 0x7a, 0x39, 0x43, 0x1a, 0xf3, 0x83,
	0xc2, 0xf8, 0xce, 0x7c, 0xfb, 0x5b, 0x8c, 0x32, 0x4e, 0x52, 0x40, 0x55, 0x74, 0x8a, 0x56, 0xc9,
	0x1b, 0xc5, 0xe4, 0x87, 0x0c, 0x36, 0x74, 0x0f, 0x4b, 0x06, 0x73, 0x03, 0xb3, 0x19, 0xa4, 0x6e,
	0xeb, 0xb2, 0x0c, 0xea, 0xff, 0x8a, 0xc1, 0x77, 0x03, 0xdd, 0x4d, 0xb4, 0x26, 0x3e, 0xc8, 0xa2,
	0xb1, 0x78, 0xf2, 0x64, 0x72, 0x79, 0xad, 0xb8, 0x34, 0xcd, 0xc3, 0x95, 0x6f, 0x4c, 0x23, 0x56,
	0xb1, 0x61, 0xec, 0xcf, 0x51, 0xc7, 0xc4, 0x5f, 0x0e, 0xf5, 0xea, 0x0e, 0x44, 0xa8, 0xeb, 0xb7,
	0x45, 0xad, 0x2b, 0x36, 0x8c, 0xfd, 0x66, 0xfb, 0x7d, 0xcb, 0xf5, 0xc4, 0xd9, 0xa8, 0x47, 0xfa,
	0xc1, 0xd0, 0x8a, 0xde, 0xc8, 0x89, 0xe2, 0x56, 0x3f, 0x08, 0xf5, 0x4b, 0x3c, 0xeb, 0x3f, 0x42,
	0x6f, 0x5d, 0x7d, 0x3d, 0xf9, 0x15, 0x00, 0x00, 0xff, 0xff, 0x10, 0x4d, 0x7f, 0xaf, 0x52, 0x08,
	0x00, 0x00,
}
