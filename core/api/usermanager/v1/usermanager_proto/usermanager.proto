// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/google/keytransparency/core/api/usermanager/v1/usermanager_proto";

package google.keytransparency.usermanager.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "api/type/type_proto/type.proto";
import "proto/keymaster_proto/keymaster_proto.proto";

// GetKeySetsRequest requests the keyset of a domain_id/app_id
message GetKeySetRequest {
   // domain_id identifies the domain.
   string domain_id = 1;
   // app_id identifies the application.
   string app_id = 2;
}

// CreateUserRequest specifies the information with which a new user should be initialized.
// New users will be signed with the current active key.
// It is the responsibility of authorized callers to verify that domain_id/app_id/user_id is correct.
message CreateUserRequest {
  // user is the user to create.
  type.User user = 2;
  // add_signing_keys specifies whether to add this service's signing keys to the set of authorized_keys.
  // This must be set to true if any further operations from this API are meant to succeed.
  // If set to false, there must be at least one key in authorized_keys.
  bool add_signing_keys = 7;
}

// UpdateUserRequest sets the data field for the user.
// The user must have the service's current signing key in its list of
// authorized_keys in order to succeed.
message UpdateUserRequest {
  // user contains data which will be applied to the user.
  type.User user = 2;
  // update_mask specifies which fields of user to update.
  // For example: "data" or "authorized_keys"
  google.protobuf.FieldMask update_mask = 3;
}

// BatchCreateUserRequest creates multiple users all at once.
message BatchCreateUserRequest {
   // domain_id identifies the domain.
   string domain_id = 1;
   // app_id identifies the application.
   string app_id = 2;
  // users is the set of users to create.
  repeated type.User users = 3;
  // add_signing_keys specifies whether to add this service's signing_keys to the set of authorized_keys.
  // This must be set to true if any further operations from this API are meant to succeed.
  // If set to false, there must be at least one key in authorized_keys.
  bool add_signing_keys = 4;
}

// BatchCreateUserResponse creates multiple users at once.
message BatchCreateUserResponse {
  // users returns the list of created users.
  repeated type.User users = 2;
}

// The UserManagerService holds a set of signing keys which can be used to
// sign user updates.
// - This service must be registered with the server in order to submit user
// create or update requests.
// - The update requests this service generates will only be valid for users
// that have added this service's signing keys to their list of authorized_keys.
// - This service should carefully control and log access to it's APIs.
// - This service should rotate its signing keys periodically.
//   New signing keys should be published far enough in advance that they can be added
//   by everyone before they are used to avoid service disruption.
//
// Resources:
// - domains/apps/keyset
//   Each combination of domain_id and app_id has it's own keyset.
//   New domain and app combinations must be manually created and authorized with the
//   appropriate Key Transparency server.
// - domains/apps/users
//   Users can be created and updated through this endpoint.
service UserManagerService {

  // GetKeySet returns a list of public keys (a keyset) that corresponds to the signing keys
  // this service has for a given domain and app.
  rpc GetKeySet (GetKeySetRequest) returns (keymaster.proto.KeySet) {
    option (google.api.http) = {
      get: "/usermanager/v1/domains/{domain_id}/apps/{app_id}/keyset"
    };
  }

  // Key Rotation Operations
  // TODO(gdbelvin): CreateKey API for a particular keyset. 
  // TODO(gdbelvin): RotateKey API to mark the next key in the keyset as active.
  // TODO(gdbelvin): BatchAddAuthorizedKeys to add all the active keys to users created through this API.
  // TODO(gdbelvin): BatchRemoveAuthorizedKeys to remove old keys from users created through this API.
  // TODO(gdbelvin): RegisterUser ask this service to keep it's list of authorized_keys up-to-date. 
  // TODO(gdbelvin): UnregustreUser have this service revoke it's access to a user's account. 

  // CreateUser creates a new user and initializes it.
  // If the user already exists, this operation will fail.
  rpc CreateUser(CreateUserRequest) returns (type.User) {
    option (google.api.http) = {
      post: "/usermanager/v1/domains/{user.domain_id}/apps/{user.app_id}/users/{user.user_id}"
      body: "user"
    };
  }

  // UpdateUserData sets the public key for an user.
  rpc UpdateUser(UpdateUserRequest) returns (type.User) {
    option (google.api.http) = {
      patch: "/usermanager/v1/domains/{user.domain_id}/apps/{user.app_id}/users/{user.user_id}"
      body: "user"
    };
  }

  // BatchCreateUser creates a set of new users.
  rpc BatchCreateUser(BatchCreateUserRequest) returns (type.User) {
    option (google.api.http) = {
      post: "/usermanager/v1/domains/{domain_id}/apps/{app_id}:BatchCreate"
      body: "*"
    };
  }
}

