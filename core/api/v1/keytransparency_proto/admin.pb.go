// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/keytransparency_proto/admin.proto

package keytransparency_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"
import google_protobuf4 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"
import trillian "github.com/google/trillian"
import keyspb "github.com/google/trillian/crypto/keyspb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Domain contains information on a single domain
type Domain struct {
	// DomainId can be any URL safe string.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// Log contains the Log-Tree's info.
	Log *trillian.Tree `protobuf:"bytes,2,opt,name=log" json:"log,omitempty"`
	// Map contains the Map-Tree's info.
	Map *trillian.Tree `protobuf:"bytes,3,opt,name=map" json:"map,omitempty"`
	// Vrf contains the VRF public key.
	Vrf *keyspb.PublicKey `protobuf:"bytes,4,opt,name=vrf" json:"vrf,omitempty"`
	// min_interval is the minimum time between epochs.
	MinInterval *google_protobuf2.Duration `protobuf:"bytes,5,opt,name=min_interval,json=minInterval" json:"min_interval,omitempty"`
	// max_interval is the maximum time between epochs.
	MaxInterval *google_protobuf2.Duration `protobuf:"bytes,6,opt,name=max_interval,json=maxInterval" json:"max_interval,omitempty"`
	// Deleted indicates whether the domain has been marked as deleted.
	// By its presence in a response, this domain has not been garbage collected.
	Deleted bool `protobuf:"varint,7,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (m *Domain) String() string            { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Domain) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *Domain) GetLog() *trillian.Tree {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *Domain) GetMap() *trillian.Tree {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *Domain) GetVrf() *keyspb.PublicKey {
	if m != nil {
		return m.Vrf
	}
	return nil
}

func (m *Domain) GetMinInterval() *google_protobuf2.Duration {
	if m != nil {
		return m.MinInterval
	}
	return nil
}

func (m *Domain) GetMaxInterval() *google_protobuf2.Duration {
	if m != nil {
		return m.MaxInterval
	}
	return nil
}

func (m *Domain) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// ListDomains request.
// No pagination options are provided.
type ListDomainsRequest struct {
	// showDeleted requests domains that have been marked for deletion
	// but have not been garbage collected.
	ShowDeleted bool `protobuf:"varint,1,opt,name=show_deleted,json=showDeleted" json:"show_deleted,omitempty"`
}

func (m *ListDomainsRequest) Reset()                    { *m = ListDomainsRequest{} }
func (m *ListDomainsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDomainsRequest) ProtoMessage()               {}
func (*ListDomainsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ListDomainsRequest) GetShowDeleted() bool {
	if m != nil {
		return m.ShowDeleted
	}
	return false
}

// ListDomains response contains domains.
type ListDomainsResponse struct {
	Domains []*Domain `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
}

func (m *ListDomainsResponse) Reset()                    { *m = ListDomainsResponse{} }
func (m *ListDomainsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDomainsResponse) ProtoMessage()               {}
func (*ListDomainsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ListDomainsResponse) GetDomains() []*Domain {
	if m != nil {
		return m.Domains
	}
	return nil
}

// GetDomainRequest specifies the domain to retrieve information for.
type GetDomainRequest struct {
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// showDeleted requests domains that have been marked for deletion
	// but have not been garbage collected.
	ShowDeleted bool `protobuf:"varint,2,opt,name=show_deleted,json=showDeleted" json:"show_deleted,omitempty"`
}

func (m *GetDomainRequest) Reset()                    { *m = GetDomainRequest{} }
func (m *GetDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDomainRequest) ProtoMessage()               {}
func (*GetDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetDomainRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetDomainRequest) GetShowDeleted() bool {
	if m != nil {
		return m.ShowDeleted
	}
	return false
}

// CreateDomainRequest creates a new domain
type CreateDomainRequest struct {
	DomainId    string                     `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	MinInterval *google_protobuf2.Duration `protobuf:"bytes,2,opt,name=min_interval,json=minInterval" json:"min_interval,omitempty"`
	MaxInterval *google_protobuf2.Duration `protobuf:"bytes,3,opt,name=max_interval,json=maxInterval" json:"max_interval,omitempty"`
	// The private_key fields allows callers to set the private key.
	VrfPrivateKey *google_protobuf1.Any `protobuf:"bytes,4,opt,name=vrf_private_key,json=vrfPrivateKey" json:"vrf_private_key,omitempty"`
	LogPrivateKey *google_protobuf1.Any `protobuf:"bytes,5,opt,name=log_private_key,json=logPrivateKey" json:"log_private_key,omitempty"`
	MapPrivateKey *google_protobuf1.Any `protobuf:"bytes,6,opt,name=map_private_key,json=mapPrivateKey" json:"map_private_key,omitempty"`
}

func (m *CreateDomainRequest) Reset()                    { *m = CreateDomainRequest{} }
func (m *CreateDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDomainRequest) ProtoMessage()               {}
func (*CreateDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CreateDomainRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *CreateDomainRequest) GetMinInterval() *google_protobuf2.Duration {
	if m != nil {
		return m.MinInterval
	}
	return nil
}

func (m *CreateDomainRequest) GetMaxInterval() *google_protobuf2.Duration {
	if m != nil {
		return m.MaxInterval
	}
	return nil
}

func (m *CreateDomainRequest) GetVrfPrivateKey() *google_protobuf1.Any {
	if m != nil {
		return m.VrfPrivateKey
	}
	return nil
}

func (m *CreateDomainRequest) GetLogPrivateKey() *google_protobuf1.Any {
	if m != nil {
		return m.LogPrivateKey
	}
	return nil
}

func (m *CreateDomainRequest) GetMapPrivateKey() *google_protobuf1.Any {
	if m != nil {
		return m.MapPrivateKey
	}
	return nil
}

// DeleteDomainRequest deletes a domain
type DeleteDomainRequest struct {
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
}

func (m *DeleteDomainRequest) Reset()                    { *m = DeleteDomainRequest{} }
func (m *DeleteDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDomainRequest) ProtoMessage()               {}
func (*DeleteDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *DeleteDomainRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

// UndeleteDomainRequest deletes a domain
type UndeleteDomainRequest struct {
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
}

func (m *UndeleteDomainRequest) Reset()                    { *m = UndeleteDomainRequest{} }
func (m *UndeleteDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*UndeleteDomainRequest) ProtoMessage()               {}
func (*UndeleteDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *UndeleteDomainRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func init() {
	proto.RegisterType((*Domain)(nil), "google.keytransparency.v1.Domain")
	proto.RegisterType((*ListDomainsRequest)(nil), "google.keytransparency.v1.ListDomainsRequest")
	proto.RegisterType((*ListDomainsResponse)(nil), "google.keytransparency.v1.ListDomainsResponse")
	proto.RegisterType((*GetDomainRequest)(nil), "google.keytransparency.v1.GetDomainRequest")
	proto.RegisterType((*CreateDomainRequest)(nil), "google.keytransparency.v1.CreateDomainRequest")
	proto.RegisterType((*DeleteDomainRequest)(nil), "google.keytransparency.v1.DeleteDomainRequest")
	proto.RegisterType((*UndeleteDomainRequest)(nil), "google.keytransparency.v1.UndeleteDomainRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KeyTransparencyAdmin service

type KeyTransparencyAdminClient interface {
	// ListDomains returns a list of all domains this Key Transparency server
	// operates on.
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	// GetDomain returns the confiuration information for a given domain.
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// CreateDomain creates a new Trillian log/map pair.  A unique domainId must
	// be provided.  To create a new domain with the same name as a previously
	// deleted domain, a user must wait X days until the domain is garbage
	// collected.
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// DeleteDomain marks a domain as deleted.  Domains will be garbage collected
	// after X days.
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf4.Empty, error)
	// UndeleteDomain marks a previously deleted domain as active if it has not
	// already been garbage collected.
	UndeleteDomain(ctx context.Context, in *UndeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf4.Empty, error)
}

type keyTransparencyAdminClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyAdminClient(cc *grpc.ClientConn) KeyTransparencyAdminClient {
	return &keyTransparencyAdminClient{cc}
}

func (c *keyTransparencyAdminClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyAdmin/ListDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyAdmin/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyAdmin/CreateDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf4.Empty, error) {
	out := new(google_protobuf4.Empty)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyAdmin/DeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminClient) UndeleteDomain(ctx context.Context, in *UndeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf4.Empty, error) {
	out := new(google_protobuf4.Empty)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyAdmin/UndeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyTransparencyAdmin service

type KeyTransparencyAdminServer interface {
	// ListDomains returns a list of all domains this Key Transparency server
	// operates on.
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	// GetDomain returns the confiuration information for a given domain.
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	// CreateDomain creates a new Trillian log/map pair.  A unique domainId must
	// be provided.  To create a new domain with the same name as a previously
	// deleted domain, a user must wait X days until the domain is garbage
	// collected.
	CreateDomain(context.Context, *CreateDomainRequest) (*Domain, error)
	// DeleteDomain marks a domain as deleted.  Domains will be garbage collected
	// after X days.
	DeleteDomain(context.Context, *DeleteDomainRequest) (*google_protobuf4.Empty, error)
	// UndeleteDomain marks a previously deleted domain as active if it has not
	// already been garbage collected.
	UndeleteDomain(context.Context, *UndeleteDomainRequest) (*google_protobuf4.Empty, error)
}

func RegisterKeyTransparencyAdminServer(s *grpc.Server, srv KeyTransparencyAdminServer) {
	s.RegisterService(&_KeyTransparencyAdmin_serviceDesc, srv)
}

func _KeyTransparencyAdmin_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyAdmin/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdmin_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyAdmin/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdmin_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyAdmin/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdmin_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyAdmin/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdmin_UndeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServer).UndeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyAdmin/UndeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServer).UndeleteDomain(ctx, req.(*UndeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencyAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.v1.KeyTransparencyAdmin",
	HandlerType: (*KeyTransparencyAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDomains",
			Handler:    _KeyTransparencyAdmin_ListDomains_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _KeyTransparencyAdmin_GetDomain_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _KeyTransparencyAdmin_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _KeyTransparencyAdmin_DeleteDomain_Handler,
		},
		{
			MethodName: "UndeleteDomain",
			Handler:    _KeyTransparencyAdmin_UndeleteDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/keytransparency_proto/admin.proto",
}

func init() { proto.RegisterFile("v1/keytransparency_proto/admin.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x4f, 0x53, 0xd3, 0x4e,
	0x18, 0xc7, 0x27, 0xed, 0x8f, 0x02, 0xdb, 0xc2, 0x0f, 0xb7, 0x88, 0xa1, 0x38, 0x5a, 0xa2, 0x87,
	0x0e, 0x8e, 0x89, 0x54, 0x67, 0x9c, 0x41, 0x2e, 0x08, 0x8c, 0xc3, 0xe0, 0x81, 0xc9, 0xe0, 0xc5,
	0x4b, 0x67, 0xdb, 0x6c, 0x4b, 0x86, 0x64, 0x77, 0xdd, 0x6c, 0x03, 0x19, 0xf5, 0xa0, 0xe3, 0x3b,
	0xe0, 0x2d, 0xf8, 0x8e, 0x7c, 0x0b, 0x1e, 0x7c, 0x19, 0x4e, 0x36, 0x9b, 0x92, 0xa6, 0x6d, 0x80,
	0xf1, 0xd4, 0x6c, 0x9e, 0xe7, 0xf3, 0xfc, 0xfd, 0xa6, 0x0b, 0x9e, 0x86, 0xdb, 0xd6, 0x39, 0x8e,
	0x04, 0x47, 0x24, 0x60, 0x88, 0x63, 0xd2, 0x8b, 0x3a, 0x8c, 0x53, 0x41, 0x2d, 0xe4, 0xf8, 0x2e,
	0x31, 0xe5, 0x33, 0x5c, 0x1f, 0x50, 0x3a, 0xf0, 0xb0, 0x99, 0xf3, 0x34, 0xc3, 0xed, 0xc6, 0xc3,
	0xc4, 0x64, 0x21, 0xe6, 0x5a, 0x88, 0x10, 0x2a, 0x90, 0x70, 0x29, 0x09, 0x12, 0xb0, 0xa1, 0x40,
	0x4b, 0x9e, 0xba, 0xc3, 0xbe, 0x85, 0x48, 0xa4, 0x4c, 0x1b, 0x79, 0x13, 0xf6, 0x99, 0x48, 0x8d,
	0x8f, 0xf2, 0x46, 0x67, 0xc8, 0x65, 0x60, 0x65, 0x5f, 0x16, 0xdc, 0xf5, 0x3c, 0x17, 0xa5, 0xe7,
	0x46, 0x8f, 0x47, 0x4c, 0xd0, 0xb8, 0x95, 0x80, 0x75, 0xd5, 0x4f, 0x62, 0x33, 0x7e, 0x96, 0x40,
	0xe5, 0x80, 0xfa, 0xc8, 0x25, 0x70, 0x03, 0x2c, 0x3a, 0xf2, 0xa9, 0xe3, 0x3a, 0xba, 0xd6, 0xd4,
	0x5a, 0x8b, 0xf6, 0x42, 0xf2, 0xe2, 0xc8, 0x81, 0x4d, 0x50, 0xf6, 0xe8, 0x40, 0x2f, 0x35, 0xb5,
	0x56, 0xb5, 0xbd, 0x6c, 0x8e, 0x32, 0x9c, 0x72, 0x8c, 0xed, 0xd8, 0x14, 0x7b, 0xf8, 0x88, 0xe9,
	0xe5, 0xe9, 0x1e, 0x3e, 0x62, 0xf0, 0x09, 0x28, 0x87, 0xbc, 0xaf, 0xff, 0x27, 0x3d, 0xee, 0x99,
	0xaa, 0x8e, 0x93, 0x61, 0xd7, 0x73, 0x7b, 0xc7, 0x38, 0xb2, 0x63, 0x2b, 0xdc, 0x05, 0x35, 0x3f,
	0x2e, 0x81, 0x08, 0xcc, 0x43, 0xe4, 0xe9, 0x73, 0xd2, 0x7b, 0xdd, 0x54, 0x43, 0x4e, 0x7b, 0x36,
	0x0f, 0x54, 0xcf, 0x76, 0xd5, 0x77, 0xc9, 0x91, 0xf2, 0x96, 0x34, 0xba, 0xbc, 0xa6, 0x2b, 0x37,
	0xd3, 0xe8, 0x72, 0x44, 0xeb, 0x60, 0xde, 0xc1, 0x1e, 0x16, 0xd8, 0xd1, 0xe7, 0x9b, 0x5a, 0x6b,
	0xc1, 0x4e, 0x8f, 0xc6, 0x6b, 0x00, 0xdf, 0xbb, 0x81, 0x48, 0x26, 0x15, 0xd8, 0xf8, 0xd3, 0x10,
	0x07, 0x02, 0x6e, 0x82, 0x5a, 0x70, 0x46, 0x2f, 0x3a, 0x29, 0xa4, 0x49, 0xa8, 0x1a, 0xbf, 0x3b,
	0x50, 0xa0, 0x0d, 0xea, 0x63, 0x60, 0xc0, 0x28, 0x09, 0x30, 0x7c, 0x03, 0xe6, 0x93, 0xd1, 0x06,
	0xba, 0xd6, 0x2c, 0xb7, 0xaa, 0xed, 0x4d, 0x73, 0xa6, 0x8a, 0xcc, 0x04, 0xb6, 0x53, 0xc2, 0xb0,
	0xc1, 0xca, 0x3b, 0xac, 0x42, 0xa6, 0xa5, 0x14, 0x2e, 0x2f, 0x5f, 0x67, 0x69, 0xb2, 0xce, 0x3f,
	0x25, 0x50, 0xdf, 0xe7, 0x18, 0x09, 0x7c, 0x87, 0xb8, 0xf9, 0x5d, 0x95, 0xfe, 0x69, 0x57, 0xe5,
	0x3b, 0xed, 0x6a, 0x17, 0xfc, 0x1f, 0xf2, 0x7e, 0x87, 0x71, 0x37, 0x44, 0x02, 0x77, 0xce, 0x71,
	0xa4, 0x84, 0xb5, 0x3a, 0x11, 0x60, 0x8f, 0x44, 0xf6, 0x52, 0xc8, 0xfb, 0x27, 0x89, 0xef, 0x31,
	0x8e, 0x62, 0xda, 0xa3, 0x83, 0x31, 0x7a, 0xae, 0x88, 0xf6, 0xe8, 0x60, 0x9c, 0xf6, 0x11, 0x1b,
	0xa3, 0x2b, 0x45, 0xb4, 0x8f, 0xd8, 0x35, 0x6d, 0xb4, 0x41, 0x3d, 0x99, 0xfa, 0xed, 0x27, 0x6d,
	0xbc, 0x02, 0xf7, 0x3f, 0x10, 0xe7, 0x8e, 0x54, 0xfb, 0x6a, 0x0e, 0xac, 0x1e, 0xe3, 0xe8, 0x34,
	0xa3, 0xa7, 0xbd, 0xf8, 0x8f, 0x0b, 0x7e, 0xd3, 0x40, 0x35, 0x23, 0x4b, 0xf8, 0xbc, 0x40, 0x7d,
	0x93, 0xba, 0x6f, 0x98, 0xb7, 0x75, 0x4f, 0xd4, 0x6e, 0xd4, 0xbf, 0xff, 0xfa, 0x7d, 0x55, 0x5a,
	0x82, 0x55, 0x2b, 0xdc, 0xb6, 0x94, 0x8a, 0xe1, 0x17, 0xb0, 0x38, 0x52, 0x31, 0x7c, 0x56, 0x10,
	0x31, 0xaf, 0xf5, 0xc6, 0xcd, 0xdf, 0x8a, 0xf1, 0x58, 0x66, 0x5c, 0x87, 0x0f, 0x32, 0x19, 0xad,
	0xcf, 0xa3, 0x49, 0x7d, 0x85, 0x11, 0xa8, 0x65, 0xe5, 0x0e, 0x8b, 0x5a, 0x9a, 0xf2, 0x5d, 0xdc,
	0xa6, 0x86, 0x35, 0x59, 0xc3, 0x8a, 0x91, 0xed, 0x7a, 0x47, 0xdb, 0x82, 0x17, 0xa0, 0x96, 0xdd,
	0x7f, 0x61, 0xea, 0x29, 0x42, 0x69, 0xac, 0x4d, 0x88, 0xec, 0x30, 0xbe, 0x1c, 0xd2, 0x9e, 0xb7,
	0x66, 0xf6, 0xfc, 0x43, 0x03, 0xcb, 0xe3, 0x2a, 0x82, 0x2f, 0x0a, 0x72, 0x4f, 0x15, 0xdc, 0xcc,
	0xec, 0x2d, 0x99, 0xdd, 0xd8, 0x6a, 0xce, 0xc8, 0xbe, 0x33, 0x54, 0xe1, 0xde, 0x1e, 0x7e, 0xdc,
	0x1f, 0xb8, 0xe2, 0x6c, 0xd8, 0x35, 0x7b, 0xd4, 0xb7, 0xd4, 0x5d, 0x96, 0xcb, 0x6f, 0xf5, 0x28,
	0x4f, 0xae, 0xcd, 0x59, 0x57, 0x70, 0xb7, 0x22, 0x7f, 0x5e, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x38, 0x87, 0xcd, 0xf8, 0xa5, 0x07, 0x00, 0x00,
}
