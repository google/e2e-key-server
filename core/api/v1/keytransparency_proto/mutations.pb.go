// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v1/keytransparency_proto/mutations.proto

package keytransparency_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MutationService service

type MutationServiceClient interface {
	// GetMutations returns a list of mutations in a specific epoch.
	//
	// Returns a list of mutations and their inclusion proofs along with the epoch
	// signed map root.
	GetMutations(ctx context.Context, in *GetMutationsRequest, opts ...grpc.CallOption) (*GetMutationsResponse, error)
	// GetMutationsStream is a streaming API similar to GetMutations.
	//
	// Returns a list of mutations and their inclusion proofs along with the epoch
	// signed map root.
	GetMutationsStream(ctx context.Context, in *GetMutationsRequest, opts ...grpc.CallOption) (MutationService_GetMutationsStreamClient, error)
}

type mutationServiceClient struct {
	cc *grpc.ClientConn
}

func NewMutationServiceClient(cc *grpc.ClientConn) MutationServiceClient {
	return &mutationServiceClient{cc}
}

func (c *mutationServiceClient) GetMutations(ctx context.Context, in *GetMutationsRequest, opts ...grpc.CallOption) (*GetMutationsResponse, error) {
	out := new(GetMutationsResponse)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.MutationService/GetMutations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationServiceClient) GetMutationsStream(ctx context.Context, in *GetMutationsRequest, opts ...grpc.CallOption) (MutationService_GetMutationsStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MutationService_serviceDesc.Streams[0], c.cc, "/google.keytransparency.v1.MutationService/GetMutationsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mutationServiceGetMutationsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MutationService_GetMutationsStreamClient interface {
	Recv() (*GetMutationsResponse, error)
	grpc.ClientStream
}

type mutationServiceGetMutationsStreamClient struct {
	grpc.ClientStream
}

func (x *mutationServiceGetMutationsStreamClient) Recv() (*GetMutationsResponse, error) {
	m := new(GetMutationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MutationService service

type MutationServiceServer interface {
	// GetMutations returns a list of mutations in a specific epoch.
	//
	// Returns a list of mutations and their inclusion proofs along with the epoch
	// signed map root.
	GetMutations(context.Context, *GetMutationsRequest) (*GetMutationsResponse, error)
	// GetMutationsStream is a streaming API similar to GetMutations.
	//
	// Returns a list of mutations and their inclusion proofs along with the epoch
	// signed map root.
	GetMutationsStream(*GetMutationsRequest, MutationService_GetMutationsStreamServer) error
}

func RegisterMutationServiceServer(s *grpc.Server, srv MutationServiceServer) {
	s.RegisterService(&_MutationService_serviceDesc, srv)
}

func _MutationService_GetMutations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMutationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServiceServer).GetMutations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.MutationService/GetMutations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServiceServer).GetMutations(ctx, req.(*GetMutationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutationService_GetMutationsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMutationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MutationServiceServer).GetMutationsStream(m, &mutationServiceGetMutationsStreamServer{stream})
}

type MutationService_GetMutationsStreamServer interface {
	Send(*GetMutationsResponse) error
	grpc.ServerStream
}

type mutationServiceGetMutationsStreamServer struct {
	grpc.ServerStream
}

func (x *mutationServiceGetMutationsStreamServer) Send(m *GetMutationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MutationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.v1.MutationService",
	HandlerType: (*MutationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMutations",
			Handler:    _MutationService_GetMutations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMutationsStream",
			Handler:       _MutationService_GetMutationsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/keytransparency_proto/mutations.proto",
}

func init() { proto.RegisterFile("api/v1/keytransparency_proto/mutations.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x49, 0x2c, 0xc8, 0xd4,
	0x2f, 0x33, 0xd4, 0xcf, 0x4e, 0xad, 0x2c, 0x29, 0x4a, 0xcc, 0x2b, 0x2e, 0x48, 0x2c, 0x4a, 0xcd,
	0x4b, 0xae, 0x8c, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x2d, 0x2d, 0x49, 0x2c, 0xc9, 0xcc,
	0xcf, 0x2b, 0xd6, 0x03, 0xf3, 0x85, 0x24, 0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xd0, 0x54,
	0xeb, 0x95, 0x19, 0x4a, 0xc9, 0x40, 0xa4, 0xf4, 0x41, 0xe6, 0x25, 0xe6, 0xe5, 0xe5, 0xa3, 0x68,
	0x94, 0x32, 0xc2, 0x6b, 0x0d, 0xba, 0x71, 0x60, 0x51, 0xa3, 0x3b, 0x4c, 0x5c, 0xfc, 0xbe, 0x50,
	0x07, 0x04, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0xcd, 0x67, 0xe4, 0xe2, 0x71, 0x4f, 0x2d,
	0x81, 0x09, 0x17, 0x0b, 0xe9, 0xe9, 0xe1, 0x74, 0x92, 0x1e, 0xb2, 0xc2, 0xa0, 0xd4, 0xc2, 0xd2,
	0xd4, 0xe2, 0x12, 0x29, 0x7d, 0xa2, 0xd5, 0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x2a, 0xe9, 0x35,
	0x5d, 0x7e, 0x32, 0x99, 0x49, 0x43, 0x48, 0x0d, 0xe4, 0xfc, 0x94, 0xfc, 0xdc, 0xc4, 0xcc, 0xbc,
	0x62, 0xfd, 0x6a, 0x08, 0x23, 0x3e, 0x33, 0xa5, 0x56, 0x3f, 0xb5, 0x20, 0x3f, 0x39, 0xa3, 0x58,
	0xbf, 0x1a, 0x4c, 0xd7, 0x0a, 0x2d, 0x63, 0xe4, 0x12, 0x42, 0x36, 0x28, 0xb8, 0xa4, 0x28, 0x35,
	0x31, 0x97, 0xf6, 0xee, 0xd4, 0x05, 0xbb, 0x53, 0x5d, 0x48, 0x15, 0xbf, 0x3b, 0xad, 0x8a, 0xc1,
	0xee, 0x31, 0x60, 0x74, 0x72, 0x8d, 0x72, 0x4e, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce,
	0xcf, 0xd5, 0x87, 0xc6, 0x1e, 0x9a, 0x6d, 0xfa, 0xc9, 0xf9, 0x45, 0x90, 0x28, 0xc5, 0x15, 0x77,
	0x49, 0x6c, 0x60, 0xca, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x42, 0xf3, 0xf5, 0x49, 0x02,
	0x00, 0x00,
}
