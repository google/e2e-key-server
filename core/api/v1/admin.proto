// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/google/keytransparency/core/api/v1/keytransparency_go_proto";

// Key Transparency Administration
//
// The Key Transparency API consists of a map of user names to public
// keys. Each user name also has a history of public keys that have been
// associated with it.
package google.keytransparency.v1;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "trillian.proto";
import "crypto/keyspb/keyspb.proto";


// Domain contains information on a single domain
message Domain {
  // DomainId can be any URL safe string.
  string domain_id = 1;
  // Log contains the Log-Tree's info.
  trillian.Tree log = 2;
  // Map contains the Map-Tree's info.
  trillian.Tree map = 3;
  // Vrf contains the VRF public key.
  keyspb.PublicKey vrf = 4;
  // min_interval is the minimum time between epochs.
  google.protobuf.Duration min_interval = 5;
  // max_interval is the maximum time between epochs.
  google.protobuf.Duration max_interval = 6;
  // Deleted indicates whether the domain has been marked as deleted.
  // By its presence in a response, this domain has not been garbage collected.
  bool deleted = 7;
}

// ListDomains request.
// No pagination options are provided.
message ListDomainsRequest{
  // showDeleted requests domains that have been marked for deletion
  // but have not been garbage collected.
  bool show_deleted = 1;
}

// ListDomains response contains domains.
message ListDomainsResponse{
  repeated Domain domains = 1;
}

// GetDomainRequest specifies the domain to retrieve information for.
message GetDomainRequest {
  string domain_id = 1;
  // showDeleted requests domains that have been marked for deletion
  // but have not been garbage collected.
  bool show_deleted = 2;
}

// CreateDomainRequest creates a new domain
message CreateDomainRequest {
  string domain_id = 1;
  google.protobuf.Duration min_interval = 2;
  google.protobuf.Duration max_interval = 3;
  // The private_key fields allows callers to set the private key.
  google.protobuf.Any vrf_private_key = 4;
  google.protobuf.Any log_private_key = 5;
  google.protobuf.Any map_private_key = 6;
}

// DeleteDomainRequest deletes a domain
message DeleteDomainRequest {
  string domain_id = 1;
}

// UndeleteDomainRequest deletes a domain
message UndeleteDomainRequest {
  string domain_id = 1;
}

// GarbageCollect request.
message GarbageCollectRequest {
  // Soft-deleted domains with a deleted timestamp before this will be fully
  // deleted.
  google.protobuf.Timestamp before = 1;
}

message GarbageCollectResponse {
  repeated Domain domains = 1;
}


// The KeyTransparencyAdmin API provides the following resources:
// - Domains
//   Namespaces on which which Key Transparency operates. A domain determines a
//   unique Trillian map to use. It also determines the authentication policies
//   for users and apps within a domain.
//   - /v1/domains
service KeyTransparencyAdmin {

  // ListDomains returns a list of all domains this Key Transparency server
  // operates on.
  rpc ListDomains(ListDomainsRequest) returns (ListDomainsResponse) {
    option (google.api.http) = { get: "/v1/domains" };
  }

  // GetDomain returns the confiuration information for a given domain.
  rpc GetDomain(GetDomainRequest) returns (Domain) {
    option (google.api.http) = { get: "/v1/domains/{domain_id}" };
  }

  // CreateDomain creates a new Trillian log/map pair.  A unique domainId must
  // be provided.  To create a new domain with the same name as a previously
  // deleted domain, a user must wait X days until the domain is garbage
  // collected.
  rpc CreateDomain(CreateDomainRequest) returns (Domain) {
    option (google.api.http) = {
      post: "/v1/domains"
      body: "*"
    };
  }

  // DeleteDomain marks a domain as deleted.  Domains will be garbage collected
  // after X days.
  rpc DeleteDomain(DeleteDomainRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/domains/{domain_id}"
    };
  }

  // UndeleteDomain marks a previously deleted domain as active if it has not
  // already been garbage collected.
  rpc UndeleteDomain(UndeleteDomainRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/domains/{domain_id}:undelete"
    };
  }

  // Fully delete soft-deleted domains that have been soft-deleted before the specified timestamp.
  rpc GarbageCollect(GarbageCollectRequest) returns (GarbageCollectResponse) {
  }
}
