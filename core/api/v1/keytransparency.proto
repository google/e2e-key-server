// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/google/keytransparency/core/api/v1/keytransparency_go_proto";

// Key Transparency
//
// The Key Transparency API consists of a map of user names to public
// keys. Each user name also has a history of public keys that have been
// associated with it.
package google.keytransparency.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "trillian.proto";
import "trillian_map_api.proto";
import "tink.proto";
import "v1/admin.proto";

// Committed represents the data committed to in a cryptographic commitment.
// commitment = HMAC_SHA512_256(key, data)
message Committed {
  // key is the 16 byte random commitment key.
  bytes key = 1;
  // data is the data being committed to.
  bytes data = 2;
}

// EntryUpdate contains the user entry update(s).
message EntryUpdate {
  // mutation authorizes the change to entry.
  Entry mutation = 2;
  // committed contains the data committed to in mutation.commitment.
  Committed committed = 3;
}

//
// Verifiable Map Leaf Data and Mutation Data.
//

// Entry is a signed change to a map entry.
// Entry contains a commitment to profile and a set of authorized update keys.
// Entry is placed in the verifiable map as leaf data.
message Entry {
  // index is the location of this leaf in the sparse merkle tree.
  bytes index = 3;
  // commitment is a cryptographic commitment to arbitrary data.
  bytes commitment = 6;
  // authorized_keys is the set of keys allowed to sign updates for this entry.
  crypto.tink.Keyset authorized_keys = 7;
  // previous contains the hash of the previous entry that this mutation is
  // modifying creating a hash chain of all mutations. The hash used is
  // CommonJSON in "github.com/benlaurie/objecthash/go/objecthash".
  bytes previous = 8;

  // signatures on entry. Must be signed by keys from both previous and
  // current epochs. The first proves ownership of new epoch key, and the
  // second proves that the correct owner is making this change.
  repeated bytes signatures = 2;
}

// MutationProof contains the information necessary to compute the new leaf
// value. It contains a) the old leaf value with it's inclusion proof and b) the
// mutation. The new leaf value is computed via:
//       Mutate(leaf_value, mutation)
message MutationProof {
  // mutation contains the information needed to modify the old leaf.
  // The format of a mutation is specific to the particular Mutate function
  // being used.
  Entry mutation = 1;
  // leaf_proof contains the leaf and its inclusion proof for a particular map
  // revision.
  trillian.MapLeafInclusion leaf_proof = 2;
}

// MapperMetadata tracks the mutations that have been mapped so far. It is
// embedded in the Trillian SignedMapHead.
message MapperMetadata {
  int64 highest_fully_completed_seq = 1;
}

// Gets the leaf entry for a user.
message GetUserRequest {
  // directory_id identifies the directory in which the user lives.
  string directory_id = 1;
  // user_id is the user identifier, the format for which is defined by the
  // application.
  string user_id = 2;
  // first_tree_size is the tree_size of the currently trusted log root.
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 3;
}

// Leaf entry for a user.
message MapLeaf {
  // vrf_proof is the proof for the VRF on user_id.
  bytes vrf_proof = 1;
  // map_inclusion is an inclusion proof for the map leaf in an accompanying
  // trillian.SignedMapRoot. If the leaf is non-empty, its leaf.leaf_value
  // stores a serialized Entry proto.
  trillian.MapLeafInclusion map_inclusion = 2;
  // committed contains the data and nonce used to make a cryptographic
  // commitment, which is stored in the commitment field of the serialized Entry
  // proto from map_inclusion.
  // Note: committed can also be found serialized in
  // map_inclusion.leaf.extra_data.
  Committed committed = 3;
}

// Contains the leaf entry for a user at the most recently published epoch.
message GetUserResponse {
  // epoch is the most recently published epoch.
  Epoch epoch = 1;
  // leaf is the leaf entry for the requested user.
  MapLeaf leaf = 2;
}

message GetUserBatchRequest {
  // directory_id identifies the directory in which the users live.
  string directory_id = 1;
  // user_ids are the user identifiers, the format for which is defined by the
  // application.
  repeated string user_ids = 2;
  // first_tree_size is the tree_size of the currently trusted log root.
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 3;
}

// Contains the leaf entries for a set of users at the most recently published epoch.
message GetUserBatchResponse {
  // epoch is the most recently published epoch.
  Epoch epoch = 1;
  // leaves are the leaf entries for the requested users, in the order requested.
  repeated MapLeaf leaves = 2;
}

// ListEntryHistoryRequest gets a list of historical keys for a user.
message ListEntryHistoryRequest {
  // directory_id identifies the directory in which the user lives.
  string directory_id = 6;
  // user_id is the user identifier.
  string user_id = 1;
  // start is the starting epoch.
  int64 start = 2;
  // page_size is the maximum number of entries to return.
  int32 page_size = 3;
  // Used to be app_id. Applications can define their own hierarchy for user_id
  // if desired.
  reserved 4;
  // first_tree_size is the tree_size of the currently trusted log root.
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 5;
}

// ListEntryHistoryResponse requests a paginated history of keys for a user.
message ListEntryHistoryResponse {
  // values represents the list of keys this user_id has contained over time.
  repeated GetUserResponse values = 1;
  // next_start is the next page token to query for pagination.
  // next_start is 0 when there are no more results to fetch.
  int64 next_start = 2;
}

// UpdateEntryRequest updates a user's profile.
message UpdateEntryRequest {
  // directory_id identifies the directory in which the user lives.
  string directory_id = 5;
  // user_id specifies the id for the user whose profile is being updated.
  string user_id = 1;
  // Used to be app_id. Applications can define their own hierarchy for user_id
  // if desired.
  reserved 2;
  // Used to be first_tree_size. QueueEntryUpdate no longer returns any data.
  reserved 3;
  // entry_update contains the user submitted update.
  EntryUpdate entry_update = 4;
}

// GetEpochRequest identifies a particular epoch.
message GetEpochRequest {
  // directory_id is the directory for which epochs are being requested.
  string directory_id = 5;
  // epoch specifies the epoch number in which mutations will be returned.
  int64 epoch = 1;
  // first_tree_size is the tree_size of the currently trusted log root.
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 2;
}

// GetLatestEpochRequest identifies a particular epoch.
message GetLatestEpochRequest {
  // directory_id is the directory for which epochs are being requested.
  string directory_id = 1;
  // first_tree_size is the tree_size of the currently trusted log root.
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 2;
}

// Epoch represents a snapshot of the entire key directory and
// a diff of what changed between this revision and the previous revision.
message Epoch {
  // directory_id is the directory identifier.
  string directory_id = 1;
  // map_root contains the signed map root for the sparse Merkle Tree.
  trillian.SignedMapRoot map_root = 2;
  // log_root is the latest globally consistent log root.
  trillian.SignedLogRoot log_root = 3;
  // log_consistency proves that log_root is consistent with previously seen
  // roots.
  repeated bytes log_consistency = 4;
  // log_inclusion proves that map_root is part of log_root at
  // index=map_root.MapRevision.
  repeated bytes log_inclusion = 5;
}

// ListMutationsRequest requests the mutations that created a given epoch.
message ListMutationsRequest {
  // directory_id is the directory identifier.
  string directory_id = 5;
  // epoch specifies the epoch number.
  int64 epoch = 1;
  // page_token defines the starting point for pagination.
  // To request the next page, pass next_page_token from the previous response.
  // To start at the beginning, simply omit page_token from the request.
  string page_token = 3;
  // page_size is the maximum number of mutations to return in a single request.
  // The server may choose a smaller page_size than the one requested.
  int32 page_size = 4;
  // TODO(gbelvin): Add field mask.
}

// ListMutationsResponse contains the mutations that produced an epoch.
message ListMutationsResponse {
  // mutations contains the mutation object and the leaf value it operated on.
  repeated MutationProof mutations = 6;
  // next_page_token is the next page token to query for pagination.
  // An empty value means there are no more results to fetch.
  string next_page_token = 7;
}

// The KeyTransparency API represents a directory of public keys.
//
// The API has a collection of directories:
// `/v1/directories/`
//  * Each directory has a single sparse merkle tree, append only log,
//    and other public key material that is needed to verify server responses.
//
// Each Directory has a collection of snapshots called epochs:
// `/v1/directories/*/epochs/`
//  * Each Epoch contains the root of the sparse merkle tree and the changes
//  that
//    occurred that epoch and the previous.
//
// Each Epoch has a collection of mutations:
// `/v1/directories/*/epochs/*/mutations/`.
//  * Each mutation contains the leafvalue of the previous epoch that it
//  operated on.
//  * The full set of mutations for an epoch allows the receiver to compute the
//     Merkle Tree Root of this epoch from the previous epoch.
//
// Each Directory has a collection of Users:
// `/v1/directories/*/users/`
//  * Each User contains public key material, permissions for who is allowed to
//    change that user, and signatures indicating who made the last change.
//
// Each User also has a collection of historical values for user:
// `/v1/directories/*/users/*/history`
//
service KeyTransparency {
  // GetDirectory returns the information needed to verify the specified
  // directory.
  rpc GetDirectory(GetDirectoryRequest) returns (Directory) {
    option (google.api.http) = {
      get: "/v1/directories/{directory_id}"
    };
  }

  // GetEpoch returns a SignedMapRoot by the by the requested revision number
  // along with its inclusion proof in the log and the log's consistency proofs.
  rpc GetEpoch(GetEpochRequest) returns (Epoch) {
    option (google.api.http) = {
      get: "/v1/directories/{directory_id}/epochs/{epoch}"
    };
  }

  // GetLatestEpoch returns the latest SignedMapRoot along with its inclusion
  // proof in the log and the log's consistency proofs.
  rpc GetLatestEpoch(GetLatestEpochRequest) returns (Epoch) {
    option (google.api.http) = {
      get: "/v1/directories/{directory_id}/epochs:latest"
    };
  }

  // GetEpochStream streams new epochs from a requested starting point
  // and continues as new epochs are created.
  rpc GetEpochStream(GetEpochRequest) returns (stream Epoch) {
    option (google.api.http) = {
      get: "/v1/directories/{directory_id}/epochs:stream"
    };
  }

  // ListMutations returns a list of mutations in a specific epoch.
  rpc ListMutations(ListMutationsRequest) returns (ListMutationsResponse) {
    option (google.api.http) = {
      get: "/v1/directories/{directory_id}/epochs/{epoch}/mutations"
    };
  }

  // ListMutationsStream is a streaming list of mutations in a specific epoch.
  rpc ListMutationsStream(ListMutationsRequest) returns (stream MutationProof) {
    option (google.api.http) = {
      get: "/v1/directories/{directory_id}/epochs/{epoch}/mutations:stream"
    };
  }

  // GetUser returns a user's leaf entry in the Merkle Tree.
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1/directories/{directory_id}/users/{user_id}"
    };
  }

  // GetUserBatch returns a batch of user leaf entries in the Merkle tree at the same epoch.
  rpc GetUserBatch(GetUserBatchRequest) returns (GetUserBatchResponse) {
    option (google.api.http) = {
      get: "/v1/directories/{directory_id}/users:batchGet"
    };
  }

  // ListEntryHistory returns a list of historic GetUser values.
  //
  // Clients verify their account history by observing correct values for their
  // account over time.
  rpc ListEntryHistory(ListEntryHistoryRequest)
      returns (ListEntryHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/directories/{directory_id}/users/{user_id}/history"
    };
  }

  // QueueUserUpdate enqueues an update to a user's profile.
  //
  // Clients should poll GetUser until the update appears, and retry if no
  // update appears after a timeout.
  rpc QueueEntryUpdate(UpdateEntryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/directories/{directory_id}/users/{user_id}:queue"
      body: "entry_update"
    };
  }
}
