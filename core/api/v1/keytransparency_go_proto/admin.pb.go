// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/admin.proto

package keytransparency_go_proto // import "github.com/google/keytransparency/core/api/v1/keytransparency_go_proto"

/*
Key Transparency Administration

The Key Transparency API consists of a map of user names to public
keys. Each user name also has a history of public keys that have been
associated with it.
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import duration "github.com/golang/protobuf/ptypes/duration"
import empty "github.com/golang/protobuf/ptypes/empty"
import trillian "github.com/google/trillian"
import keyspb "github.com/google/trillian/crypto/keyspb"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Domain contains information on a single domain
type Domain struct {
	// DomainId can be any URL safe string.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// Log contains the Log-Tree's info.
	Log *trillian.Tree `protobuf:"bytes,2,opt,name=log" json:"log,omitempty"`
	// Map contains the Map-Tree's info.
	Map *trillian.Tree `protobuf:"bytes,3,opt,name=map" json:"map,omitempty"`
	// Vrf contains the VRF public key.
	Vrf *keyspb.PublicKey `protobuf:"bytes,4,opt,name=vrf" json:"vrf,omitempty"`
	// min_interval is the minimum time between epochs.
	MinInterval *duration.Duration `protobuf:"bytes,5,opt,name=min_interval,json=minInterval" json:"min_interval,omitempty"`
	// max_interval is the maximum time between epochs.
	MaxInterval *duration.Duration `protobuf:"bytes,6,opt,name=max_interval,json=maxInterval" json:"max_interval,omitempty"`
	// Deleted indicates whether the domain has been marked as deleted.
	// By its presence in a response, this domain has not been garbage collected.
	Deleted              bool     `protobuf:"varint,7,opt,name=deleted" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Domain) Reset()         { *m = Domain{} }
func (m *Domain) String() string { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()    {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_admin_c3b05a971594dbf6, []int{0}
}
func (m *Domain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Domain.Unmarshal(m, b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
}
func (dst *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(dst, src)
}
func (m *Domain) XXX_Size() int {
	return xxx_messageInfo_Domain.Size(m)
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

func (m *Domain) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *Domain) GetLog() *trillian.Tree {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *Domain) GetMap() *trillian.Tree {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *Domain) GetVrf() *keyspb.PublicKey {
	if m != nil {
		return m.Vrf
	}
	return nil
}

func (m *Domain) GetMinInterval() *duration.Duration {
	if m != nil {
		return m.MinInterval
	}
	return nil
}

func (m *Domain) GetMaxInterval() *duration.Duration {
	if m != nil {
		return m.MaxInterval
	}
	return nil
}

func (m *Domain) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// ListDomains request.
// No pagination options are provided.
type ListDomainsRequest struct {
	// showDeleted requests domains that have been marked for deletion
	// but have not been garbage collected.
	ShowDeleted          bool     `protobuf:"varint,1,opt,name=show_deleted,json=showDeleted" json:"show_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDomainsRequest) Reset()         { *m = ListDomainsRequest{} }
func (m *ListDomainsRequest) String() string { return proto.CompactTextString(m) }
func (*ListDomainsRequest) ProtoMessage()    {}
func (*ListDomainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_admin_c3b05a971594dbf6, []int{1}
}
func (m *ListDomainsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDomainsRequest.Unmarshal(m, b)
}
func (m *ListDomainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDomainsRequest.Marshal(b, m, deterministic)
}
func (dst *ListDomainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDomainsRequest.Merge(dst, src)
}
func (m *ListDomainsRequest) XXX_Size() int {
	return xxx_messageInfo_ListDomainsRequest.Size(m)
}
func (m *ListDomainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDomainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDomainsRequest proto.InternalMessageInfo

func (m *ListDomainsRequest) GetShowDeleted() bool {
	if m != nil {
		return m.ShowDeleted
	}
	return false
}

// ListDomains response contains domains.
type ListDomainsResponse struct {
	Domains              []*Domain `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListDomainsResponse) Reset()         { *m = ListDomainsResponse{} }
func (m *ListDomainsResponse) String() string { return proto.CompactTextString(m) }
func (*ListDomainsResponse) ProtoMessage()    {}
func (*ListDomainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_admin_c3b05a971594dbf6, []int{2}
}
func (m *ListDomainsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDomainsResponse.Unmarshal(m, b)
}
func (m *ListDomainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDomainsResponse.Marshal(b, m, deterministic)
}
func (dst *ListDomainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDomainsResponse.Merge(dst, src)
}
func (m *ListDomainsResponse) XXX_Size() int {
	return xxx_messageInfo_ListDomainsResponse.Size(m)
}
func (m *ListDomainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDomainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDomainsResponse proto.InternalMessageInfo

func (m *ListDomainsResponse) GetDomains() []*Domain {
	if m != nil {
		return m.Domains
	}
	return nil
}

// GetDomainRequest specifies the domain to retrieve information for.
type GetDomainRequest struct {
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// showDeleted requests domains that have been marked for deletion
	// but have not been garbage collected.
	ShowDeleted          bool     `protobuf:"varint,2,opt,name=show_deleted,json=showDeleted" json:"show_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDomainRequest) Reset()         { *m = GetDomainRequest{} }
func (m *GetDomainRequest) String() string { return proto.CompactTextString(m) }
func (*GetDomainRequest) ProtoMessage()    {}
func (*GetDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_admin_c3b05a971594dbf6, []int{3}
}
func (m *GetDomainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDomainRequest.Unmarshal(m, b)
}
func (m *GetDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDomainRequest.Marshal(b, m, deterministic)
}
func (dst *GetDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDomainRequest.Merge(dst, src)
}
func (m *GetDomainRequest) XXX_Size() int {
	return xxx_messageInfo_GetDomainRequest.Size(m)
}
func (m *GetDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDomainRequest proto.InternalMessageInfo

func (m *GetDomainRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetDomainRequest) GetShowDeleted() bool {
	if m != nil {
		return m.ShowDeleted
	}
	return false
}

// CreateDomainRequest creates a new domain
type CreateDomainRequest struct {
	DomainId    string             `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	MinInterval *duration.Duration `protobuf:"bytes,2,opt,name=min_interval,json=minInterval" json:"min_interval,omitempty"`
	MaxInterval *duration.Duration `protobuf:"bytes,3,opt,name=max_interval,json=maxInterval" json:"max_interval,omitempty"`
	// The private_key fields allows callers to set the private key.
	VrfPrivateKey        *any.Any `protobuf:"bytes,4,opt,name=vrf_private_key,json=vrfPrivateKey" json:"vrf_private_key,omitempty"`
	LogPrivateKey        *any.Any `protobuf:"bytes,5,opt,name=log_private_key,json=logPrivateKey" json:"log_private_key,omitempty"`
	MapPrivateKey        *any.Any `protobuf:"bytes,6,opt,name=map_private_key,json=mapPrivateKey" json:"map_private_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDomainRequest) Reset()         { *m = CreateDomainRequest{} }
func (m *CreateDomainRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDomainRequest) ProtoMessage()    {}
func (*CreateDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_admin_c3b05a971594dbf6, []int{4}
}
func (m *CreateDomainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDomainRequest.Unmarshal(m, b)
}
func (m *CreateDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDomainRequest.Marshal(b, m, deterministic)
}
func (dst *CreateDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDomainRequest.Merge(dst, src)
}
func (m *CreateDomainRequest) XXX_Size() int {
	return xxx_messageInfo_CreateDomainRequest.Size(m)
}
func (m *CreateDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDomainRequest proto.InternalMessageInfo

func (m *CreateDomainRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *CreateDomainRequest) GetMinInterval() *duration.Duration {
	if m != nil {
		return m.MinInterval
	}
	return nil
}

func (m *CreateDomainRequest) GetMaxInterval() *duration.Duration {
	if m != nil {
		return m.MaxInterval
	}
	return nil
}

func (m *CreateDomainRequest) GetVrfPrivateKey() *any.Any {
	if m != nil {
		return m.VrfPrivateKey
	}
	return nil
}

func (m *CreateDomainRequest) GetLogPrivateKey() *any.Any {
	if m != nil {
		return m.LogPrivateKey
	}
	return nil
}

func (m *CreateDomainRequest) GetMapPrivateKey() *any.Any {
	if m != nil {
		return m.MapPrivateKey
	}
	return nil
}

// DeleteDomainRequest deletes a domain
type DeleteDomainRequest struct {
	DomainId             string   `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDomainRequest) Reset()         { *m = DeleteDomainRequest{} }
func (m *DeleteDomainRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteDomainRequest) ProtoMessage()    {}
func (*DeleteDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_admin_c3b05a971594dbf6, []int{5}
}
func (m *DeleteDomainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteDomainRequest.Unmarshal(m, b)
}
func (m *DeleteDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteDomainRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDomainRequest.Merge(dst, src)
}
func (m *DeleteDomainRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteDomainRequest.Size(m)
}
func (m *DeleteDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDomainRequest proto.InternalMessageInfo

func (m *DeleteDomainRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

// UndeleteDomainRequest deletes a domain
type UndeleteDomainRequest struct {
	DomainId             string   `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UndeleteDomainRequest) Reset()         { *m = UndeleteDomainRequest{} }
func (m *UndeleteDomainRequest) String() string { return proto.CompactTextString(m) }
func (*UndeleteDomainRequest) ProtoMessage()    {}
func (*UndeleteDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_admin_c3b05a971594dbf6, []int{6}
}
func (m *UndeleteDomainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndeleteDomainRequest.Unmarshal(m, b)
}
func (m *UndeleteDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndeleteDomainRequest.Marshal(b, m, deterministic)
}
func (dst *UndeleteDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndeleteDomainRequest.Merge(dst, src)
}
func (m *UndeleteDomainRequest) XXX_Size() int {
	return xxx_messageInfo_UndeleteDomainRequest.Size(m)
}
func (m *UndeleteDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UndeleteDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UndeleteDomainRequest proto.InternalMessageInfo

func (m *UndeleteDomainRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func init() {
	proto.RegisterType((*Domain)(nil), "google.keytransparency.v1.Domain")
	proto.RegisterType((*ListDomainsRequest)(nil), "google.keytransparency.v1.ListDomainsRequest")
	proto.RegisterType((*ListDomainsResponse)(nil), "google.keytransparency.v1.ListDomainsResponse")
	proto.RegisterType((*GetDomainRequest)(nil), "google.keytransparency.v1.GetDomainRequest")
	proto.RegisterType((*CreateDomainRequest)(nil), "google.keytransparency.v1.CreateDomainRequest")
	proto.RegisterType((*DeleteDomainRequest)(nil), "google.keytransparency.v1.DeleteDomainRequest")
	proto.RegisterType((*UndeleteDomainRequest)(nil), "google.keytransparency.v1.UndeleteDomainRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyTransparencyAdminClient is the client API for KeyTransparencyAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyTransparencyAdminClient interface {
	// ListDomains returns a list of all domains this Key Transparency server
	// operates on.
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	// GetDomain returns the confiuration information for a given domain.
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// CreateDomain creates a new Trillian log/map pair.  A unique domainId must
	// be provided.  To create a new domain with the same name as a previously
	// deleted domain, a user must wait X days until the domain is garbage
	// collected.
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// DeleteDomain marks a domain as deleted.  Domains will be garbage collected
	// after X days.
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UndeleteDomain marks a previously deleted domain as active if it has not
	// already been garbage collected.
	UndeleteDomain(ctx context.Context, in *UndeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyTransparencyAdminClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyAdminClient(cc *grpc.ClientConn) KeyTransparencyAdminClient {
	return &keyTransparencyAdminClient{cc}
}

func (c *keyTransparencyAdminClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyAdmin/ListDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyAdmin/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyAdmin/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyAdmin/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminClient) UndeleteDomain(ctx context.Context, in *UndeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyAdmin/UndeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyTransparencyAdmin service

type KeyTransparencyAdminServer interface {
	// ListDomains returns a list of all domains this Key Transparency server
	// operates on.
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	// GetDomain returns the confiuration information for a given domain.
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	// CreateDomain creates a new Trillian log/map pair.  A unique domainId must
	// be provided.  To create a new domain with the same name as a previously
	// deleted domain, a user must wait X days until the domain is garbage
	// collected.
	CreateDomain(context.Context, *CreateDomainRequest) (*Domain, error)
	// DeleteDomain marks a domain as deleted.  Domains will be garbage collected
	// after X days.
	DeleteDomain(context.Context, *DeleteDomainRequest) (*empty.Empty, error)
	// UndeleteDomain marks a previously deleted domain as active if it has not
	// already been garbage collected.
	UndeleteDomain(context.Context, *UndeleteDomainRequest) (*empty.Empty, error)
}

func RegisterKeyTransparencyAdminServer(s *grpc.Server, srv KeyTransparencyAdminServer) {
	s.RegisterService(&_KeyTransparencyAdmin_serviceDesc, srv)
}

func _KeyTransparencyAdmin_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyAdmin/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdmin_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyAdmin/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdmin_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyAdmin/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdmin_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyAdmin/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdmin_UndeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServer).UndeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyAdmin/UndeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServer).UndeleteDomain(ctx, req.(*UndeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencyAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.v1.KeyTransparencyAdmin",
	HandlerType: (*KeyTransparencyAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDomains",
			Handler:    _KeyTransparencyAdmin_ListDomains_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _KeyTransparencyAdmin_GetDomain_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _KeyTransparencyAdmin_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _KeyTransparencyAdmin_DeleteDomain_Handler,
		},
		{
			MethodName: "UndeleteDomain",
			Handler:    _KeyTransparencyAdmin_UndeleteDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/admin.proto",
}

func init() { proto.RegisterFile("v1/admin.proto", fileDescriptor_admin_c3b05a971594dbf6) }

var fileDescriptor_admin_c3b05a971594dbf6 = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0xc7, 0xe5, 0x84, 0xa6, 0xed, 0x24, 0x0d, 0x65, 0x52, 0x8a, 0x9b, 0x22, 0x48, 0xcd, 0x26,
	0x2a, 0xc2, 0x26, 0x01, 0x09, 0xa9, 0x74, 0x53, 0x28, 0x1f, 0x55, 0x59, 0x54, 0x56, 0xd9, 0xb0,
	0x89, 0x26, 0xf1, 0xc4, 0xb5, 0x6a, 0xcf, 0x98, 0xf1, 0xc4, 0xad, 0x05, 0x2c, 0x40, 0xdc, 0xa0,
	0x57, 0xe0, 0x46, 0x5c, 0x81, 0x05, 0xc7, 0x40, 0xf6, 0x8c, 0x53, 0xc7, 0x49, 0xdc, 0x56, 0xac,
	0x9c, 0xf1, 0x7b, 0xbf, 0xf7, 0xf9, 0x77, 0x06, 0xd4, 0xc3, 0x8e, 0x81, 0x2c, 0xcf, 0x21, 0xba,
	0xcf, 0x28, 0xa7, 0x70, 0xc3, 0xa6, 0xd4, 0x76, 0xb1, 0x7e, 0x8a, 0x23, 0xce, 0x10, 0x09, 0x7c,
	0xc4, 0x30, 0x19, 0x44, 0x7a, 0xd8, 0x69, 0xde, 0x17, 0x26, 0x03, 0xf9, 0x8e, 0x81, 0x08, 0xa1,
	0x1c, 0x71, 0x87, 0x92, 0x40, 0x80, 0x4d, 0x09, 0x1a, 0xc9, 0xa9, 0x3f, 0x1a, 0x1a, 0x88, 0x44,
	0xd2, 0xb4, 0x99, 0x37, 0x61, 0xcf, 0xe7, 0xa9, 0xf1, 0x41, 0xde, 0x68, 0x8d, 0x58, 0x12, 0x58,
	0xda, 0xeb, 0x9c, 0x39, 0xae, 0xeb, 0xa0, 0xf4, 0xdc, 0x1c, 0xb0, 0xc8, 0xe7, 0xd4, 0x38, 0xc5,
	0x51, 0xe0, 0xf7, 0xe5, 0x43, 0xd8, 0xb4, 0x5f, 0x25, 0x50, 0xd9, 0xa7, 0x1e, 0x72, 0x08, 0xdc,
	0x04, 0xcb, 0x56, 0xf2, 0xab, 0xe7, 0x58, 0xaa, 0xd2, 0x52, 0xda, 0xcb, 0xe6, 0x92, 0x78, 0x71,
	0x60, 0xc1, 0x16, 0x28, 0xbb, 0xd4, 0x56, 0x4b, 0x2d, 0xa5, 0x5d, 0xed, 0xd6, 0xf5, 0x71, 0x86,
	0x63, 0x86, 0xb1, 0x19, 0x9b, 0x62, 0x0f, 0x0f, 0xf9, 0x6a, 0x79, 0xb6, 0x87, 0x87, 0x7c, 0xf8,
	0x08, 0x94, 0x43, 0x36, 0x54, 0x6f, 0x25, 0x1e, 0x77, 0x74, 0x59, 0xc7, 0xd1, 0xa8, 0xef, 0x3a,
	0x83, 0x43, 0x1c, 0x99, 0xb1, 0x15, 0xee, 0x82, 0x9a, 0x17, 0x97, 0x40, 0x38, 0x66, 0x21, 0x72,
	0xd5, 0x85, 0xc4, 0x7b, 0x43, 0x97, 0x43, 0x4e, 0x7b, 0xd6, 0xf7, 0x65, 0xcf, 0x66, 0xd5, 0x73,
	0xc8, 0x81, 0xf4, 0x4e, 0x68, 0x74, 0x7e, 0x49, 0x57, 0xae, 0xa6, 0xd1, 0xf9, 0x98, 0x56, 0xc1,
	0xa2, 0x85, 0x5d, 0xcc, 0xb1, 0xa5, 0x2e, 0xb6, 0x94, 0xf6, 0x92, 0x99, 0x1e, 0xb5, 0x17, 0x00,
	0x7e, 0x70, 0x02, 0x2e, 0x26, 0x15, 0x98, 0xf8, 0xf3, 0x08, 0x07, 0x1c, 0x6e, 0x81, 0x5a, 0x70,
	0x42, 0xcf, 0x7a, 0x29, 0xa4, 0x24, 0x50, 0x35, 0x7e, 0xb7, 0x2f, 0x41, 0x13, 0x34, 0x26, 0xc0,
	0xc0, 0xa7, 0x24, 0xc0, 0xf0, 0x25, 0x58, 0x14, 0xa3, 0x0d, 0x54, 0xa5, 0x55, 0x6e, 0x57, 0xbb,
	0x5b, 0xfa, 0x5c, 0x15, 0xe9, 0x02, 0x36, 0x53, 0x42, 0x33, 0xc1, 0xea, 0x3b, 0x2c, 0x43, 0xa6,
	0xa5, 0x14, 0x2e, 0x2f, 0x5f, 0x67, 0x69, 0xba, 0xce, 0xbf, 0x25, 0xd0, 0x78, 0xcd, 0x30, 0xe2,
	0xf8, 0x06, 0x71, 0xf3, 0xbb, 0x2a, 0xfd, 0xd7, 0xae, 0xca, 0x37, 0xda, 0xd5, 0x2e, 0xb8, 0x1d,
	0xb2, 0x61, 0xcf, 0x67, 0x4e, 0x88, 0x38, 0xee, 0x9d, 0xe2, 0x48, 0x0a, 0x6b, 0x6d, 0x2a, 0xc0,
	0x1e, 0x89, 0xcc, 0x95, 0x90, 0x0d, 0x8f, 0x84, 0xef, 0x21, 0x8e, 0x62, 0xda, 0xa5, 0xf6, 0x04,
	0xbd, 0x50, 0x44, 0xbb, 0xd4, 0x9e, 0xa4, 0x3d, 0xe4, 0x4f, 0xd0, 0x95, 0x22, 0xda, 0x43, 0xfe,
	0x25, 0xad, 0x75, 0x41, 0x43, 0x4c, 0xfd, 0xfa, 0x93, 0xd6, 0x9e, 0x83, 0xbb, 0x1f, 0x89, 0x75,
	0x43, 0xaa, 0x7b, 0xb1, 0x00, 0xd6, 0x0e, 0x71, 0x74, 0x9c, 0xd1, 0xd3, 0x5e, 0xfc, 0xc7, 0x05,
	0xbf, 0x2b, 0xa0, 0x9a, 0x91, 0x25, 0x7c, 0x52, 0xa0, 0xbe, 0x69, 0xdd, 0x37, 0xf5, 0xeb, 0xba,
	0x0b, 0xb5, 0x6b, 0x8d, 0x1f, 0xbf, 0xff, 0x5c, 0x94, 0x56, 0x60, 0xd5, 0x08, 0x3b, 0x86, 0x54,
	0x31, 0xfc, 0x0a, 0x96, 0xc7, 0x2a, 0x86, 0x8f, 0x0b, 0x22, 0xe6, 0xb5, 0xde, 0xbc, 0xfa, 0x5b,
	0xd1, 0x1e, 0x26, 0x19, 0x37, 0xe0, 0xbd, 0x4c, 0x46, 0xe3, 0xcb, 0x78, 0x52, 0xdf, 0x60, 0x04,
	0x6a, 0x59, 0xb9, 0xc3, 0xa2, 0x96, 0x66, 0x7c, 0x17, 0xd7, 0xa9, 0x61, 0x3d, 0xa9, 0x61, 0x55,
	0xcb, 0x76, 0xbd, 0xa3, 0x6c, 0xc3, 0x33, 0x50, 0xcb, 0xee, 0xbf, 0x30, 0xf5, 0x0c, 0xa1, 0x34,
	0xd7, 0xa7, 0x44, 0xf6, 0x26, 0xbe, 0x1c, 0xd2, 0x9e, 0xb7, 0xe7, 0xf6, 0xfc, 0x53, 0x01, 0xf5,
	0x49, 0x15, 0xc1, 0xa7, 0x05, 0xb9, 0x67, 0x0a, 0x6e, 0x6e, 0xf6, 0x76, 0x92, 0x5d, 0xdb, 0x6e,
	0xcd, 0xc9, 0xbe, 0x33, 0x92, 0xe1, 0x5e, 0xbd, 0xff, 0xf4, 0xd6, 0x76, 0xf8, 0xc9, 0xa8, 0xaf,
	0x0f, 0xa8, 0x67, 0xc8, 0xbb, 0x2c, 0x97, 0xdf, 0x18, 0x50, 0x26, 0xae, 0xcd, 0xb0, 0x93, 0xb7,
	0xf5, 0x6c, 0xda, 0x13, 0xc9, 0x2b, 0xc9, 0xe3, 0xd9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xeb,
	0xcf, 0x8d, 0xfb, 0x92, 0x07, 0x00, 0x00,
}
