// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/frontend.proto

package keytransparency_go_proto // import "github.com/google/keytransparency/core/api/v1/keytransparency_go_proto"

/*
Key Transparency Frontend

The Key Transparency API consists of a map of user names to public
keys. Each user name also has a history of public keys that have been
associated with it.
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// QueueKeyUpdateRequest enqueues an update to a user's identity keys.
type QueueKeyUpdateRequest struct {
	// directory_id identifies the directory in which the user lives.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_id specifies the id for the user whose keys are being updated.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// key_data is the key data to store.
	KeyData              []byte   `protobuf:"bytes,3,opt,name=key_data,json=keyData,proto3" json:"key_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueueKeyUpdateRequest) Reset()         { *m = QueueKeyUpdateRequest{} }
func (m *QueueKeyUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*QueueKeyUpdateRequest) ProtoMessage()    {}
func (*QueueKeyUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_frontend_2921d535a3a36e74, []int{0}
}
func (m *QueueKeyUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueueKeyUpdateRequest.Unmarshal(m, b)
}
func (m *QueueKeyUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueueKeyUpdateRequest.Marshal(b, m, deterministic)
}
func (dst *QueueKeyUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueKeyUpdateRequest.Merge(dst, src)
}
func (m *QueueKeyUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_QueueKeyUpdateRequest.Size(m)
}
func (m *QueueKeyUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueKeyUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueueKeyUpdateRequest proto.InternalMessageInfo

func (m *QueueKeyUpdateRequest) GetDirectoryId() string {
	if m != nil {
		return m.DirectoryId
	}
	return ""
}

func (m *QueueKeyUpdateRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *QueueKeyUpdateRequest) GetKeyData() []byte {
	if m != nil {
		return m.KeyData
	}
	return nil
}

func init() {
	proto.RegisterType((*QueueKeyUpdateRequest)(nil), "google.keytransparency.v1.QueueKeyUpdateRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyTransparencyFrontendClient is the client API for KeyTransparencyFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyTransparencyFrontendClient interface {
	// Enqueues an update to a user's identity keys.
	QueueKeyUpdate(ctx context.Context, in *QueueKeyUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyTransparencyFrontendClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyFrontendClient(cc *grpc.ClientConn) KeyTransparencyFrontendClient {
	return &keyTransparencyFrontendClient{cc}
}

func (c *keyTransparencyFrontendClient) QueueKeyUpdate(ctx context.Context, in *QueueKeyUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparencyFrontend/QueueKeyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyTransparencyFrontendServer is the server API for KeyTransparencyFrontend service.
type KeyTransparencyFrontendServer interface {
	// Enqueues an update to a user's identity keys.
	QueueKeyUpdate(context.Context, *QueueKeyUpdateRequest) (*empty.Empty, error)
}

func RegisterKeyTransparencyFrontendServer(s *grpc.Server, srv KeyTransparencyFrontendServer) {
	s.RegisterService(&_KeyTransparencyFrontend_serviceDesc, srv)
}

func _KeyTransparencyFrontend_QueueKeyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueKeyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyFrontendServer).QueueKeyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparencyFrontend/QueueKeyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyFrontendServer).QueueKeyUpdate(ctx, req.(*QueueKeyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencyFrontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.v1.KeyTransparencyFrontend",
	HandlerType: (*KeyTransparencyFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueKeyUpdate",
			Handler:    _KeyTransparencyFrontend_QueueKeyUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/frontend.proto",
}

func init() { proto.RegisterFile("v1/frontend.proto", fileDescriptor_frontend_2921d535a3a36e74) }

var fileDescriptor_frontend_2921d535a3a36e74 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd1, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0x06, 0x70, 0x3a, 0x61, 0xd3, 0x38, 0x04, 0x0b, 0xba, 0x3f, 0x7a, 0x98, 0x3b, 0xed, 0x94,
	0x58, 0xbd, 0xed, 0x24, 0xa2, 0xc3, 0xb1, 0x93, 0x43, 0x2f, 0x5e, 0x4a, 0xd6, 0xbc, 0xab, 0x65,
	0x2e, 0xa9, 0xe9, 0x9b, 0x42, 0x18, 0xbb, 0xf8, 0x15, 0xbc, 0xfa, 0x41, 0xfc, 0x1e, 0x7e, 0x05,
	0x3f, 0x88, 0x74, 0x6d, 0xc7, 0x1c, 0x7a, 0x0a, 0x6f, 0x1e, 0x5e, 0x78, 0x7e, 0x09, 0x39, 0x4c,
	0x3d, 0x36, 0xd5, 0x4a, 0x22, 0x48, 0x41, 0x63, 0xad, 0x50, 0xb9, 0xad, 0x50, 0xa9, 0xf0, 0x05,
	0xe8, 0x0c, 0x2c, 0x6a, 0x2e, 0x93, 0x98, 0x6b, 0x90, 0x81, 0xa5, 0xa9, 0xd7, 0x3e, 0xcd, 0x23,
	0xc6, 0xe3, 0x88, 0x71, 0x29, 0x15, 0x72, 0x8c, 0x94, 0x4c, 0xf2, 0xc5, 0xf6, 0x49, 0x91, 0xae,
	0xa6, 0x89, 0x99, 0x32, 0x98, 0xc7, 0x68, 0xf3, 0xb0, 0x2b, 0xc9, 0xd1, 0xbd, 0x01, 0x03, 0x23,
	0xb0, 0x8f, 0xb1, 0xe0, 0x08, 0x63, 0x78, 0x35, 0x90, 0xa0, 0x7b, 0x46, 0xea, 0x22, 0xd2, 0x10,
	0xa0, 0xd2, 0xd6, 0x8f, 0x44, 0xd3, 0xe9, 0x38, 0xbd, 0xbd, 0xf1, 0xfe, 0xfa, 0x6e, 0x28, 0xdc,
	0x06, 0xa9, 0x99, 0x04, 0x74, 0x96, 0x56, 0x56, 0x69, 0x35, 0x1b, 0x87, 0xc2, 0x6d, 0x91, 0xdd,
	0x19, 0x58, 0x5f, 0x70, 0xe4, 0xcd, 0x9d, 0x8e, 0xd3, 0xab, 0x8f, 0x6b, 0x33, 0xb0, 0x37, 0x1c,
	0xf9, 0xc5, 0xa7, 0x43, 0x1a, 0x23, 0xb0, 0x0f, 0x1b, 0x82, 0x41, 0xe1, 0x74, 0x3f, 0x1c, 0x72,
	0xf0, 0xbb, 0x8c, 0x7b, 0x4e, 0xff, 0x55, 0xd3, 0x3f, 0x7b, 0xb7, 0x8f, 0xcb, 0x8d, 0x92, 0x4b,
	0x6f, 0x33, 0x6e, 0xf7, 0xea, 0xed, 0xeb, 0xfb, 0xbd, 0xd2, 0xef, 0x52, 0x96, 0x7a, 0xac, 0x54,
	0x44, 0x90, 0xb0, 0xc5, 0x26, 0x73, 0xc9, 0x32, 0x42, 0xc2, 0x16, 0x05, 0x6c, 0xd9, 0x5f, 0x4b,
	0xae, 0xef, 0x9e, 0x06, 0x61, 0x84, 0xcf, 0x66, 0x42, 0x03, 0x35, 0x67, 0xc5, 0xa3, 0x6e, 0xf5,
	0x62, 0x81, 0xd2, 0xf9, 0x3f, 0xa4, 0xde, 0x76, 0xe6, 0x87, 0xca, 0xcf, 0x4b, 0x55, 0x57, 0xc7,
	0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x6e, 0x42, 0x2e, 0xe6, 0x01, 0x00, 0x00,
}
