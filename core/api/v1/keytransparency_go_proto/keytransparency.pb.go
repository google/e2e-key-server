// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/keytransparency.proto

// Key Transparency
//
// The Key Transparency API consists of a map of user names to public
// keys. Each user name also has a history of public keys that have been
// associated with it.

package keytransparency_go_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	tink_go_proto "github.com/google/tink/proto/tink_go_proto"
	trillian "github.com/google/trillian"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Committed represents the data committed to in a cryptographic commitment.
// commitment = HMAC_SHA512_256(key, data)
type Committed struct {
	// key is the 16 byte random commitment key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// data is the data being committed to.
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Committed) Reset()         { *m = Committed{} }
func (m *Committed) String() string { return proto.CompactTextString(m) }
func (*Committed) ProtoMessage()    {}
func (*Committed) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{0}
}

func (m *Committed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Committed.Unmarshal(m, b)
}
func (m *Committed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Committed.Marshal(b, m, deterministic)
}
func (m *Committed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Committed.Merge(m, src)
}
func (m *Committed) XXX_Size() int {
	return xxx_messageInfo_Committed.Size(m)
}
func (m *Committed) XXX_DiscardUnknown() {
	xxx_messageInfo_Committed.DiscardUnknown(m)
}

var xxx_messageInfo_Committed proto.InternalMessageInfo

func (m *Committed) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Committed) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// EntryUpdate contains the user entry update(s).
// EntryUpdate will be placed in a Log of mutations.
type EntryUpdate struct {
	// mutation authorizes the change to entry.
	Mutation *SignedEntry `protobuf:"bytes,2,opt,name=mutation,proto3" json:"mutation,omitempty"`
	// committed contains the data committed to in mutation.commitment.
	Committed            *Committed `protobuf:"bytes,3,opt,name=committed,proto3" json:"committed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EntryUpdate) Reset()         { *m = EntryUpdate{} }
func (m *EntryUpdate) String() string { return proto.CompactTextString(m) }
func (*EntryUpdate) ProtoMessage()    {}
func (*EntryUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{1}
}

func (m *EntryUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntryUpdate.Unmarshal(m, b)
}
func (m *EntryUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntryUpdate.Marshal(b, m, deterministic)
}
func (m *EntryUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryUpdate.Merge(m, src)
}
func (m *EntryUpdate) XXX_Size() int {
	return xxx_messageInfo_EntryUpdate.Size(m)
}
func (m *EntryUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EntryUpdate proto.InternalMessageInfo

func (m *EntryUpdate) GetMutation() *SignedEntry {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (m *EntryUpdate) GetCommitted() *Committed {
	if m != nil {
		return m.Committed
	}
	return nil
}

// Entry is a signed change to a map entry.
// Entry contains a commitment to profile and a set of authorized update keys.
// Entry is placed in the verifiable map as leaf data.
type Entry struct {
	// index is the location of this leaf in the sparse merkle tree.
	Index []byte `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	// commitment is a cryptographic commitment to arbitrary data.
	Commitment []byte `protobuf:"bytes,6,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// authorized_keys is the set of keys allowed to sign updates for this entry.
	AuthorizedKeys *tink_go_proto.Keyset `protobuf:"bytes,7,opt,name=authorized_keys,json=authorizedKeys,proto3" json:"authorized_keys,omitempty"`
	// previous contains the SHA256 hash of SignedEntry.Entry the last time it was modified.
	Previous             []byte   `protobuf:"bytes,8,opt,name=previous,proto3" json:"previous,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{2}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Entry) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *Entry) GetAuthorizedKeys() *tink_go_proto.Keyset {
	if m != nil {
		return m.AuthorizedKeys
	}
	return nil
}

func (m *Entry) GetPrevious() []byte {
	if m != nil {
		return m.Previous
	}
	return nil
}

// SignedEntry is a cryptographically signed Entry.
// SignedEntry will be storead as a trillian.Map leaf.
type SignedEntry struct {
	// entry contains a serialized Entry.
	Entry []byte `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	// signatures on entry. Must be signed by keys from both previous and
	// current epochs. The first proves ownership of new epoch key, and the
	// second proves that the correct owner is making this change.
	// The signature scheme is specified by the authorized_keys tink.Keyset.
	Signatures           [][]byte `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedEntry) Reset()         { *m = SignedEntry{} }
func (m *SignedEntry) String() string { return proto.CompactTextString(m) }
func (*SignedEntry) ProtoMessage()    {}
func (*SignedEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{3}
}

func (m *SignedEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedEntry.Unmarshal(m, b)
}
func (m *SignedEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedEntry.Marshal(b, m, deterministic)
}
func (m *SignedEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedEntry.Merge(m, src)
}
func (m *SignedEntry) XXX_Size() int {
	return xxx_messageInfo_SignedEntry.Size(m)
}
func (m *SignedEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SignedEntry proto.InternalMessageInfo

func (m *SignedEntry) GetEntry() []byte {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *SignedEntry) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// MutationProof contains the information necessary to compute the new leaf
// value. It contains a) the old leaf value with it's inclusion proof and b) the
// mutation. The new leaf value is computed via:
//       Mutate(leaf_value, mutation)
type MutationProof struct {
	// mutation contains the information needed to modify the old leaf.
	// The format of a mutation is specific to the particular Mutate function
	// being used.
	Mutation *SignedEntry `protobuf:"bytes,1,opt,name=mutation,proto3" json:"mutation,omitempty"`
	// leaf_proof contains the leaf and its inclusion proof for a particular map
	// revision.
	LeafProof            *trillian.MapLeafInclusion `protobuf:"bytes,2,opt,name=leaf_proof,json=leafProof,proto3" json:"leaf_proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MutationProof) Reset()         { *m = MutationProof{} }
func (m *MutationProof) String() string { return proto.CompactTextString(m) }
func (*MutationProof) ProtoMessage()    {}
func (*MutationProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{4}
}

func (m *MutationProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MutationProof.Unmarshal(m, b)
}
func (m *MutationProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MutationProof.Marshal(b, m, deterministic)
}
func (m *MutationProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutationProof.Merge(m, src)
}
func (m *MutationProof) XXX_Size() int {
	return xxx_messageInfo_MutationProof.Size(m)
}
func (m *MutationProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MutationProof.DiscardUnknown(m)
}

var xxx_messageInfo_MutationProof proto.InternalMessageInfo

func (m *MutationProof) GetMutation() *SignedEntry {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (m *MutationProof) GetLeafProof() *trillian.MapLeafInclusion {
	if m != nil {
		return m.LeafProof
	}
	return nil
}

// MapperMetadata tracks the mutations that have been mapped so far. It is
// embedded in the Trillian SignedMapHead.
type MapperMetadata struct {
	HighestFullyCompletedSeq int64    `protobuf:"varint,1,opt,name=highest_fully_completed_seq,json=highestFullyCompletedSeq,proto3" json:"highest_fully_completed_seq,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *MapperMetadata) Reset()         { *m = MapperMetadata{} }
func (m *MapperMetadata) String() string { return proto.CompactTextString(m) }
func (*MapperMetadata) ProtoMessage()    {}
func (*MapperMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{5}
}

func (m *MapperMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapperMetadata.Unmarshal(m, b)
}
func (m *MapperMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapperMetadata.Marshal(b, m, deterministic)
}
func (m *MapperMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapperMetadata.Merge(m, src)
}
func (m *MapperMetadata) XXX_Size() int {
	return xxx_messageInfo_MapperMetadata.Size(m)
}
func (m *MapperMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MapperMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MapperMetadata proto.InternalMessageInfo

func (m *MapperMetadata) GetHighestFullyCompletedSeq() int64 {
	if m != nil {
		return m.HighestFullyCompletedSeq
	}
	return 0
}

// Gets the leaf entry for a user.
type GetUserRequest struct {
	// directory_id identifies the directory in which the user lives.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_id is the user identifier, the format for which is defined by the
	// application.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// last_verified_tree_size is the tree_size of the last log root the client
	// verified. Omitting this field will omit the log consistency proof from the
	// response.
	LastVerifiedTreeSize int64    `protobuf:"varint,3,opt,name=last_verified_tree_size,json=lastVerifiedTreeSize,proto3" json:"last_verified_tree_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserRequest) Reset()         { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()    {}
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{6}
}

func (m *GetUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserRequest.Unmarshal(m, b)
}
func (m *GetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserRequest.Marshal(b, m, deterministic)
}
func (m *GetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserRequest.Merge(m, src)
}
func (m *GetUserRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserRequest.Size(m)
}
func (m *GetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserRequest proto.InternalMessageInfo

func (m *GetUserRequest) GetDirectoryId() string {
	if m != nil {
		return m.DirectoryId
	}
	return ""
}

func (m *GetUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetUserRequest) GetLastVerifiedTreeSize() int64 {
	if m != nil {
		return m.LastVerifiedTreeSize
	}
	return 0
}

// Leaf entry for a user.
type MapLeaf struct {
	// vrf_proof is the proof for the VRF on user_id.
	VrfProof []byte `protobuf:"bytes,1,opt,name=vrf_proof,json=vrfProof,proto3" json:"vrf_proof,omitempty"`
	// map_inclusion is an inclusion proof for the map leaf in an accompanying
	// trillian.SignedMapRoot. If the leaf is non-empty, its leaf.leaf_value
	// stores a serialized Entry proto.
	MapInclusion *trillian.MapLeafInclusion `protobuf:"bytes,2,opt,name=map_inclusion,json=mapInclusion,proto3" json:"map_inclusion,omitempty"`
	// committed contains the data and nonce used to make a cryptographic
	// commitment, which is stored in the commitment field of the serialized Entry
	// proto from map_inclusion.
	// Note: committed can also be found serialized in
	// map_inclusion.leaf.extra_data.
	Committed            *Committed `protobuf:"bytes,3,opt,name=committed,proto3" json:"committed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MapLeaf) Reset()         { *m = MapLeaf{} }
func (m *MapLeaf) String() string { return proto.CompactTextString(m) }
func (*MapLeaf) ProtoMessage()    {}
func (*MapLeaf) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{7}
}

func (m *MapLeaf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapLeaf.Unmarshal(m, b)
}
func (m *MapLeaf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapLeaf.Marshal(b, m, deterministic)
}
func (m *MapLeaf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapLeaf.Merge(m, src)
}
func (m *MapLeaf) XXX_Size() int {
	return xxx_messageInfo_MapLeaf.Size(m)
}
func (m *MapLeaf) XXX_DiscardUnknown() {
	xxx_messageInfo_MapLeaf.DiscardUnknown(m)
}

var xxx_messageInfo_MapLeaf proto.InternalMessageInfo

func (m *MapLeaf) GetVrfProof() []byte {
	if m != nil {
		return m.VrfProof
	}
	return nil
}

func (m *MapLeaf) GetMapInclusion() *trillian.MapLeafInclusion {
	if m != nil {
		return m.MapInclusion
	}
	return nil
}

func (m *MapLeaf) GetCommitted() *Committed {
	if m != nil {
		return m.Committed
	}
	return nil
}

// Contains the leaf entry for a user at the most recently published epoch.
type GetUserResponse struct {
	// epoch is the most recently published epoch.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// leaf is the leaf entry for the requested user.
	Leaf                 *MapLeaf `protobuf:"bytes,2,opt,name=leaf,proto3" json:"leaf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserResponse) Reset()         { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()    {}
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{8}
}

func (m *GetUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserResponse.Unmarshal(m, b)
}
func (m *GetUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserResponse.Marshal(b, m, deterministic)
}
func (m *GetUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserResponse.Merge(m, src)
}
func (m *GetUserResponse) XXX_Size() int {
	return xxx_messageInfo_GetUserResponse.Size(m)
}
func (m *GetUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserResponse proto.InternalMessageInfo

func (m *GetUserResponse) GetEpoch() *Epoch {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *GetUserResponse) GetLeaf() *MapLeaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

// BatchGetUserRequest contains multiple user_ids to fetch.
type BatchGetUserRequest struct {
	// directory_id identifies the directory in which the users live.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_ids are the user identifiers, the format for which is defined by the
	// application.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// last_verified_tree_size is the tree_size of the last log root the client
	// verified. Omitting this field will omit the log consistency proof from the
	// response.
	LastVerifiedTreeSize int64    `protobuf:"varint,3,opt,name=last_verified_tree_size,json=lastVerifiedTreeSize,proto3" json:"last_verified_tree_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetUserRequest) Reset()         { *m = BatchGetUserRequest{} }
func (m *BatchGetUserRequest) String() string { return proto.CompactTextString(m) }
func (*BatchGetUserRequest) ProtoMessage()    {}
func (*BatchGetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{9}
}

func (m *BatchGetUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchGetUserRequest.Unmarshal(m, b)
}
func (m *BatchGetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchGetUserRequest.Marshal(b, m, deterministic)
}
func (m *BatchGetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetUserRequest.Merge(m, src)
}
func (m *BatchGetUserRequest) XXX_Size() int {
	return xxx_messageInfo_BatchGetUserRequest.Size(m)
}
func (m *BatchGetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetUserRequest proto.InternalMessageInfo

func (m *BatchGetUserRequest) GetDirectoryId() string {
	if m != nil {
		return m.DirectoryId
	}
	return ""
}

func (m *BatchGetUserRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *BatchGetUserRequest) GetLastVerifiedTreeSize() int64 {
	if m != nil {
		return m.LastVerifiedTreeSize
	}
	return 0
}

// BatchGetUserReponse contains the leaf entries for a set of users at the most
// recently published epoch.
type BatchGetUserResponse struct {
	// epoch is the most recently published epoch.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// leaves are the leaf entries for the requested users, in the order requested.
	Leaves               []*MapLeaf `protobuf:"bytes,2,rep,name=leaves,proto3" json:"leaves,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BatchGetUserResponse) Reset()         { *m = BatchGetUserResponse{} }
func (m *BatchGetUserResponse) String() string { return proto.CompactTextString(m) }
func (*BatchGetUserResponse) ProtoMessage()    {}
func (*BatchGetUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{10}
}

func (m *BatchGetUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchGetUserResponse.Unmarshal(m, b)
}
func (m *BatchGetUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchGetUserResponse.Marshal(b, m, deterministic)
}
func (m *BatchGetUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetUserResponse.Merge(m, src)
}
func (m *BatchGetUserResponse) XXX_Size() int {
	return xxx_messageInfo_BatchGetUserResponse.Size(m)
}
func (m *BatchGetUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetUserResponse proto.InternalMessageInfo

func (m *BatchGetUserResponse) GetEpoch() *Epoch {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *BatchGetUserResponse) GetLeaves() []*MapLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

// ListEntryHistoryRequest gets a list of historical keys for a user.
type ListEntryHistoryRequest struct {
	// directory_id identifies the directory in which the user lives.
	DirectoryId string `protobuf:"bytes,6,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_id is the user identifier.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// start is the starting epoch.
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// page_size is the maximum number of entries to return.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// last_verified_tree_size is the tree_size of the last log root the client
	// verified. Omitting this field will omit the log consistency proof from the
	// response.
	LastVerifiedTreeSize int64    `protobuf:"varint,5,opt,name=last_verified_tree_size,json=lastVerifiedTreeSize,proto3" json:"last_verified_tree_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEntryHistoryRequest) Reset()         { *m = ListEntryHistoryRequest{} }
func (m *ListEntryHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*ListEntryHistoryRequest) ProtoMessage()    {}
func (*ListEntryHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{11}
}

func (m *ListEntryHistoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEntryHistoryRequest.Unmarshal(m, b)
}
func (m *ListEntryHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEntryHistoryRequest.Marshal(b, m, deterministic)
}
func (m *ListEntryHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEntryHistoryRequest.Merge(m, src)
}
func (m *ListEntryHistoryRequest) XXX_Size() int {
	return xxx_messageInfo_ListEntryHistoryRequest.Size(m)
}
func (m *ListEntryHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEntryHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEntryHistoryRequest proto.InternalMessageInfo

func (m *ListEntryHistoryRequest) GetDirectoryId() string {
	if m != nil {
		return m.DirectoryId
	}
	return ""
}

func (m *ListEntryHistoryRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListEntryHistoryRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ListEntryHistoryRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListEntryHistoryRequest) GetLastVerifiedTreeSize() int64 {
	if m != nil {
		return m.LastVerifiedTreeSize
	}
	return 0
}

// ListEntryHistoryResponse requests a paginated history of keys for a user.
type ListEntryHistoryResponse struct {
	// values represents the list of keys this user_id has contained over time.
	Values []*GetUserResponse `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// next_start is the next page token to query for pagination.
	// next_start is 0 when there are no more results to fetch.
	NextStart            int64    `protobuf:"varint,2,opt,name=next_start,json=nextStart,proto3" json:"next_start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEntryHistoryResponse) Reset()         { *m = ListEntryHistoryResponse{} }
func (m *ListEntryHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*ListEntryHistoryResponse) ProtoMessage()    {}
func (*ListEntryHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{12}
}

func (m *ListEntryHistoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEntryHistoryResponse.Unmarshal(m, b)
}
func (m *ListEntryHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEntryHistoryResponse.Marshal(b, m, deterministic)
}
func (m *ListEntryHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEntryHistoryResponse.Merge(m, src)
}
func (m *ListEntryHistoryResponse) XXX_Size() int {
	return xxx_messageInfo_ListEntryHistoryResponse.Size(m)
}
func (m *ListEntryHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEntryHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEntryHistoryResponse proto.InternalMessageInfo

func (m *ListEntryHistoryResponse) GetValues() []*GetUserResponse {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListEntryHistoryResponse) GetNextStart() int64 {
	if m != nil {
		return m.NextStart
	}
	return 0
}

// UpdateEntryRequest updates a user's profile.
type UpdateEntryRequest struct {
	// directory_id identifies the directory in which the user lives.
	DirectoryId string `protobuf:"bytes,5,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_id specifies the id for the user whose profile is being updated.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// entry_update contains the user submitted update.
	EntryUpdate          *EntryUpdate `protobuf:"bytes,4,opt,name=entry_update,json=entryUpdate,proto3" json:"entry_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateEntryRequest) Reset()         { *m = UpdateEntryRequest{} }
func (m *UpdateEntryRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEntryRequest) ProtoMessage()    {}
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{13}
}

func (m *UpdateEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEntryRequest.Unmarshal(m, b)
}
func (m *UpdateEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEntryRequest.Marshal(b, m, deterministic)
}
func (m *UpdateEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEntryRequest.Merge(m, src)
}
func (m *UpdateEntryRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateEntryRequest.Size(m)
}
func (m *UpdateEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEntryRequest proto.InternalMessageInfo

func (m *UpdateEntryRequest) GetDirectoryId() string {
	if m != nil {
		return m.DirectoryId
	}
	return ""
}

func (m *UpdateEntryRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateEntryRequest) GetEntryUpdate() *EntryUpdate {
	if m != nil {
		return m.EntryUpdate
	}
	return nil
}

// GetEpochRequest identifies a particular epoch.
type GetEpochRequest struct {
	// directory_id is the directory for which epochs are being requested.
	DirectoryId string `protobuf:"bytes,5,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// epoch specifies the epoch number in which mutations will be returned.
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// last_verified_tree_size is the tree_size of the last log root the client
	// verified. Omitting this field will omit the log consistency proof from the
	// response.
	LastVerifiedTreeSize int64    `protobuf:"varint,2,opt,name=last_verified_tree_size,json=lastVerifiedTreeSize,proto3" json:"last_verified_tree_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEpochRequest) Reset()         { *m = GetEpochRequest{} }
func (m *GetEpochRequest) String() string { return proto.CompactTextString(m) }
func (*GetEpochRequest) ProtoMessage()    {}
func (*GetEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{14}
}

func (m *GetEpochRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEpochRequest.Unmarshal(m, b)
}
func (m *GetEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEpochRequest.Marshal(b, m, deterministic)
}
func (m *GetEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEpochRequest.Merge(m, src)
}
func (m *GetEpochRequest) XXX_Size() int {
	return xxx_messageInfo_GetEpochRequest.Size(m)
}
func (m *GetEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEpochRequest proto.InternalMessageInfo

func (m *GetEpochRequest) GetDirectoryId() string {
	if m != nil {
		return m.DirectoryId
	}
	return ""
}

func (m *GetEpochRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *GetEpochRequest) GetLastVerifiedTreeSize() int64 {
	if m != nil {
		return m.LastVerifiedTreeSize
	}
	return 0
}

// GetLatestEpochRequest identifies a particular epoch.
type GetLatestEpochRequest struct {
	// directory_id is the directory for which epochs are being requested.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// last_verified_tree_size is the tree_size of the last log root the client
	// verified. Omitting this field will omit the log consistency proof from the
	// response.
	LastVerifiedTreeSize int64    `protobuf:"varint,2,opt,name=last_verified_tree_size,json=lastVerifiedTreeSize,proto3" json:"last_verified_tree_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLatestEpochRequest) Reset()         { *m = GetLatestEpochRequest{} }
func (m *GetLatestEpochRequest) String() string { return proto.CompactTextString(m) }
func (*GetLatestEpochRequest) ProtoMessage()    {}
func (*GetLatestEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{15}
}

func (m *GetLatestEpochRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLatestEpochRequest.Unmarshal(m, b)
}
func (m *GetLatestEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLatestEpochRequest.Marshal(b, m, deterministic)
}
func (m *GetLatestEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestEpochRequest.Merge(m, src)
}
func (m *GetLatestEpochRequest) XXX_Size() int {
	return xxx_messageInfo_GetLatestEpochRequest.Size(m)
}
func (m *GetLatestEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestEpochRequest proto.InternalMessageInfo

func (m *GetLatestEpochRequest) GetDirectoryId() string {
	if m != nil {
		return m.DirectoryId
	}
	return ""
}

func (m *GetLatestEpochRequest) GetLastVerifiedTreeSize() int64 {
	if m != nil {
		return m.LastVerifiedTreeSize
	}
	return 0
}

// MapRoot contains the map root and its inclusion proof in the log.
type MapRoot struct {
	// map_root contains the signed map root for the sparse Merkle Tree.
	MapRoot *trillian.SignedMapRoot `protobuf:"bytes,1,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	// log_inclusion proves that map_root is part of log_root at
	// index=map_root.MapRevision.
	LogInclusion         [][]byte `protobuf:"bytes,2,rep,name=log_inclusion,json=logInclusion,proto3" json:"log_inclusion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapRoot) Reset()         { *m = MapRoot{} }
func (m *MapRoot) String() string { return proto.CompactTextString(m) }
func (*MapRoot) ProtoMessage()    {}
func (*MapRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{16}
}

func (m *MapRoot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapRoot.Unmarshal(m, b)
}
func (m *MapRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapRoot.Marshal(b, m, deterministic)
}
func (m *MapRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapRoot.Merge(m, src)
}
func (m *MapRoot) XXX_Size() int {
	return xxx_messageInfo_MapRoot.Size(m)
}
func (m *MapRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_MapRoot.DiscardUnknown(m)
}

var xxx_messageInfo_MapRoot proto.InternalMessageInfo

func (m *MapRoot) GetMapRoot() *trillian.SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

func (m *MapRoot) GetLogInclusion() [][]byte {
	if m != nil {
		return m.LogInclusion
	}
	return nil
}

// LogRoot contains the latest log root and its consistency proof.
type LogRoot struct {
	// log_root is the latest globally consistent log root.
	LogRoot *trillian.SignedLogRoot `protobuf:"bytes,1,opt,name=log_root,json=logRoot,proto3" json:"log_root,omitempty"`
	// log_consistency proves that log_root is consistent with previously seen
	// roots.
	LogConsistency       [][]byte `protobuf:"bytes,2,rep,name=log_consistency,json=logConsistency,proto3" json:"log_consistency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRoot) Reset()         { *m = LogRoot{} }
func (m *LogRoot) String() string { return proto.CompactTextString(m) }
func (*LogRoot) ProtoMessage()    {}
func (*LogRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{17}
}

func (m *LogRoot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRoot.Unmarshal(m, b)
}
func (m *LogRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRoot.Marshal(b, m, deterministic)
}
func (m *LogRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRoot.Merge(m, src)
}
func (m *LogRoot) XXX_Size() int {
	return xxx_messageInfo_LogRoot.Size(m)
}
func (m *LogRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRoot.DiscardUnknown(m)
}

var xxx_messageInfo_LogRoot proto.InternalMessageInfo

func (m *LogRoot) GetLogRoot() *trillian.SignedLogRoot {
	if m != nil {
		return m.LogRoot
	}
	return nil
}

func (m *LogRoot) GetLogConsistency() [][]byte {
	if m != nil {
		return m.LogConsistency
	}
	return nil
}

// Epoch represents a snapshot of the entire key directory and
// a diff of what changed between this revision and the previous revision.
type Epoch struct {
	// directory_id is the directory identifier.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// map_root contains the map root and its inclusion in the log.
	MapRoot *MapRoot `protobuf:"bytes,5,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	// latest_log_root contains the most recent log root and its consistency
	// proof to the client's last seen log root.
	LatestLogRoot        *LogRoot `protobuf:"bytes,6,opt,name=latest_log_root,json=latestLogRoot,proto3" json:"latest_log_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{18}
}

func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Epoch.Unmarshal(m, b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return xxx_messageInfo_Epoch.Size(m)
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetDirectoryId() string {
	if m != nil {
		return m.DirectoryId
	}
	return ""
}

func (m *Epoch) GetMapRoot() *MapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

func (m *Epoch) GetLatestLogRoot() *LogRoot {
	if m != nil {
		return m.LatestLogRoot
	}
	return nil
}

// ListMutationsRequest requests the mutations that created a given epoch.
type ListMutationsRequest struct {
	// directory_id is the directory identifier.
	DirectoryId string `protobuf:"bytes,5,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// epoch specifies the epoch number.
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// page_token defines the starting point for pagination.
	// To request the next page, pass next_page_token from the previous response.
	// To start at the beginning, simply omit page_token from the request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// page_size is the maximum number of mutations to return in a single request.
	// The server may choose a smaller page_size than the one requested.
	PageSize             int32    `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMutationsRequest) Reset()         { *m = ListMutationsRequest{} }
func (m *ListMutationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListMutationsRequest) ProtoMessage()    {}
func (*ListMutationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{19}
}

func (m *ListMutationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMutationsRequest.Unmarshal(m, b)
}
func (m *ListMutationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMutationsRequest.Marshal(b, m, deterministic)
}
func (m *ListMutationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMutationsRequest.Merge(m, src)
}
func (m *ListMutationsRequest) XXX_Size() int {
	return xxx_messageInfo_ListMutationsRequest.Size(m)
}
func (m *ListMutationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMutationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMutationsRequest proto.InternalMessageInfo

func (m *ListMutationsRequest) GetDirectoryId() string {
	if m != nil {
		return m.DirectoryId
	}
	return ""
}

func (m *ListMutationsRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ListMutationsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListMutationsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// ListMutationsResponse contains the mutations that produced an epoch.
type ListMutationsResponse struct {
	// mutations contains the mutation object and the leaf value it operated on.
	Mutations []*MutationProof `protobuf:"bytes,6,rep,name=mutations,proto3" json:"mutations,omitempty"`
	// next_page_token is the next page token to query for pagination.
	// An empty value means there are no more results to fetch.
	NextPageToken        string   `protobuf:"bytes,7,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMutationsResponse) Reset()         { *m = ListMutationsResponse{} }
func (m *ListMutationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListMutationsResponse) ProtoMessage()    {}
func (*ListMutationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{20}
}

func (m *ListMutationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMutationsResponse.Unmarshal(m, b)
}
func (m *ListMutationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMutationsResponse.Marshal(b, m, deterministic)
}
func (m *ListMutationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMutationsResponse.Merge(m, src)
}
func (m *ListMutationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListMutationsResponse.Size(m)
}
func (m *ListMutationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMutationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMutationsResponse proto.InternalMessageInfo

func (m *ListMutationsResponse) GetMutations() []*MutationProof {
	if m != nil {
		return m.Mutations
	}
	return nil
}

func (m *ListMutationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Committed)(nil), "google.keytransparency.v1.Committed")
	proto.RegisterType((*EntryUpdate)(nil), "google.keytransparency.v1.EntryUpdate")
	proto.RegisterType((*Entry)(nil), "google.keytransparency.v1.Entry")
	proto.RegisterType((*SignedEntry)(nil), "google.keytransparency.v1.SignedEntry")
	proto.RegisterType((*MutationProof)(nil), "google.keytransparency.v1.MutationProof")
	proto.RegisterType((*MapperMetadata)(nil), "google.keytransparency.v1.MapperMetadata")
	proto.RegisterType((*GetUserRequest)(nil), "google.keytransparency.v1.GetUserRequest")
	proto.RegisterType((*MapLeaf)(nil), "google.keytransparency.v1.MapLeaf")
	proto.RegisterType((*GetUserResponse)(nil), "google.keytransparency.v1.GetUserResponse")
	proto.RegisterType((*BatchGetUserRequest)(nil), "google.keytransparency.v1.BatchGetUserRequest")
	proto.RegisterType((*BatchGetUserResponse)(nil), "google.keytransparency.v1.BatchGetUserResponse")
	proto.RegisterType((*ListEntryHistoryRequest)(nil), "google.keytransparency.v1.ListEntryHistoryRequest")
	proto.RegisterType((*ListEntryHistoryResponse)(nil), "google.keytransparency.v1.ListEntryHistoryResponse")
	proto.RegisterType((*UpdateEntryRequest)(nil), "google.keytransparency.v1.UpdateEntryRequest")
	proto.RegisterType((*GetEpochRequest)(nil), "google.keytransparency.v1.GetEpochRequest")
	proto.RegisterType((*GetLatestEpochRequest)(nil), "google.keytransparency.v1.GetLatestEpochRequest")
	proto.RegisterType((*MapRoot)(nil), "google.keytransparency.v1.MapRoot")
	proto.RegisterType((*LogRoot)(nil), "google.keytransparency.v1.LogRoot")
	proto.RegisterType((*Epoch)(nil), "google.keytransparency.v1.Epoch")
	proto.RegisterType((*ListMutationsRequest)(nil), "google.keytransparency.v1.ListMutationsRequest")
	proto.RegisterType((*ListMutationsResponse)(nil), "google.keytransparency.v1.ListMutationsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyTransparencyClient is the client API for KeyTransparency service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyTransparencyClient interface {
	// GetDirectory returns the information needed to verify the specified
	// directory.
	GetDirectory(ctx context.Context, in *GetDirectoryRequest, opts ...grpc.CallOption) (*Directory, error)
	// GetEpoch returns a SignedMapRoot by the by the requested revision number
	// along with its inclusion proof in the log and the log's consistency proofs.
	GetEpoch(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (*Epoch, error)
	// GetLatestEpoch returns the latest SignedMapRoot along with its inclusion
	// proof in the log and the log's consistency proofs.
	GetLatestEpoch(ctx context.Context, in *GetLatestEpochRequest, opts ...grpc.CallOption) (*Epoch, error)
	// GetEpochStream streams new epochs from a requested starting point
	// and continues as new epochs are created.
	GetEpochStream(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (KeyTransparency_GetEpochStreamClient, error)
	// ListMutations returns a list of mutations in a specific epoch.
	ListMutations(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (*ListMutationsResponse, error)
	// ListMutationsStream is a streaming list of mutations in a specific epoch.
	ListMutationsStream(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (KeyTransparency_ListMutationsStreamClient, error)
	// GetUser returns a user's leaf entry in the Merkle Tree.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// BatchGetUser returns a batch of user leaf entries in the Merkle tree at the same epoch.
	BatchGetUser(ctx context.Context, in *BatchGetUserRequest, opts ...grpc.CallOption) (*BatchGetUserResponse, error)
	// ListEntryHistory returns a list of historic GetUser values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(ctx context.Context, in *ListEntryHistoryRequest, opts ...grpc.CallOption) (*ListEntryHistoryResponse, error)
	// QueueUserUpdate enqueues an update to a user's profile.
	//
	// Clients should poll GetUser until the update appears, and retry if no
	// update appears after a timeout.
	QueueEntryUpdate(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyTransparencyClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyClient(cc *grpc.ClientConn) KeyTransparencyClient {
	return &keyTransparencyClient{cc}
}

func (c *keyTransparencyClient) GetDirectory(ctx context.Context, in *GetDirectoryRequest, opts ...grpc.CallOption) (*Directory, error) {
	out := new(Directory)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetEpoch(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (*Epoch, error) {
	out := new(Epoch)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetLatestEpoch(ctx context.Context, in *GetLatestEpochRequest, opts ...grpc.CallOption) (*Epoch, error) {
	out := new(Epoch)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetLatestEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetEpochStream(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (KeyTransparency_GetEpochStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KeyTransparency_serviceDesc.Streams[0], "/google.keytransparency.v1.KeyTransparency/GetEpochStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyTransparencyGetEpochStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyTransparency_GetEpochStreamClient interface {
	Recv() (*Epoch, error)
	grpc.ClientStream
}

type keyTransparencyGetEpochStreamClient struct {
	grpc.ClientStream
}

func (x *keyTransparencyGetEpochStreamClient) Recv() (*Epoch, error) {
	m := new(Epoch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyTransparencyClient) ListMutations(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (*ListMutationsResponse, error) {
	out := new(ListMutationsResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/ListMutations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) ListMutationsStream(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (KeyTransparency_ListMutationsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KeyTransparency_serviceDesc.Streams[1], "/google.keytransparency.v1.KeyTransparency/ListMutationsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyTransparencyListMutationsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyTransparency_ListMutationsStreamClient interface {
	Recv() (*MutationProof, error)
	grpc.ClientStream
}

type keyTransparencyListMutationsStreamClient struct {
	grpc.ClientStream
}

func (x *keyTransparencyListMutationsStreamClient) Recv() (*MutationProof, error) {
	m := new(MutationProof)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyTransparencyClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) BatchGetUser(ctx context.Context, in *BatchGetUserRequest, opts ...grpc.CallOption) (*BatchGetUserResponse, error) {
	out := new(BatchGetUserResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/BatchGetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) ListEntryHistory(ctx context.Context, in *ListEntryHistoryRequest, opts ...grpc.CallOption) (*ListEntryHistoryResponse, error) {
	out := new(ListEntryHistoryResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/ListEntryHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) QueueEntryUpdate(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/QueueEntryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyTransparencyServer is the server API for KeyTransparency service.
type KeyTransparencyServer interface {
	// GetDirectory returns the information needed to verify the specified
	// directory.
	GetDirectory(context.Context, *GetDirectoryRequest) (*Directory, error)
	// GetEpoch returns a SignedMapRoot by the by the requested revision number
	// along with its inclusion proof in the log and the log's consistency proofs.
	GetEpoch(context.Context, *GetEpochRequest) (*Epoch, error)
	// GetLatestEpoch returns the latest SignedMapRoot along with its inclusion
	// proof in the log and the log's consistency proofs.
	GetLatestEpoch(context.Context, *GetLatestEpochRequest) (*Epoch, error)
	// GetEpochStream streams new epochs from a requested starting point
	// and continues as new epochs are created.
	GetEpochStream(*GetEpochRequest, KeyTransparency_GetEpochStreamServer) error
	// ListMutations returns a list of mutations in a specific epoch.
	ListMutations(context.Context, *ListMutationsRequest) (*ListMutationsResponse, error)
	// ListMutationsStream is a streaming list of mutations in a specific epoch.
	ListMutationsStream(*ListMutationsRequest, KeyTransparency_ListMutationsStreamServer) error
	// GetUser returns a user's leaf entry in the Merkle Tree.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// BatchGetUser returns a batch of user leaf entries in the Merkle tree at the same epoch.
	BatchGetUser(context.Context, *BatchGetUserRequest) (*BatchGetUserResponse, error)
	// ListEntryHistory returns a list of historic GetUser values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(context.Context, *ListEntryHistoryRequest) (*ListEntryHistoryResponse, error)
	// QueueUserUpdate enqueues an update to a user's profile.
	//
	// Clients should poll GetUser until the update appears, and retry if no
	// update appears after a timeout.
	QueueEntryUpdate(context.Context, *UpdateEntryRequest) (*empty.Empty, error)
}

func RegisterKeyTransparencyServer(s *grpc.Server, srv KeyTransparencyServer) {
	s.RegisterService(&_KeyTransparency_serviceDesc, srv)
}

func _KeyTransparency_GetDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetDirectory(ctx, req.(*GetDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetEpoch(ctx, req.(*GetEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetLatestEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetLatestEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetLatestEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetLatestEpoch(ctx, req.(*GetLatestEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetEpochStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEpochRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyTransparencyServer).GetEpochStream(m, &keyTransparencyGetEpochStreamServer{stream})
}

type KeyTransparency_GetEpochStreamServer interface {
	Send(*Epoch) error
	grpc.ServerStream
}

type keyTransparencyGetEpochStreamServer struct {
	grpc.ServerStream
}

func (x *keyTransparencyGetEpochStreamServer) Send(m *Epoch) error {
	return x.ServerStream.SendMsg(m)
}

func _KeyTransparency_ListMutations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMutationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).ListMutations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/ListMutations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).ListMutations(ctx, req.(*ListMutationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_ListMutationsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMutationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyTransparencyServer).ListMutationsStream(m, &keyTransparencyListMutationsStreamServer{stream})
}

type KeyTransparency_ListMutationsStreamServer interface {
	Send(*MutationProof) error
	grpc.ServerStream
}

type keyTransparencyListMutationsStreamServer struct {
	grpc.ServerStream
}

func (x *keyTransparencyListMutationsStreamServer) Send(m *MutationProof) error {
	return x.ServerStream.SendMsg(m)
}

func _KeyTransparency_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_BatchGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).BatchGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/BatchGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).BatchGetUser(ctx, req.(*BatchGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_ListEntryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).ListEntryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/ListEntryHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).ListEntryHistory(ctx, req.(*ListEntryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_QueueEntryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).QueueEntryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/QueueEntryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).QueueEntryUpdate(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparency_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.v1.KeyTransparency",
	HandlerType: (*KeyTransparencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDirectory",
			Handler:    _KeyTransparency_GetDirectory_Handler,
		},
		{
			MethodName: "GetEpoch",
			Handler:    _KeyTransparency_GetEpoch_Handler,
		},
		{
			MethodName: "GetLatestEpoch",
			Handler:    _KeyTransparency_GetLatestEpoch_Handler,
		},
		{
			MethodName: "ListMutations",
			Handler:    _KeyTransparency_ListMutations_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _KeyTransparency_GetUser_Handler,
		},
		{
			MethodName: "BatchGetUser",
			Handler:    _KeyTransparency_BatchGetUser_Handler,
		},
		{
			MethodName: "ListEntryHistory",
			Handler:    _KeyTransparency_ListEntryHistory_Handler,
		},
		{
			MethodName: "QueueEntryUpdate",
			Handler:    _KeyTransparency_QueueEntryUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEpochStream",
			Handler:       _KeyTransparency_GetEpochStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListMutationsStream",
			Handler:       _KeyTransparency_ListMutationsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/keytransparency.proto",
}

func init() { proto.RegisterFile("v1/keytransparency.proto", fileDescriptor_9e925e13aa3e8f7d) }

var fileDescriptor_9e925e13aa3e8f7d = []byte{
	// 1470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xd7, 0xc6, 0xff, 0x5f, 0xec, 0xc4, 0x9a, 0xa6, 0x8d, 0xeb, 0xd2, 0x2a, 0x2c, 0xa8, 0x14,
	0x44, 0xbd, 0x49, 0xda, 0x06, 0x1a, 0xa9, 0x2d, 0x4a, 0xda, 0xb4, 0x49, 0x13, 0x51, 0x36, 0x2d,
	0x07, 0x2e, 0xab, 0x89, 0x3d, 0xb6, 0x57, 0x59, 0xef, 0x6c, 0x76, 0x66, 0xad, 0xba, 0x55, 0x0e,
	0x80, 0x10, 0x52, 0x41, 0x70, 0x40, 0x20, 0xc4, 0x1d, 0x38, 0x70, 0x44, 0xe2, 0x00, 0x67, 0xc4,
	0x07, 0xe0, 0x2b, 0xf0, 0x41, 0xd0, 0xcc, 0xce, 0xda, 0xeb, 0xfc, 0xd9, 0xd8, 0x69, 0x4f, 0xf6,
	0xcc, 0xbc, 0xf7, 0xf6, 0x37, 0xbf, 0xf7, 0xde, 0x6f, 0x9f, 0x16, 0x2a, 0xdd, 0x05, 0x63, 0x97,
	0xf4, 0xb8, 0x8f, 0x5d, 0xe6, 0x61, 0x9f, 0xb8, 0xf5, 0x5e, 0xcd, 0xf3, 0x29, 0xa7, 0xe8, 0x7c,
	0x8b, 0xd2, 0x96, 0x43, 0x6a, 0x07, 0x4f, 0xbb, 0x0b, 0xd5, 0xd7, 0xc2, 0x23, 0x03, 0x7b, 0xb6,
	0x81, 0x5d, 0x97, 0x72, 0xcc, 0x6d, 0xea, 0xb2, 0xd0, 0xb1, 0x7a, 0x41, 0x9d, 0xca, 0xd5, 0x4e,
	0xd0, 0x34, 0x48, 0xc7, 0xe3, 0x2a, 0x6a, 0x75, 0x8a, 0xfb, 0xb6, 0xe3, 0xd8, 0xd8, 0x55, 0xeb,
	0x73, 0xd1, 0xda, 0xea, 0x60, 0xcf, 0xc2, 0x9e, 0xad, 0xf6, 0x81, 0xdb, 0xee, 0x6e, 0xe4, 0xd3,
	0x5d, 0x30, 0x70, 0xa3, 0x63, 0x2b, 0x1f, 0x7d, 0x01, 0x0a, 0xab, 0xb4, 0xd3, 0xb1, 0x39, 0x27,
	0x0d, 0x54, 0x86, 0xd4, 0x2e, 0xe9, 0x55, 0xb4, 0x39, 0xed, 0x4a, 0xd1, 0x14, 0x7f, 0x11, 0x82,
	0x74, 0x03, 0x73, 0x5c, 0x99, 0x90, 0x5b, 0xf2, 0xbf, 0xfe, 0xbd, 0x06, 0x93, 0xf7, 0x5c, 0xee,
	0xf7, 0x9e, 0x78, 0x0d, 0xcc, 0x09, 0x5a, 0x81, 0x7c, 0x27, 0x08, 0x61, 0x4b, 0xbb, 0xc9, 0xc5,
	0xcb, 0xb5, 0x63, 0xef, 0x5b, 0xdb, 0xb6, 0x5b, 0x2e, 0x69, 0x48, 0x7f, 0xb3, 0xef, 0x87, 0x56,
	0xa0, 0x50, 0x8f, 0x60, 0x54, 0x52, 0x32, 0xc8, 0x9b, 0x09, 0x41, 0xfa, 0x90, 0xcd, 0x81, 0x9b,
	0xfe, 0x87, 0x06, 0x19, 0x19, 0x17, 0xcd, 0x40, 0xc6, 0x76, 0x1b, 0xe4, 0xa9, 0x8c, 0x54, 0x34,
	0xc3, 0x05, 0xba, 0x04, 0x10, 0x1a, 0x77, 0x88, 0xcb, 0x2b, 0x59, 0x79, 0x14, 0xdb, 0x41, 0xab,
	0x30, 0x8d, 0x03, 0xde, 0xa6, 0xbe, 0xfd, 0x8c, 0x34, 0xac, 0x5d, 0xd2, 0x63, 0x95, 0x9c, 0x44,
	0x52, 0x8d, 0x90, 0xd4, 0xfd, 0x9e, 0xc7, 0x69, 0x4d, 0xd2, 0xf9, 0x90, 0xf4, 0x18, 0xe1, 0xe6,
	0xd4, 0xc0, 0x45, 0xec, 0xa0, 0x2a, 0xe4, 0x3d, 0x9f, 0x74, 0x6d, 0x1a, 0xb0, 0x4a, 0x5e, 0x3e,
	0xa2, 0xbf, 0xde, 0x48, 0xe7, 0xb5, 0xf2, 0xc4, 0x46, 0x3a, 0x3f, 0x51, 0x4e, 0x6d, 0xa4, 0xf3,
	0xe9, 0x72, 0x66, 0x23, 0x9d, 0xcf, 0x94, 0xb3, 0xfa, 0x2a, 0x4c, 0xc6, 0x58, 0x11, 0xe8, 0x89,
	0xf8, 0xa3, 0xf2, 0x10, 0x2e, 0x04, 0x7a, 0x66, 0xb7, 0x5c, 0xcc, 0x03, 0x9f, 0xb0, 0xca, 0xc4,
	0x5c, 0x4a, 0xa0, 0x1f, 0xec, 0xe8, 0xdf, 0x68, 0x50, 0xda, 0x52, 0x74, 0x3e, 0xf2, 0x29, 0x6d,
	0x0e, 0xe5, 0x45, 0x3b, 0x65, 0x5e, 0x6e, 0x02, 0x38, 0x04, 0x37, 0x2d, 0x4f, 0x44, 0x54, 0xd9,
	0xad, 0xd6, 0xfa, 0x75, 0xb7, 0x85, 0xbd, 0x4d, 0x82, 0x9b, 0xeb, 0x6e, 0xdd, 0x09, 0x98, 0x4d,
	0x5d, 0xb3, 0x20, 0xac, 0xe5, 0xe3, 0xf5, 0x0f, 0x61, 0x6a, 0x0b, 0x7b, 0x1e, 0xf1, 0xb7, 0x08,
	0xc7, 0xa2, 0x70, 0xd0, 0x2d, 0xb8, 0xd0, 0xb6, 0x5b, 0x6d, 0xc2, 0xb8, 0xd5, 0x0c, 0x1c, 0xa7,
	0x67, 0xd5, 0x69, 0xc7, 0x73, 0x08, 0x27, 0x0d, 0x8b, 0x91, 0x3d, 0x89, 0x31, 0x65, 0x56, 0x94,
	0xc9, 0x9a, 0xb0, 0x58, 0x8d, 0x0c, 0xb6, 0xc9, 0x9e, 0xfe, 0xb9, 0x06, 0x53, 0xf7, 0x09, 0x7f,
	0xc2, 0x88, 0x6f, 0x92, 0xbd, 0x80, 0x30, 0x8e, 0x5e, 0x87, 0x62, 0xc3, 0xf6, 0x49, 0x9d, 0x53,
	0xbf, 0x67, 0xd9, 0x0d, 0x19, 0xa2, 0x60, 0x4e, 0xf6, 0xf7, 0xd6, 0x1b, 0x68, 0x16, 0x72, 0x01,
	0x23, 0xbe, 0x38, 0x9d, 0x90, 0xa7, 0x59, 0xb1, 0x5c, 0x6f, 0xa0, 0x1b, 0x30, 0xeb, 0x60, 0xc6,
	0xad, 0x2e, 0xf1, 0xed, 0xa6, 0x4d, 0x1a, 0x16, 0xf7, 0x09, 0xb1, 0x98, 0xfd, 0x8c, 0xc8, 0xb2,
	0x49, 0x99, 0x33, 0xe2, 0xf8, 0x63, 0x75, 0xfa, 0xd8, 0x27, 0x64, 0xdb, 0x7e, 0x46, 0xf4, 0xdf,
	0x34, 0xc8, 0xa9, 0x6b, 0xa3, 0x0b, 0x50, 0xe8, 0xfa, 0x11, 0x39, 0x61, 0xb6, 0xf2, 0x5d, 0x3f,
	0xbc, 0x3f, 0xba, 0x03, 0x25, 0xd1, 0x86, 0x76, 0xc4, 0xcd, 0x08, 0xec, 0x15, 0x3b, 0xd8, 0xeb,
	0xaf, 0x5e, 0x49, 0x4f, 0x7c, 0xaa, 0xc1, 0x74, 0x9f, 0x33, 0xe6, 0x51, 0x97, 0x11, 0xb4, 0x04,
	0x19, 0xe2, 0xd1, 0x7a, 0x5b, 0x15, 0xc5, 0x5c, 0x42, 0xcc, 0x7b, 0xc2, 0xce, 0x0c, 0xcd, 0xd1,
	0x12, 0xa4, 0x45, 0x76, 0xd5, 0x3d, 0xf4, 0x04, 0x37, 0x75, 0x31, 0x53, 0xda, 0xeb, 0x2f, 0x34,
	0x38, 0xb3, 0x82, 0x79, 0xbd, 0x3d, 0x7e, 0xf2, 0xce, 0x43, 0x5e, 0x25, 0x2f, 0x2c, 0xf9, 0x82,
	0x99, 0x0b, 0xb3, 0xc7, 0x4e, 0x9b, 0xbe, 0x17, 0x1a, 0xcc, 0x0c, 0x83, 0x79, 0x49, 0x56, 0x96,
	0x21, 0xeb, 0x10, 0xdc, 0x55, 0x3d, 0x39, 0x1a, 0x2f, 0xca, 0x43, 0xff, 0x5b, 0x83, 0xd9, 0x4d,
	0x9b, 0x71, 0xd9, 0x75, 0x0f, 0x6c, 0x26, 0x6e, 0x7d, 0x1c, 0x3b, 0xd9, 0xc4, 0xd2, 0xd6, 0x86,
	0x4a, 0x7b, 0x06, 0x32, 0x8c, 0x63, 0x9f, 0xcb, 0x54, 0xa5, 0xcc, 0x70, 0x21, 0xaa, 0xd5, 0xc3,
	0xad, 0x18, 0x47, 0x19, 0x33, 0x2f, 0x36, 0x04, 0x2f, 0x49, 0x74, 0x66, 0x8e, 0xa7, 0x33, 0x94,
	0x31, 0x7d, 0x1f, 0x2a, 0x87, 0xaf, 0xa1, 0x78, 0x5d, 0x81, 0x6c, 0x17, 0x3b, 0x01, 0x61, 0x15,
	0x4d, 0xf2, 0xf3, 0x4e, 0x02, 0x3f, 0x07, 0x72, 0x62, 0x2a, 0x4f, 0x74, 0x11, 0xc0, 0x25, 0x4f,
	0xb9, 0x15, 0xbf, 0x54, 0x41, 0xec, 0x6c, 0x8b, 0x0d, 0xfd, 0x57, 0x0d, 0x50, 0xf8, 0x2e, 0x0a,
	0xe5, 0xeb, 0x18, 0x06, 0x33, 0x63, 0x30, 0xb8, 0x0e, 0x45, 0x29, 0xbb, 0x56, 0x20, 0xe3, 0x56,
	0xd2, 0x27, 0xea, 0x67, 0xec, 0x8d, 0x68, 0x4e, 0x92, 0xc1, 0xa2, 0xaf, 0xf7, 0xa9, 0x72, 0x3a,
	0x6a, 0xc7, 0xb0, 0x80, 0x46, 0x87, 0x39, 0x13, 0xaf, 0xcd, 0x54, 0x54, 0x79, 0x09, 0x29, 0x9b,
	0x48, 0xe8, 0x80, 0x3d, 0x38, 0x7b, 0x9f, 0xf0, 0x4d, 0xcc, 0x09, 0x4b, 0x06, 0x72, 0x44, 0x3f,
	0x9e, 0xf2, 0x91, 0x3b, 0x52, 0x32, 0x4d, 0x4a, 0x39, 0x5a, 0x84, 0xbc, 0x50, 0x45, 0x9f, 0x52,
	0xae, 0x3a, 0x6d, 0x76, 0x20, 0x88, 0xe1, 0x3b, 0x48, 0x99, 0x9a, 0xb9, 0x8e, 0xf2, 0x79, 0x03,
	0x4a, 0x0e, 0x6d, 0x0d, 0x29, 0xa9, 0x78, 0xfb, 0x15, 0x1d, 0xda, 0xea, 0xab, 0xa5, 0xde, 0x84,
	0xdc, 0x26, 0x6d, 0x45, 0xcf, 0x10, 0xf6, 0x49, 0xcf, 0x50, 0xa6, 0x66, 0xce, 0x51, 0x3e, 0x6f,
	0xc1, 0xb4, 0xf0, 0xa9, 0x53, 0x97, 0xd9, 0x8c, 0x8b, 0xa4, 0xaa, 0xa7, 0x4c, 0x39, 0xb4, 0xb5,
	0x3a, 0xd8, 0xd5, 0xff, 0x11, 0x53, 0x86, 0xe4, 0x7f, 0x04, 0xbe, 0x6e, 0xc5, 0x6e, 0x9b, 0x19,
	0x45, 0x36, 0x87, 0x2f, 0xbe, 0x01, 0xd3, 0x8e, 0xcc, 0x93, 0xd5, 0xbf, 0x4f, 0xf6, 0xc4, 0x28,
	0xd1, 0xd5, 0x4a, 0xa1, 0xab, 0x5a, 0xc6, 0xcb, 0x50, 0x75, 0xed, 0x57, 0x1a, 0xcc, 0x88, 0xb6,
	0x8d, 0xa6, 0x06, 0xf6, 0xd2, 0x15, 0x79, 0x11, 0x40, 0x2a, 0x0c, 0xa7, 0xbb, 0xc4, 0x95, 0x12,
	0x53, 0x30, 0xa5, 0xe6, 0x3c, 0x16, 0x1b, 0xc3, 0x02, 0x94, 0x1e, 0x16, 0x20, 0xfd, 0x4b, 0x0d,
	0xce, 0x1e, 0x40, 0xa3, 0x14, 0x64, 0x0d, 0x0a, 0xd1, 0x3c, 0xc2, 0x2a, 0x59, 0x29, 0x22, 0x57,
	0x92, 0x58, 0x8c, 0x0f, 0x41, 0xe6, 0xc0, 0x15, 0x5d, 0x86, 0x69, 0xa9, 0x22, 0x31, 0x88, 0x39,
	0x09, 0xb1, 0x24, 0xb6, 0x1f, 0x45, 0x30, 0x17, 0xbf, 0x28, 0xc1, 0xf4, 0x43, 0xd2, 0x7b, 0x1c,
	0x8b, 0x8b, 0xbe, 0xd6, 0xa0, 0x78, 0x9f, 0xf0, 0xbb, 0x11, 0x05, 0xa8, 0x96, 0x2c, 0x63, 0x7d,
	0x43, 0xc5, 0x69, 0x35, 0xe9, 0xcd, 0xdd, 0x37, 0xd6, 0x2f, 0x7f, 0xf6, 0xef, 0x7f, 0xdf, 0x4d,
	0xcc, 0xa1, 0x4b, 0x46, 0x77, 0xc1, 0x88, 0xf8, 0xb6, 0x09, 0x33, 0x9e, 0xc7, 0x13, 0xb2, 0x8f,
	0xbe, 0xd5, 0x20, 0x1f, 0xe9, 0x08, 0x3a, 0x41, 0x51, 0xe3, 0x3d, 0x5e, 0x3d, 0xf1, 0xb5, 0xa6,
	0xdf, 0x90, 0x10, 0x0c, 0x74, 0x35, 0x19, 0x82, 0x21, 0x33, 0xce, 0x8c, 0xe7, 0xf2, 0x77, 0x1f,
	0xfd, 0x14, 0x0e, 0x67, 0x31, 0x59, 0x41, 0xf3, 0xc9, 0xb8, 0x0e, 0x2b, 0xd0, 0x08, 0xe8, 0xae,
	0x4b, 0x74, 0x35, 0xf4, 0xee, 0x48, 0xe8, 0x96, 0xc3, 0x16, 0x40, 0x3f, 0x84, 0xe0, 0x64, 0x88,
	0x6d, 0xee, 0x13, 0xdc, 0x79, 0xc5, 0xa4, 0x8d, 0x09, 0x8b, 0x49, 0x0c, 0xf3, 0x1a, 0xfa, 0x5d,
	0x83, 0xd2, 0x50, 0xd1, 0x23, 0x23, 0xa9, 0xb3, 0x8f, 0x68, 0xd6, 0xea, 0xfc, 0xe8, 0x0e, 0x61,
	0x3f, 0xe9, 0x77, 0x24, 0xd8, 0x9b, 0xe8, 0xbd, 0xb1, 0x32, 0x6c, 0x0c, 0x1a, 0xe9, 0x4f, 0x0d,
	0xce, 0x0c, 0x85, 0x56, 0x9c, 0x8e, 0x8d, 0x7d, 0xe4, 0x36, 0xd6, 0xd7, 0x24, 0xe6, 0x0f, 0xd0,
	0xed, 0x53, 0x62, 0x1e, 0x50, 0xfe, 0xa3, 0x06, 0x39, 0x35, 0x67, 0xa0, 0xb7, 0x47, 0x99, 0x45,
	0x42, 0xa8, 0x63, 0x8c, 0x2d, 0xfa, 0x92, 0x04, 0x3b, 0x8f, 0x6a, 0x27, 0x80, 0x15, 0xb3, 0x06,
	0x33, 0x9e, 0xab, 0x09, 0x64, 0x1f, 0xfd, 0xa2, 0x41, 0x31, 0x3e, 0x9b, 0x26, 0x8a, 0xcc, 0x11,
	0x13, 0x75, 0xd5, 0x18, 0xd9, 0x5e, 0x21, 0x1d, 0xb5, 0xd9, 0x25, 0xd2, 0xe5, 0x1d, 0x15, 0x02,
	0xfd, 0xa5, 0x41, 0xf9, 0xe0, 0xc0, 0x87, 0x16, 0x4f, 0xc8, 0xfe, 0x11, 0x43, 0x6e, 0xf5, 0xda,
	0x58, 0x3e, 0x0a, 0xf4, 0x6d, 0x09, 0xfa, 0x7d, 0xb4, 0x34, 0x1e, 0xbd, 0x46, 0x5b, 0x01, 0xfd,
	0x59, 0x83, 0xf2, 0x47, 0x01, 0x09, 0x48, 0xfc, 0x23, 0xc6, 0xd5, 0x04, 0x24, 0x87, 0x67, 0xcb,
	0xea, 0xb9, 0xc8, 0x3c, 0xfa, 0x30, 0x53, 0xbb, 0xd7, 0xf1, 0x78, 0x4f, 0xdf, 0x90, 0xd8, 0xee,
	0xea, 0xd7, 0xc7, 0xc3, 0xb6, 0xbc, 0x27, 0xf0, 0x2c, 0x0f, 0xcd, 0x9c, 0x2b, 0x0f, 0x3e, 0x59,
	0x6b, 0xd9, 0xbc, 0x1d, 0xec, 0xd4, 0xea, 0xb4, 0x63, 0xa8, 0x0f, 0x41, 0x07, 0xe0, 0x19, 0x75,
	0xea, 0x87, 0xdf, 0x8e, 0x0e, 0x7f, 0x7b, 0xb2, 0x5a, 0xd4, 0x0a, 0xe1, 0x65, 0xe5, 0xcf, 0xb5,
	0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x69, 0x5e, 0x25, 0x38, 0xa1, 0x12, 0x00, 0x00,
}
