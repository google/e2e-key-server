// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/keytransparency.proto

// Key Transparency
//
// The Key Transparency API consists of a map of user names to public
// keys. Each user name also has a history of public keys that have been
// associated with it.

package keytransparency_go_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	tink_go_proto "github.com/google/tink/proto/tink_go_proto"
	trillian "github.com/google/trillian"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Committed represents the data committed to in a cryptographic commitment.
// commitment = HMAC_SHA512_256(key, data)
type Committed struct {
	// key is the 16 byte random commitment key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// data is the data being committed to.
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Committed) Reset()         { *m = Committed{} }
func (m *Committed) String() string { return proto.CompactTextString(m) }
func (*Committed) ProtoMessage()    {}
func (*Committed) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{0}
}

func (m *Committed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Committed.Unmarshal(m, b)
}
func (m *Committed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Committed.Marshal(b, m, deterministic)
}
func (m *Committed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Committed.Merge(m, src)
}
func (m *Committed) XXX_Size() int {
	return xxx_messageInfo_Committed.Size(m)
}
func (m *Committed) XXX_DiscardUnknown() {
	xxx_messageInfo_Committed.DiscardUnknown(m)
}

var xxx_messageInfo_Committed proto.InternalMessageInfo

func (m *Committed) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Committed) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// EntryUpdate contains the user entry update(s).
type EntryUpdate struct {
	// mutation authorizes the change to entry.
	Mutation *Entry `protobuf:"bytes,2,opt,name=mutation,proto3" json:"mutation,omitempty"`
	// committed contains the data committed to in mutation.commitment.
	Committed            *Committed `protobuf:"bytes,3,opt,name=committed,proto3" json:"committed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EntryUpdate) Reset()         { *m = EntryUpdate{} }
func (m *EntryUpdate) String() string { return proto.CompactTextString(m) }
func (*EntryUpdate) ProtoMessage()    {}
func (*EntryUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{1}
}

func (m *EntryUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntryUpdate.Unmarshal(m, b)
}
func (m *EntryUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntryUpdate.Marshal(b, m, deterministic)
}
func (m *EntryUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryUpdate.Merge(m, src)
}
func (m *EntryUpdate) XXX_Size() int {
	return xxx_messageInfo_EntryUpdate.Size(m)
}
func (m *EntryUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EntryUpdate proto.InternalMessageInfo

func (m *EntryUpdate) GetMutation() *Entry {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (m *EntryUpdate) GetCommitted() *Committed {
	if m != nil {
		return m.Committed
	}
	return nil
}

// Entry is a signed change to a map entry.
// Entry contains a commitment to profile and a set of authorized update keys.
// Entry is placed in the verifiable map as leaf data.
type Entry struct {
	// index is the location of this leaf in the sparse merkle tree.
	Index []byte `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	// commitment is a cryptographic commitment to arbitrary data.
	Commitment []byte `protobuf:"bytes,6,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// authorized_keys is the set of keys allowed to sign updates for this entry.
	AuthorizedKeys *tink_go_proto.Keyset `protobuf:"bytes,7,opt,name=authorized_keys,json=authorizedKeys,proto3" json:"authorized_keys,omitempty"`
	// previous contains the hash of the previous entry that this mutation is
	// modifying creating a hash chain of all mutations. The hash used is
	// CommonJSON in "github.com/benlaurie/objecthash/go/objecthash".
	Previous []byte `protobuf:"bytes,8,opt,name=previous,proto3" json:"previous,omitempty"`
	// signatures on entry. Must be signed by keys from both previous and
	// current epochs. The first proves ownership of new epoch key, and the
	// second proves that the correct owner is making this change.
	Signatures           [][]byte `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{2}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Entry) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *Entry) GetAuthorizedKeys() *tink_go_proto.Keyset {
	if m != nil {
		return m.AuthorizedKeys
	}
	return nil
}

func (m *Entry) GetPrevious() []byte {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *Entry) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// MutationProof contains the information necessary to compute the new leaf value.
// It contains a) the old leaf value with it's inclusion proof and b) the mutation.
// The new leaf value is computed via:
//       Mutate(leaf_value, mutation)
type MutationProof struct {
	// mutation contains the information needed to modify the old leaf.
	// The format of a mutation is specific to the particular Mutate function being used.
	Mutation *Entry `protobuf:"bytes,1,opt,name=mutation,proto3" json:"mutation,omitempty"`
	// leaf_proof contains the leaf and its inclusion proof for a particular map revision.
	LeafProof            *trillian.MapLeafInclusion `protobuf:"bytes,2,opt,name=leaf_proof,json=leafProof,proto3" json:"leaf_proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MutationProof) Reset()         { *m = MutationProof{} }
func (m *MutationProof) String() string { return proto.CompactTextString(m) }
func (*MutationProof) ProtoMessage()    {}
func (*MutationProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{3}
}

func (m *MutationProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MutationProof.Unmarshal(m, b)
}
func (m *MutationProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MutationProof.Marshal(b, m, deterministic)
}
func (m *MutationProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutationProof.Merge(m, src)
}
func (m *MutationProof) XXX_Size() int {
	return xxx_messageInfo_MutationProof.Size(m)
}
func (m *MutationProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MutationProof.DiscardUnknown(m)
}

var xxx_messageInfo_MutationProof proto.InternalMessageInfo

func (m *MutationProof) GetMutation() *Entry {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (m *MutationProof) GetLeafProof() *trillian.MapLeafInclusion {
	if m != nil {
		return m.LeafProof
	}
	return nil
}

// MapperMetadata tracks the mutations that have been mapped so far. It is
// embedded in the Trillian SignedMapHead.
type MapperMetadata struct {
	HighestFullyCompletedSeq int64    `protobuf:"varint,1,opt,name=highest_fully_completed_seq,json=highestFullyCompletedSeq,proto3" json:"highest_fully_completed_seq,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *MapperMetadata) Reset()         { *m = MapperMetadata{} }
func (m *MapperMetadata) String() string { return proto.CompactTextString(m) }
func (*MapperMetadata) ProtoMessage()    {}
func (*MapperMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{4}
}

func (m *MapperMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapperMetadata.Unmarshal(m, b)
}
func (m *MapperMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapperMetadata.Marshal(b, m, deterministic)
}
func (m *MapperMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapperMetadata.Merge(m, src)
}
func (m *MapperMetadata) XXX_Size() int {
	return xxx_messageInfo_MapperMetadata.Size(m)
}
func (m *MapperMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MapperMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MapperMetadata proto.InternalMessageInfo

func (m *MapperMetadata) GetHighestFullyCompletedSeq() int64 {
	if m != nil {
		return m.HighestFullyCompletedSeq
	}
	return 0
}

// GetEntryRequest for a user object.
type GetEntryRequest struct {
	// domain_id identifies the domain in which the user and application live.
	DomainId string `protobuf:"bytes,4,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// user_id is the user identifier. Most commonly an email address.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// app_id is the identifier for the application.
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// first_tree_size is the tree_size of the currently trusted log root.
	// Omitting this field will omit the log consistency proof from the response.
	FirstTreeSize        int64    `protobuf:"varint,3,opt,name=first_tree_size,json=firstTreeSize,proto3" json:"first_tree_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEntryRequest) Reset()         { *m = GetEntryRequest{} }
func (m *GetEntryRequest) String() string { return proto.CompactTextString(m) }
func (*GetEntryRequest) ProtoMessage()    {}
func (*GetEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{5}
}

func (m *GetEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntryRequest.Unmarshal(m, b)
}
func (m *GetEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntryRequest.Marshal(b, m, deterministic)
}
func (m *GetEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntryRequest.Merge(m, src)
}
func (m *GetEntryRequest) XXX_Size() int {
	return xxx_messageInfo_GetEntryRequest.Size(m)
}
func (m *GetEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntryRequest proto.InternalMessageInfo

func (m *GetEntryRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetEntryRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetEntryRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GetEntryRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

// GetEntryResponse returns a requested user entry.
type GetEntryResponse struct {
	// vrf_proof is the proof for VRF on user_id.
	VrfProof []byte `protobuf:"bytes,1,opt,name=vrf_proof,json=vrfProof,proto3" json:"vrf_proof,omitempty"`
	// committed contains the profile for this account and connects the data
	// in profile to the commitment in leaf_proof.
	Committed *Committed `protobuf:"bytes,2,opt,name=committed,proto3" json:"committed,omitempty"`
	// leaf_proof contains an Entry and an inclusion proof in the sparse Merkle
	// Tree.
	LeafProof *trillian.MapLeafInclusion `protobuf:"bytes,3,opt,name=leaf_proof,json=leafProof,proto3" json:"leaf_proof,omitempty"`
	// map_root contains the signed map head for the sparse Merkle Tree.
	// map_root is also stored in the append only log.
	MapRoot *trillian.SignedMapRoot `protobuf:"bytes,4,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	// log_root is the latest globally consistent log root.
	// TODO: gossip the log root to verify global consistency.
	LogRoot *trillian.SignedLogRoot `protobuf:"bytes,5,opt,name=log_root,json=logRoot,proto3" json:"log_root,omitempty"`
	// log_consistency proves that log_root is consistent with previously seen roots.
	LogConsistency [][]byte `protobuf:"bytes,6,rep,name=log_consistency,json=logConsistency,proto3" json:"log_consistency,omitempty"`
	// log_inclusion proves that map_root is part of log_root at index=map_root.MapRevision.
	LogInclusion         [][]byte `protobuf:"bytes,7,rep,name=log_inclusion,json=logInclusion,proto3" json:"log_inclusion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEntryResponse) Reset()         { *m = GetEntryResponse{} }
func (m *GetEntryResponse) String() string { return proto.CompactTextString(m) }
func (*GetEntryResponse) ProtoMessage()    {}
func (*GetEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{6}
}

func (m *GetEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntryResponse.Unmarshal(m, b)
}
func (m *GetEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntryResponse.Marshal(b, m, deterministic)
}
func (m *GetEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntryResponse.Merge(m, src)
}
func (m *GetEntryResponse) XXX_Size() int {
	return xxx_messageInfo_GetEntryResponse.Size(m)
}
func (m *GetEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntryResponse proto.InternalMessageInfo

func (m *GetEntryResponse) GetVrfProof() []byte {
	if m != nil {
		return m.VrfProof
	}
	return nil
}

func (m *GetEntryResponse) GetCommitted() *Committed {
	if m != nil {
		return m.Committed
	}
	return nil
}

func (m *GetEntryResponse) GetLeafProof() *trillian.MapLeafInclusion {
	if m != nil {
		return m.LeafProof
	}
	return nil
}

func (m *GetEntryResponse) GetMapRoot() *trillian.SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

func (m *GetEntryResponse) GetLogRoot() *trillian.SignedLogRoot {
	if m != nil {
		return m.LogRoot
	}
	return nil
}

func (m *GetEntryResponse) GetLogConsistency() [][]byte {
	if m != nil {
		return m.LogConsistency
	}
	return nil
}

func (m *GetEntryResponse) GetLogInclusion() [][]byte {
	if m != nil {
		return m.LogInclusion
	}
	return nil
}

// ListEntryHistoryRequest gets a list of historical keys for a user.
type ListEntryHistoryRequest struct {
	// domain_id identifies the domain in which the user and application live.
	DomainId string `protobuf:"bytes,6,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// user_id is the user identifier.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// start is the starting epoch.
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// page_size is the maximum number of entries to return.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// app_id is the identifier for the application.
	AppId string `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// first_tree_size is the tree_size of the currently trusted log root.
	// Omitting this field will omit the log consistency proof from the response.
	FirstTreeSize        int64    `protobuf:"varint,5,opt,name=first_tree_size,json=firstTreeSize,proto3" json:"first_tree_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEntryHistoryRequest) Reset()         { *m = ListEntryHistoryRequest{} }
func (m *ListEntryHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*ListEntryHistoryRequest) ProtoMessage()    {}
func (*ListEntryHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{7}
}

func (m *ListEntryHistoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEntryHistoryRequest.Unmarshal(m, b)
}
func (m *ListEntryHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEntryHistoryRequest.Marshal(b, m, deterministic)
}
func (m *ListEntryHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEntryHistoryRequest.Merge(m, src)
}
func (m *ListEntryHistoryRequest) XXX_Size() int {
	return xxx_messageInfo_ListEntryHistoryRequest.Size(m)
}
func (m *ListEntryHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEntryHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEntryHistoryRequest proto.InternalMessageInfo

func (m *ListEntryHistoryRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *ListEntryHistoryRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListEntryHistoryRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ListEntryHistoryRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListEntryHistoryRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ListEntryHistoryRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

// ListEntryHistoryResponse requests a paginated history of keys for a user.
type ListEntryHistoryResponse struct {
	// values represents the list of keys this user_id has contained over time.
	Values []*GetEntryResponse `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// next_start is the next page token to query for pagination.
	// next_start is 0 when there are no more results to fetch.
	NextStart            int64    `protobuf:"varint,2,opt,name=next_start,json=nextStart,proto3" json:"next_start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEntryHistoryResponse) Reset()         { *m = ListEntryHistoryResponse{} }
func (m *ListEntryHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*ListEntryHistoryResponse) ProtoMessage()    {}
func (*ListEntryHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{8}
}

func (m *ListEntryHistoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEntryHistoryResponse.Unmarshal(m, b)
}
func (m *ListEntryHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEntryHistoryResponse.Marshal(b, m, deterministic)
}
func (m *ListEntryHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEntryHistoryResponse.Merge(m, src)
}
func (m *ListEntryHistoryResponse) XXX_Size() int {
	return xxx_messageInfo_ListEntryHistoryResponse.Size(m)
}
func (m *ListEntryHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEntryHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEntryHistoryResponse proto.InternalMessageInfo

func (m *ListEntryHistoryResponse) GetValues() []*GetEntryResponse {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListEntryHistoryResponse) GetNextStart() int64 {
	if m != nil {
		return m.NextStart
	}
	return 0
}

// UpdateEntryRequest updates a user's profile.
type UpdateEntryRequest struct {
	// domain_id identifies the domain in which the user and application live.
	DomainId string `protobuf:"bytes,5,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// user_id specifies the id for the user who's profile is being updated.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// app_id is the identifier for the application.
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// entry_update contains the user submitted update.
	EntryUpdate          *EntryUpdate `protobuf:"bytes,4,opt,name=entry_update,json=entryUpdate,proto3" json:"entry_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateEntryRequest) Reset()         { *m = UpdateEntryRequest{} }
func (m *UpdateEntryRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEntryRequest) ProtoMessage()    {}
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{9}
}

func (m *UpdateEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEntryRequest.Unmarshal(m, b)
}
func (m *UpdateEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEntryRequest.Marshal(b, m, deterministic)
}
func (m *UpdateEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEntryRequest.Merge(m, src)
}
func (m *UpdateEntryRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateEntryRequest.Size(m)
}
func (m *UpdateEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEntryRequest proto.InternalMessageInfo

func (m *UpdateEntryRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *UpdateEntryRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateEntryRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateEntryRequest) GetEntryUpdate() *EntryUpdate {
	if m != nil {
		return m.EntryUpdate
	}
	return nil
}

// GetEpochRequest identifies a particular epoch.
type GetEpochRequest struct {
	// domain_id is the domain for which epochs are being requested.
	DomainId string `protobuf:"bytes,5,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// epoch specifies the epoch number in which mutations will be returned.
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// first_tree_size is the tree_size of the currently trusted log root.
	// Omitting this field will omit the log consistency proof from the response.
	FirstTreeSize        int64    `protobuf:"varint,2,opt,name=first_tree_size,json=firstTreeSize,proto3" json:"first_tree_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEpochRequest) Reset()         { *m = GetEpochRequest{} }
func (m *GetEpochRequest) String() string { return proto.CompactTextString(m) }
func (*GetEpochRequest) ProtoMessage()    {}
func (*GetEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{10}
}

func (m *GetEpochRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEpochRequest.Unmarshal(m, b)
}
func (m *GetEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEpochRequest.Marshal(b, m, deterministic)
}
func (m *GetEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEpochRequest.Merge(m, src)
}
func (m *GetEpochRequest) XXX_Size() int {
	return xxx_messageInfo_GetEpochRequest.Size(m)
}
func (m *GetEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEpochRequest proto.InternalMessageInfo

func (m *GetEpochRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetEpochRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *GetEpochRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

// GetLatestEpochRequest identifies a particular epoch.
type GetLatestEpochRequest struct {
	// domain_id is the domain for which epochs are being requested.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// first_tree_size is the tree_size of the currently trusted log root.
	// Omitting this field will omit the log consistency proof from the response.
	FirstTreeSize        int64    `protobuf:"varint,2,opt,name=first_tree_size,json=firstTreeSize,proto3" json:"first_tree_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLatestEpochRequest) Reset()         { *m = GetLatestEpochRequest{} }
func (m *GetLatestEpochRequest) String() string { return proto.CompactTextString(m) }
func (*GetLatestEpochRequest) ProtoMessage()    {}
func (*GetLatestEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{11}
}

func (m *GetLatestEpochRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLatestEpochRequest.Unmarshal(m, b)
}
func (m *GetLatestEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLatestEpochRequest.Marshal(b, m, deterministic)
}
func (m *GetLatestEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestEpochRequest.Merge(m, src)
}
func (m *GetLatestEpochRequest) XXX_Size() int {
	return xxx_messageInfo_GetLatestEpochRequest.Size(m)
}
func (m *GetLatestEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestEpochRequest proto.InternalMessageInfo

func (m *GetLatestEpochRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetLatestEpochRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

// Epoch represents a snapshot of the entire key directory and
// a diff of what changed between this revision and the previous revision.
type Epoch struct {
	// domain_id is the domain identifier.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// map_root contains the signed map root for the sparse Merkle Tree.
	MapRoot *trillian.SignedMapRoot `protobuf:"bytes,2,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	// log_root is the latest globally consistent log root.
	LogRoot *trillian.SignedLogRoot `protobuf:"bytes,3,opt,name=log_root,json=logRoot,proto3" json:"log_root,omitempty"`
	// log_consistency proves that log_root is consistent with previously seen roots.
	LogConsistency [][]byte `protobuf:"bytes,4,rep,name=log_consistency,json=logConsistency,proto3" json:"log_consistency,omitempty"`
	// log_inclusion proves that map_root is part of log_root at index=map_root.MapRevision.
	LogInclusion         [][]byte `protobuf:"bytes,5,rep,name=log_inclusion,json=logInclusion,proto3" json:"log_inclusion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{12}
}

func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Epoch.Unmarshal(m, b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return xxx_messageInfo_Epoch.Size(m)
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *Epoch) GetMapRoot() *trillian.SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

func (m *Epoch) GetLogRoot() *trillian.SignedLogRoot {
	if m != nil {
		return m.LogRoot
	}
	return nil
}

func (m *Epoch) GetLogConsistency() [][]byte {
	if m != nil {
		return m.LogConsistency
	}
	return nil
}

func (m *Epoch) GetLogInclusion() [][]byte {
	if m != nil {
		return m.LogInclusion
	}
	return nil
}

// ListMutationsRequest requests the mutations that created a given epoch.
type ListMutationsRequest struct {
	// domain_id is the domain identifier.
	DomainId string `protobuf:"bytes,5,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// epoch specifies the epoch number.
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// page_token defines the starting point for pagination.
	// To request the next page, pass next_page_token from the previous response.
	// To start at the beginning, simply omit page_token from the request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// page_size is the maximum number of mutations to return in a single request.
	// The server may choose a smaller page_size than the one requested.
	PageSize             int32    `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMutationsRequest) Reset()         { *m = ListMutationsRequest{} }
func (m *ListMutationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListMutationsRequest) ProtoMessage()    {}
func (*ListMutationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{13}
}

func (m *ListMutationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMutationsRequest.Unmarshal(m, b)
}
func (m *ListMutationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMutationsRequest.Marshal(b, m, deterministic)
}
func (m *ListMutationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMutationsRequest.Merge(m, src)
}
func (m *ListMutationsRequest) XXX_Size() int {
	return xxx_messageInfo_ListMutationsRequest.Size(m)
}
func (m *ListMutationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMutationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMutationsRequest proto.InternalMessageInfo

func (m *ListMutationsRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *ListMutationsRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ListMutationsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListMutationsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// ListMutationsResponse contains the mutations that produced an epoch.
type ListMutationsResponse struct {
	// mutations contains the mutation object and the leaf value it operated on.
	Mutations []*MutationProof `protobuf:"bytes,6,rep,name=mutations,proto3" json:"mutations,omitempty"`
	// next_page_token is the next page token to query for pagination.
	// An empty value means there are no more results to fetch.
	NextPageToken        string   `protobuf:"bytes,7,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMutationsResponse) Reset()         { *m = ListMutationsResponse{} }
func (m *ListMutationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListMutationsResponse) ProtoMessage()    {}
func (*ListMutationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e925e13aa3e8f7d, []int{14}
}

func (m *ListMutationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMutationsResponse.Unmarshal(m, b)
}
func (m *ListMutationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMutationsResponse.Marshal(b, m, deterministic)
}
func (m *ListMutationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMutationsResponse.Merge(m, src)
}
func (m *ListMutationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListMutationsResponse.Size(m)
}
func (m *ListMutationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMutationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMutationsResponse proto.InternalMessageInfo

func (m *ListMutationsResponse) GetMutations() []*MutationProof {
	if m != nil {
		return m.Mutations
	}
	return nil
}

func (m *ListMutationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Committed)(nil), "google.keytransparency.v1.Committed")
	proto.RegisterType((*EntryUpdate)(nil), "google.keytransparency.v1.EntryUpdate")
	proto.RegisterType((*Entry)(nil), "google.keytransparency.v1.Entry")
	proto.RegisterType((*MutationProof)(nil), "google.keytransparency.v1.MutationProof")
	proto.RegisterType((*MapperMetadata)(nil), "google.keytransparency.v1.MapperMetadata")
	proto.RegisterType((*GetEntryRequest)(nil), "google.keytransparency.v1.GetEntryRequest")
	proto.RegisterType((*GetEntryResponse)(nil), "google.keytransparency.v1.GetEntryResponse")
	proto.RegisterType((*ListEntryHistoryRequest)(nil), "google.keytransparency.v1.ListEntryHistoryRequest")
	proto.RegisterType((*ListEntryHistoryResponse)(nil), "google.keytransparency.v1.ListEntryHistoryResponse")
	proto.RegisterType((*UpdateEntryRequest)(nil), "google.keytransparency.v1.UpdateEntryRequest")
	proto.RegisterType((*GetEpochRequest)(nil), "google.keytransparency.v1.GetEpochRequest")
	proto.RegisterType((*GetLatestEpochRequest)(nil), "google.keytransparency.v1.GetLatestEpochRequest")
	proto.RegisterType((*Epoch)(nil), "google.keytransparency.v1.Epoch")
	proto.RegisterType((*ListMutationsRequest)(nil), "google.keytransparency.v1.ListMutationsRequest")
	proto.RegisterType((*ListMutationsResponse)(nil), "google.keytransparency.v1.ListMutationsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyTransparencyClient is the client API for KeyTransparency service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyTransparencyClient interface {
	// GetDomain returns the information needed to verify the specified domain.
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// GetEpoch returns a SignedMapRoot by the by the requested revision number
	// along with its inclusion proof in the log and the log's consistency proofs.
	GetEpoch(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (*Epoch, error)
	// GetLatestEpoch returns the latest SignedMapRoot along with its inclusion
	// proof in the log and the log's consistency proofs.
	GetLatestEpoch(ctx context.Context, in *GetLatestEpochRequest, opts ...grpc.CallOption) (*Epoch, error)
	// GetEpochStream streams new epochs from a requested starting point
	// and continues as new epochs are created.
	GetEpochStream(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (KeyTransparency_GetEpochStreamClient, error)
	// ListMutations returns a list of mutations in a specific epoch.
	ListMutations(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (*ListMutationsResponse, error)
	// ListMutationsStream is a streaming list of mutations in a specific epoch.
	ListMutationsStream(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (KeyTransparency_ListMutationsStreamClient, error)
	// GetEntry returns a user's entry in the Merkle Tree.
	//
	// Entries contain signed commitments to a profile, which is also returned.
	// TODO(gbelvin): Replace with GetUser
	GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error)
	// ListEntryHistory returns a list of historic GetEntry values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(ctx context.Context, in *ListEntryHistoryRequest, opts ...grpc.CallOption) (*ListEntryHistoryResponse, error)
	// QueueUserUpdate enqueues an update to a user's profile.
	//
	// Clients should poll GetEntry until the update appears, and retry if no update appears after a timeout.
	QueueEntryUpdate(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyTransparencyClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyClient(cc *grpc.ClientConn) KeyTransparencyClient {
	return &keyTransparencyClient{cc}
}

func (c *keyTransparencyClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetEpoch(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (*Epoch, error) {
	out := new(Epoch)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetLatestEpoch(ctx context.Context, in *GetLatestEpochRequest, opts ...grpc.CallOption) (*Epoch, error) {
	out := new(Epoch)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetLatestEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetEpochStream(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (KeyTransparency_GetEpochStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KeyTransparency_serviceDesc.Streams[0], "/google.keytransparency.v1.KeyTransparency/GetEpochStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyTransparencyGetEpochStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyTransparency_GetEpochStreamClient interface {
	Recv() (*Epoch, error)
	grpc.ClientStream
}

type keyTransparencyGetEpochStreamClient struct {
	grpc.ClientStream
}

func (x *keyTransparencyGetEpochStreamClient) Recv() (*Epoch, error) {
	m := new(Epoch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyTransparencyClient) ListMutations(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (*ListMutationsResponse, error) {
	out := new(ListMutationsResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/ListMutations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) ListMutationsStream(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (KeyTransparency_ListMutationsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KeyTransparency_serviceDesc.Streams[1], "/google.keytransparency.v1.KeyTransparency/ListMutationsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyTransparencyListMutationsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyTransparency_ListMutationsStreamClient interface {
	Recv() (*MutationProof, error)
	grpc.ClientStream
}

type keyTransparencyListMutationsStreamClient struct {
	grpc.ClientStream
}

func (x *keyTransparencyListMutationsStreamClient) Recv() (*MutationProof, error) {
	m := new(MutationProof)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyTransparencyClient) GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error) {
	out := new(GetEntryResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) ListEntryHistory(ctx context.Context, in *ListEntryHistoryRequest, opts ...grpc.CallOption) (*ListEntryHistoryResponse, error) {
	out := new(ListEntryHistoryResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/ListEntryHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) QueueEntryUpdate(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/QueueEntryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyTransparencyServer is the server API for KeyTransparency service.
type KeyTransparencyServer interface {
	// GetDomain returns the information needed to verify the specified domain.
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	// GetEpoch returns a SignedMapRoot by the by the requested revision number
	// along with its inclusion proof in the log and the log's consistency proofs.
	GetEpoch(context.Context, *GetEpochRequest) (*Epoch, error)
	// GetLatestEpoch returns the latest SignedMapRoot along with its inclusion
	// proof in the log and the log's consistency proofs.
	GetLatestEpoch(context.Context, *GetLatestEpochRequest) (*Epoch, error)
	// GetEpochStream streams new epochs from a requested starting point
	// and continues as new epochs are created.
	GetEpochStream(*GetEpochRequest, KeyTransparency_GetEpochStreamServer) error
	// ListMutations returns a list of mutations in a specific epoch.
	ListMutations(context.Context, *ListMutationsRequest) (*ListMutationsResponse, error)
	// ListMutationsStream is a streaming list of mutations in a specific epoch.
	ListMutationsStream(*ListMutationsRequest, KeyTransparency_ListMutationsStreamServer) error
	// GetEntry returns a user's entry in the Merkle Tree.
	//
	// Entries contain signed commitments to a profile, which is also returned.
	// TODO(gbelvin): Replace with GetUser
	GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error)
	// ListEntryHistory returns a list of historic GetEntry values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(context.Context, *ListEntryHistoryRequest) (*ListEntryHistoryResponse, error)
	// QueueUserUpdate enqueues an update to a user's profile.
	//
	// Clients should poll GetEntry until the update appears, and retry if no update appears after a timeout.
	QueueEntryUpdate(context.Context, *UpdateEntryRequest) (*empty.Empty, error)
}

func RegisterKeyTransparencyServer(s *grpc.Server, srv KeyTransparencyServer) {
	s.RegisterService(&_KeyTransparency_serviceDesc, srv)
}

func _KeyTransparency_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetEpoch(ctx, req.(*GetEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetLatestEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetLatestEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetLatestEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetLatestEpoch(ctx, req.(*GetLatestEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetEpochStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEpochRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyTransparencyServer).GetEpochStream(m, &keyTransparencyGetEpochStreamServer{stream})
}

type KeyTransparency_GetEpochStreamServer interface {
	Send(*Epoch) error
	grpc.ServerStream
}

type keyTransparencyGetEpochStreamServer struct {
	grpc.ServerStream
}

func (x *keyTransparencyGetEpochStreamServer) Send(m *Epoch) error {
	return x.ServerStream.SendMsg(m)
}

func _KeyTransparency_ListMutations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMutationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).ListMutations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/ListMutations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).ListMutations(ctx, req.(*ListMutationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_ListMutationsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMutationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyTransparencyServer).ListMutationsStream(m, &keyTransparencyListMutationsStreamServer{stream})
}

type KeyTransparency_ListMutationsStreamServer interface {
	Send(*MutationProof) error
	grpc.ServerStream
}

type keyTransparencyListMutationsStreamServer struct {
	grpc.ServerStream
}

func (x *keyTransparencyListMutationsStreamServer) Send(m *MutationProof) error {
	return x.ServerStream.SendMsg(m)
}

func _KeyTransparency_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetEntry(ctx, req.(*GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_ListEntryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).ListEntryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/ListEntryHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).ListEntryHistory(ctx, req.(*ListEntryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_QueueEntryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).QueueEntryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/QueueEntryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).QueueEntryUpdate(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparency_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.v1.KeyTransparency",
	HandlerType: (*KeyTransparencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDomain",
			Handler:    _KeyTransparency_GetDomain_Handler,
		},
		{
			MethodName: "GetEpoch",
			Handler:    _KeyTransparency_GetEpoch_Handler,
		},
		{
			MethodName: "GetLatestEpoch",
			Handler:    _KeyTransparency_GetLatestEpoch_Handler,
		},
		{
			MethodName: "ListMutations",
			Handler:    _KeyTransparency_ListMutations_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _KeyTransparency_GetEntry_Handler,
		},
		{
			MethodName: "ListEntryHistory",
			Handler:    _KeyTransparency_ListEntryHistory_Handler,
		},
		{
			MethodName: "QueueEntryUpdate",
			Handler:    _KeyTransparency_QueueEntryUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEpochStream",
			Handler:       _KeyTransparency_GetEpochStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListMutationsStream",
			Handler:       _KeyTransparency_ListMutationsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/keytransparency.proto",
}

func init() { proto.RegisterFile("v1/keytransparency.proto", fileDescriptor_9e925e13aa3e8f7d) }

var fileDescriptor_9e925e13aa3e8f7d = []byte{
	// 1301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xd7, 0xfa, 0x2b, 0xf6, 0x73, 0xbe, 0x34, 0xa4, 0xcd, 0xd6, 0xa5, 0x10, 0x16, 0x68, 0xa3,
	0xa2, 0x7a, 0x13, 0x57, 0xa8, 0xb4, 0x50, 0x55, 0x6a, 0xe8, 0x47, 0x68, 0x22, 0xda, 0x4d, 0xb9,
	0x20, 0xa4, 0xd5, 0xd4, 0x3b, 0x71, 0x46, 0xd9, 0xdd, 0xd9, 0xec, 0xcc, 0x5a, 0x75, 0x42, 0x38,
	0x20, 0x01, 0xbd, 0xf5, 0xd0, 0xff, 0x80, 0x73, 0x4f, 0x70, 0x47, 0xc0, 0xbf, 0xc0, 0x8d, 0x73,
	0xff, 0x10, 0x34, 0x33, 0xbb, 0xf1, 0x47, 0x1c, 0xc7, 0x4e, 0x39, 0xd9, 0xf3, 0xe6, 0xfd, 0xde,
	0xfc, 0xe6, 0xbd, 0xf7, 0xdb, 0x99, 0x01, 0xb3, 0xbd, 0x6a, 0xef, 0x92, 0x8e, 0x88, 0x71, 0xc8,
	0x23, 0x1c, 0x93, 0xb0, 0xd9, 0xa9, 0x47, 0x31, 0x13, 0x0c, 0x5d, 0x68, 0x31, 0xd6, 0xf2, 0x49,
	0x7d, 0x70, 0xb6, 0xbd, 0x5a, 0x7b, 0x57, 0x4f, 0xd9, 0x38, 0xa2, 0x36, 0x0e, 0x43, 0x26, 0xb0,
	0xa0, 0x2c, 0xe4, 0x1a, 0x58, 0xbb, 0x98, 0xce, 0xaa, 0xd1, 0xb3, 0x64, 0xdb, 0x26, 0x41, 0x24,
	0xd2, 0xa8, 0xb5, 0x59, 0x11, 0x53, 0xdf, 0xa7, 0x38, 0x4c, 0xc7, 0xe7, 0xb3, 0xb1, 0x1b, 0xe0,
	0xc8, 0xc5, 0x11, 0x4d, 0xed, 0x20, 0x68, 0xb8, 0x9b, 0x61, 0xda, 0xab, 0x36, 0xf6, 0x02, 0x9a,
	0x62, 0xac, 0x55, 0xa8, 0xac, 0xb1, 0x20, 0xa0, 0x42, 0x10, 0x0f, 0xcd, 0x43, 0x7e, 0x97, 0x74,
	0x4c, 0x63, 0xc9, 0x58, 0x9e, 0x76, 0xe4, 0x5f, 0x84, 0xa0, 0xe0, 0x61, 0x81, 0xcd, 0x9c, 0x32,
	0xa9, 0xff, 0xd6, 0x4b, 0x03, 0xaa, 0xf7, 0x42, 0x11, 0x77, 0xbe, 0x89, 0x3c, 0x2c, 0x08, 0xfa,
	0x02, 0xca, 0x41, 0xa2, 0x69, 0x2b, 0xbf, 0x6a, 0x63, 0xa9, 0x7e, 0xe2, 0x7e, 0xeb, 0x0a, 0xe9,
	0x1c, 0x21, 0xd0, 0x5d, 0xa8, 0x34, 0x33, 0x02, 0x66, 0x5e, 0xc1, 0x3f, 0x1a, 0x01, 0x3f, 0x22,
	0xeb, 0x74, 0x61, 0xd6, 0x1f, 0x06, 0x14, 0x55, 0x5c, 0xb4, 0x00, 0x45, 0x1a, 0x7a, 0xe4, 0xb9,
	0x8a, 0x34, 0xed, 0xe8, 0x01, 0x7a, 0x0f, 0x40, 0x3b, 0x07, 0x24, 0x14, 0x66, 0x49, 0x4d, 0xf5,
	0x58, 0xd0, 0x1a, 0xcc, 0xe1, 0x44, 0xec, 0xb0, 0x98, 0xee, 0x13, 0xcf, 0xdd, 0x25, 0x1d, 0x6e,
	0x4e, 0x29, 0x26, 0xb5, 0x8c, 0x49, 0x33, 0xee, 0x44, 0x82, 0xd5, 0x55, 0x22, 0x1f, 0x91, 0x0e,
	0x27, 0xc2, 0x99, 0xed, 0x42, 0xa4, 0x05, 0xd5, 0xa0, 0x1c, 0xc5, 0xa4, 0x4d, 0x59, 0xc2, 0xcd,
	0xb2, 0x5a, 0xe2, 0x68, 0x2c, 0x09, 0x70, 0xda, 0x0a, 0xb1, 0x48, 0x62, 0xc2, 0xcd, 0xdc, 0x52,
	0x5e, 0x12, 0xe8, 0x5a, 0xac, 0x17, 0x06, 0xcc, 0x6c, 0xa6, 0x19, 0x79, 0x1c, 0x33, 0xb6, 0xdd,
	0x97, 0x54, 0x63, 0xe2, 0xa4, 0xde, 0x04, 0xf0, 0x09, 0xde, 0x76, 0x23, 0x19, 0x2b, 0x2d, 0x4a,
	0xad, 0x7e, 0xd4, 0x2e, 0x9b, 0x38, 0xda, 0x20, 0x78, 0x7b, 0x3d, 0x6c, 0xfa, 0x09, 0xa7, 0x2c,
	0x74, 0x2a, 0xd2, 0x5b, 0x2d, 0x6c, 0x7d, 0x0d, 0xb3, 0x9b, 0x38, 0x8a, 0x48, 0xbc, 0x49, 0x04,
	0x96, 0xf5, 0x46, 0xb7, 0xe1, 0xe2, 0x0e, 0x6d, 0xed, 0x10, 0x2e, 0xdc, 0xed, 0xc4, 0xf7, 0x3b,
	0x6e, 0x93, 0x05, 0x91, 0x4f, 0x04, 0xf1, 0x5c, 0x4e, 0xf6, 0x14, 0xbb, 0xbc, 0x63, 0xa6, 0x2e,
	0xf7, 0xa5, 0xc7, 0x5a, 0xe6, 0xb0, 0x45, 0xf6, 0xac, 0x9f, 0x0d, 0x98, 0x7b, 0x40, 0x84, 0xa6,
	0x48, 0xf6, 0x12, 0xc2, 0x05, 0xba, 0x08, 0x15, 0x8f, 0x05, 0x98, 0x86, 0x2e, 0xf5, 0xcc, 0xc2,
	0x92, 0xb1, 0x5c, 0x71, 0xca, 0xda, 0xb0, 0xee, 0xa1, 0x45, 0x98, 0x4a, 0x38, 0x89, 0xe5, 0x94,
	0xa1, 0xa6, 0x4a, 0x72, 0xb8, 0xee, 0xa1, 0x73, 0x50, 0xc2, 0x51, 0x24, 0xed, 0x39, 0x65, 0x2f,
	0xe2, 0x28, 0x5a, 0xf7, 0xd0, 0x65, 0x98, 0xdb, 0xa6, 0x31, 0x17, 0xae, 0x88, 0x09, 0x71, 0x39,
	0xdd, 0x27, 0xaa, 0xfa, 0x79, 0x67, 0x46, 0x99, 0x9f, 0xc6, 0x84, 0x6c, 0xd1, 0x7d, 0x62, 0xbd,
	0xc9, 0xc1, 0x7c, 0x97, 0x08, 0x8f, 0x58, 0xc8, 0x89, 0x64, 0xd2, 0x8e, 0xb3, 0x44, 0xe9, 0xc6,
	0x2f, 0xb7, 0x63, 0x9d, 0x8b, 0xfe, 0xde, 0xcc, 0x9d, 0xa9, 0x37, 0x07, 0x4a, 0x91, 0x9f, 0xa0,
	0x14, 0xa8, 0x01, 0x65, 0x29, 0xe4, 0x98, 0x31, 0xa1, 0x92, 0x54, 0x6d, 0x2c, 0x76, 0x81, 0x5b,
	0xb4, 0x15, 0x12, 0x6f, 0x13, 0x47, 0x0e, 0x63, 0xc2, 0x99, 0x0a, 0xf4, 0x1f, 0x89, 0xf1, 0x59,
	0x4b, 0x63, 0x8a, 0xc3, 0x31, 0x1b, 0xac, 0xa5, 0x31, 0xbe, 0xfe, 0x83, 0xae, 0xc0, 0x9c, 0xc4,
	0x34, 0x59, 0xc8, 0x29, 0x17, 0x72, 0x37, 0x66, 0x49, 0xb5, 0xe8, 0xac, 0xcf, 0x5a, 0x6b, 0x5d,
	0x2b, 0xfa, 0x10, 0x66, 0xa4, 0x23, 0xcd, 0xc8, 0x9a, 0x53, 0xca, 0x6d, 0xda, 0x67, 0xad, 0xa3,
	0x0d, 0x58, 0x7f, 0x19, 0xb0, 0xb8, 0x41, 0xb9, 0xce, 0xf3, 0x43, 0xca, 0x05, 0x3b, 0xa1, 0xee,
	0xa5, 0x71, 0xeb, 0xbe, 0x00, 0x45, 0x2e, 0x70, 0x2c, 0x54, 0x09, 0xf2, 0x8e, 0x1e, 0xc8, 0x58,
	0x11, 0x6e, 0xf5, 0x14, 0xbc, 0xe8, 0x94, 0xa5, 0x41, 0xd6, 0xba, 0xa7, 0x55, 0x0a, 0xa7, 0xb4,
	0x4a, 0x71, 0x58, 0xab, 0xfc, 0x00, 0xe6, 0xf1, 0x2d, 0xa4, 0x1d, 0xb3, 0x06, 0xa5, 0x36, 0xf6,
	0x13, 0xc2, 0x4d, 0x63, 0x29, 0xbf, 0x5c, 0x6d, 0x7c, 0x32, 0xa2, 0x23, 0x06, 0xdb, 0xcd, 0x49,
	0xa1, 0xe8, 0x12, 0x40, 0x48, 0x9e, 0x0b, 0xb7, 0x77, 0x5f, 0x15, 0x69, 0xd9, 0x92, 0x06, 0xeb,
	0x37, 0x03, 0x90, 0xfe, 0xba, 0x9e, 0x2c, 0x9b, 0xe2, 0x5b, 0xca, 0x66, 0x1d, 0xa6, 0x89, 0x0c,
	0xee, 0x26, 0x6a, 0xa1, 0xb4, 0xc3, 0x2e, 0x9f, 0xf6, 0x95, 0xd1, 0xb4, 0x9c, 0x2a, 0xe9, 0x0e,
	0xbe, 0x2a, 0x94, 0xf3, 0xf3, 0x05, 0xcb, 0xd7, 0x3a, 0x8f, 0x58, 0x73, 0x67, 0x2c, 0xc2, 0x0b,
	0x50, 0x24, 0xd2, 0x39, 0xfd, 0x82, 0xe8, 0xc1, 0xb0, 0x12, 0xe5, 0x86, 0x95, 0xe8, 0x3b, 0x38,
	0xf7, 0x80, 0x88, 0x0d, 0x2c, 0x08, 0x1f, 0xb1, 0xa6, 0x31, 0xb0, 0xe6, 0xb8, 0xd1, 0xff, 0x95,
	0x27, 0x8a, 0xe2, 0x33, 0x32, 0x5c, 0xaf, 0x42, 0x73, 0x67, 0x50, 0x68, 0xfe, 0xec, 0x0a, 0x2d,
	0x8c, 0xa7, 0xd0, 0xe2, 0x10, 0x85, 0xfe, 0x64, 0xc0, 0x82, 0x6c, 0xef, 0xec, 0xc4, 0xe1, 0x6f,
	0x51, 0xae, 0x4b, 0x00, 0x4a, 0x85, 0x82, 0xed, 0x92, 0x50, 0xed, 0xa7, 0xe2, 0x28, 0x5d, 0x3e,
	0x95, 0x86, 0x7e, 0x91, 0x16, 0xfa, 0x45, 0x6a, 0xfd, 0x62, 0xc0, 0xb9, 0x01, 0x1e, 0xa9, 0xc6,
	0xee, 0x43, 0x25, 0x3b, 0xcb, 0xb8, 0xfa, 0x16, 0x55, 0x1b, 0xcb, 0x23, 0x1a, 0xb3, 0xef, 0xe8,
	0x74, 0xba, 0x50, 0x59, 0x6e, 0x25, 0xb3, 0x1e, 0x8a, 0x53, 0x8a, 0xe2, 0x8c, 0x34, 0x3f, 0xce,
	0x68, 0x36, 0xfe, 0xac, 0xc2, 0xdc, 0x23, 0xd2, 0x79, 0xda, 0x13, 0x17, 0x7d, 0x0f, 0x95, 0x07,
	0x44, 0x7c, 0xa9, 0xb6, 0x8f, 0x4e, 0x11, 0xb9, 0xf6, 0x4a, 0xd3, 0x58, 0xfb, 0x60, 0x84, 0xb3,
	0xf6, 0xb4, 0xde, 0xff, 0xf1, 0x9f, 0x37, 0xaf, 0x72, 0x17, 0xd0, 0xa2, 0xdd, 0x5e, 0xb5, 0x75,
	0x8a, 0xb9, 0x7d, 0x70, 0x94, 0xfc, 0x43, 0xf4, 0xc2, 0x80, 0x72, 0xa6, 0x26, 0x74, 0xf5, 0x94,
	0x4f, 0x4c, 0x4f, 0xfb, 0xd7, 0x46, 0x5e, 0x13, 0xa4, 0xa3, 0x55, 0x57, 0x6b, 0x2f, 0xa3, 0xcb,
	0x27, 0xac, 0x6d, 0xab, 0xca, 0x72, 0xfb, 0x40, 0xfd, 0x1e, 0xa2, 0x57, 0x06, 0xcc, 0xf6, 0x4b,
	0x0d, 0xad, 0x8c, 0x26, 0x74, 0x5c, 0x95, 0x63, 0xd0, 0xba, 0xa6, 0x68, 0x5d, 0x41, 0x1f, 0x8f,
	0xa6, 0x75, 0xcb, 0x57, 0xc1, 0xd1, 0x4b, 0xcd, 0x4a, 0x61, 0xb7, 0x44, 0x4c, 0x70, 0xf0, 0x3f,
	0xa7, 0x69, 0x5c, 0x3e, 0x5c, 0x2d, 0xbe, 0x62, 0xa0, 0xd7, 0x06, 0xcc, 0xf4, 0xb5, 0x33, 0xb2,
	0x47, 0x2c, 0x32, 0x4c, 0x80, 0xb5, 0x95, 0xf1, 0x01, 0x5a, 0x29, 0xd6, 0x67, 0x8a, 0x65, 0x03,
	0xad, 0x8c, 0x57, 0x4c, 0xbb, 0xab, 0x8d, 0xdf, 0x0d, 0x78, 0xa7, 0x2f, 0x66, 0x9a, 0xc5, 0x89,
	0x49, 0x8f, 0xad, 0x4c, 0xeb, 0x8e, 0x22, 0x7b, 0x13, 0xdd, 0x98, 0x94, 0x6c, 0x37, 0xc9, 0xbf,
	0xa6, 0xba, 0x50, 0xb7, 0xfd, 0xab, 0x63, 0x1d, 0xbd, 0x9a, 0xe5, 0x24, 0xc7, 0xb4, 0x75, 0x5b,
	0x11, 0xbd, 0x81, 0x3e, 0x3d, 0x89, 0x28, 0x8e, 0x22, 0x6e, 0x1f, 0xe8, 0x63, 0xf5, 0xd0, 0x96,
	0x07, 0x2d, 0xb7, 0x0f, 0xd2, 0xe3, 0xf7, 0x10, 0xfd, 0x6d, 0xc0, 0xfc, 0xe0, 0xfd, 0x01, 0x35,
	0x4e, 0xc9, 0xeb, 0x90, 0xfb, 0x52, 0xed, 0xfa, 0x44, 0x98, 0x94, 0xfc, 0x3d, 0x45, 0xfe, 0x0e,
	0xba, 0x7d, 0x26, 0xf2, 0xf6, 0x4e, 0xca, 0xf7, 0xb5, 0x01, 0xf3, 0x4f, 0x12, 0x92, 0x90, 0xde,
	0xb7, 0xde, 0xb5, 0x11, 0x84, 0x8e, 0x5f, 0x58, 0x6a, 0xe7, 0x33, 0xf7, 0xec, 0xfd, 0x5a, 0xbf,
	0x27, 0xdf, 0xaf, 0xd6, 0x13, 0x45, 0xf1, 0x91, 0xf5, 0xf9, 0x99, 0x28, 0xde, 0xda, 0x93, 0xb4,
	0x6e, 0xf5, 0x5d, 0x5f, 0xee, 0x3e, 0xfc, 0xf6, 0x7e, 0x8b, 0x8a, 0x9d, 0xe4, 0x59, 0xbd, 0xc9,
	0x02, 0x3b, 0x7d, 0x36, 0x0f, 0xb0, 0xb4, 0x9b, 0x2c, 0xd6, 0x2f, 0xed, 0xe3, 0x2f, 0x75, 0xb7,
	0xc5, 0x5c, 0xcd, 0xb2, 0xa4, 0x7e, 0xae, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x04, 0x3b, 0x6a,
	0x19, 0xcf, 0x0f, 0x00, 0x00,
}
