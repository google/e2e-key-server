// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.1
// source: v1/keytransparency.proto

// Key Transparency
//
// The Key Transparency API consists of a map of user names to public
// keys. Each user name also has a history of public keys that have been
// associated with it.

package keytransparency_go_proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	trillian "github.com/google/trillian"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Committed represents the data committed to in a cryptographic commitment.
// commitment = HMAC_SHA512_256(key, data)
type Committed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the 16 byte random commitment key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// data is the data being committed to.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Committed) Reset() {
	*x = Committed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Committed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Committed) ProtoMessage() {}

func (x *Committed) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Committed.ProtoReflect.Descriptor instead.
func (*Committed) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{0}
}

func (x *Committed) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Committed) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// EntryUpdate contains the user entry update(s).
// EntryUpdate will be placed in a Log of mutations.
type EntryUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_id specifies the id for the user whose profile is being updated.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// mutation authorizes the change to entry.
	Mutation *SignedEntry `protobuf:"bytes,2,opt,name=mutation,proto3" json:"mutation,omitempty"`
	// committed contains the data committed to in mutation.commitment.
	Committed *Committed `protobuf:"bytes,3,opt,name=committed,proto3" json:"committed,omitempty"`
}

func (x *EntryUpdate) Reset() {
	*x = EntryUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryUpdate) ProtoMessage() {}

func (x *EntryUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryUpdate.ProtoReflect.Descriptor instead.
func (*EntryUpdate) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{1}
}

func (x *EntryUpdate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EntryUpdate) GetMutation() *SignedEntry {
	if x != nil {
		return x.Mutation
	}
	return nil
}

func (x *EntryUpdate) GetCommitted() *Committed {
	if x != nil {
		return x.Committed
	}
	return nil
}

// Entry is a signed change to a map entry.
// Entry contains a commitment to profile and a set of authorized update keys.
// Entry is placed in the verifiable map as leaf data.
type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index is the location of this leaf in the sparse merkle tree.
	Index []byte `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	// commitment is a cryptographic commitment to arbitrary data.
	Commitment []byte `protobuf:"bytes,6,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// authorized_keys is the tink keyset that validates the signatures on the next entry.
	AuthorizedKeyset []byte `protobuf:"bytes,9,opt,name=authorized_keyset,json=authorizedKeyset,proto3" json:"authorized_keyset,omitempty"`
	// previous contains the SHA256 hash of SignedEntry.Entry the last time it was modified.
	Previous []byte `protobuf:"bytes,8,opt,name=previous,proto3" json:"previous,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{2}
}

func (x *Entry) GetIndex() []byte {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Entry) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *Entry) GetAuthorizedKeyset() []byte {
	if x != nil {
		return x.AuthorizedKeyset
	}
	return nil
}

func (x *Entry) GetPrevious() []byte {
	if x != nil {
		return x.Previous
	}
	return nil
}

// SignedEntry is a cryptographically signed Entry.
// SignedEntry will be storead as a trillian.Map leaf.
type SignedEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// entry contains a serialized Entry.
	Entry []byte `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	// signatures on entry. Must be signed by keys from both previous and
	// current revisions. The first proves ownership of new revision key, and the
	// second proves that the correct owner is making this change.
	// The signature scheme is specified by the authorized_keys tink.Keyset.
	Signatures [][]byte `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SignedEntry) Reset() {
	*x = SignedEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedEntry) ProtoMessage() {}

func (x *SignedEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedEntry.ProtoReflect.Descriptor instead.
func (*SignedEntry) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{3}
}

func (x *SignedEntry) GetEntry() []byte {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *SignedEntry) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// MutationProof contains the information necessary to compute the new leaf
// value. It contains a) the old leaf value with it's inclusion proof and b) the
// mutation. The new leaf value is computed via:
//       Mutate(leaf_value, mutation)
type MutationProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mutation contains the information needed to modify the old leaf.
	// The format of a mutation is specific to the particular Mutate function
	// being used.
	Mutation *SignedEntry `protobuf:"bytes,1,opt,name=mutation,proto3" json:"mutation,omitempty"`
	// leaf_proof contains the leaf and its inclusion proof for a particular map
	// revision.
	LeafProof *trillian.MapLeafInclusion `protobuf:"bytes,2,opt,name=leaf_proof,json=leafProof,proto3" json:"leaf_proof,omitempty"`
}

func (x *MutationProof) Reset() {
	*x = MutationProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutationProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationProof) ProtoMessage() {}

func (x *MutationProof) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationProof.ProtoReflect.Descriptor instead.
func (*MutationProof) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{4}
}

func (x *MutationProof) GetMutation() *SignedEntry {
	if x != nil {
		return x.Mutation
	}
	return nil
}

func (x *MutationProof) GetLeafProof() *trillian.MapLeafInclusion {
	if x != nil {
		return x.LeafProof
	}
	return nil
}

// MapperMetadata tracks the mutations that have been mapped so far. It is
// embedded in the Trillian SignedMapHead.
type MapperMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestFullyCompletedSeq int64 `protobuf:"varint,1,opt,name=highest_fully_completed_seq,json=highestFullyCompletedSeq,proto3" json:"highest_fully_completed_seq,omitempty"`
}

func (x *MapperMetadata) Reset() {
	*x = MapperMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperMetadata) ProtoMessage() {}

func (x *MapperMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperMetadata.ProtoReflect.Descriptor instead.
func (*MapperMetadata) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{5}
}

func (x *MapperMetadata) GetHighestFullyCompletedSeq() int64 {
	if x != nil {
		return x.HighestFullyCompletedSeq
	}
	return 0
}

// Gets the leaf entry for a user.
type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id identifies the directory in which the user lives.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_id is the user identifier, the format for which is defined by the
	// application.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// last_verified is the last log root the client verified.
	// Omitting this field will omit the log consistency proof from the response.
	LastVerified *LogRootRequest `protobuf:"bytes,4,opt,name=last_verified,json=lastVerified,proto3" json:"last_verified,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *GetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserRequest) GetLastVerified() *LogRootRequest {
	if x != nil {
		return x.LastVerified
	}
	return nil
}

// Leaf entry for a user.
type MapLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vrf_proof is the proof for the VRF on user_id.
	VrfProof []byte `protobuf:"bytes,1,opt,name=vrf_proof,json=vrfProof,proto3" json:"vrf_proof,omitempty"`
	// map_inclusion is an inclusion proof for the map leaf in an accompanying
	// trillian.SignedMapRoot. If the leaf is non-empty, its leaf.leaf_value
	// stores a serialized Entry proto.
	MapInclusion *trillian.MapLeafInclusion `protobuf:"bytes,2,opt,name=map_inclusion,json=mapInclusion,proto3" json:"map_inclusion,omitempty"`
	// committed contains the data and nonce used to make a cryptographic
	// commitment, which is stored in the commitment field of the serialized Entry
	// proto from map_inclusion.
	// Note: committed can also be found serialized in
	// map_inclusion.leaf.extra_data.
	Committed *Committed `protobuf:"bytes,3,opt,name=committed,proto3" json:"committed,omitempty"`
}

func (x *MapLeaf) Reset() {
	*x = MapLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapLeaf) ProtoMessage() {}

func (x *MapLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapLeaf.ProtoReflect.Descriptor instead.
func (*MapLeaf) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{7}
}

func (x *MapLeaf) GetVrfProof() []byte {
	if x != nil {
		return x.VrfProof
	}
	return nil
}

func (x *MapLeaf) GetMapInclusion() *trillian.MapLeafInclusion {
	if x != nil {
		return x.MapInclusion
	}
	return nil
}

func (x *MapLeaf) GetCommitted() *Committed {
	if x != nil {
		return x.Committed
	}
	return nil
}

// Contains the leaf entry for a user at the most recently published revision.
type GetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// revision is the most recently published revision.
	Revision *Revision `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// leaf is the leaf entry for the requested user.
	Leaf *MapLeaf `protobuf:"bytes,2,opt,name=leaf,proto3" json:"leaf,omitempty"`
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserResponse) GetRevision() *Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *GetUserResponse) GetLeaf() *MapLeaf {
	if x != nil {
		return x.Leaf
	}
	return nil
}

// BatchGetUserRequest contains multiple user_ids to fetch.
type BatchGetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id identifies the directory in which the users live.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_ids are the user identifiers, the format for which is defined by the
	// application.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// last_verified is the last log root the client verified.
	// Omitting this field will omit the log consistency proof from the response.
	LastVerified *LogRootRequest `protobuf:"bytes,4,opt,name=last_verified,json=lastVerified,proto3" json:"last_verified,omitempty"`
}

func (x *BatchGetUserRequest) Reset() {
	*x = BatchGetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserRequest) ProtoMessage() {}

func (x *BatchGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserRequest.ProtoReflect.Descriptor instead.
func (*BatchGetUserRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{9}
}

func (x *BatchGetUserRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *BatchGetUserRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *BatchGetUserRequest) GetLastVerified() *LogRootRequest {
	if x != nil {
		return x.LastVerified
	}
	return nil
}

// BatchGetUserIndexRequest identifies a set of users.
type BatchGetUserIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id identifies the directory in which the users live.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_ids are the user identifiers
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *BatchGetUserIndexRequest) Reset() {
	*x = BatchGetUserIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserIndexRequest) ProtoMessage() {}

func (x *BatchGetUserIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserIndexRequest.ProtoReflect.Descriptor instead.
func (*BatchGetUserIndexRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{10}
}

func (x *BatchGetUserIndexRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *BatchGetUserIndexRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// BatchGetUserIndexRequest identifies a single user.
type BatchGetUserIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proofs is a map from user_id to its VRF proof.
	// Clients get the index by verifying the VRF proof.
	Proofs map[string][]byte `protobuf:"bytes,1,rep,name=proofs,proto3" json:"proofs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetUserIndexResponse) Reset() {
	*x = BatchGetUserIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserIndexResponse) ProtoMessage() {}

func (x *BatchGetUserIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserIndexResponse.ProtoReflect.Descriptor instead.
func (*BatchGetUserIndexResponse) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{11}
}

func (x *BatchGetUserIndexResponse) GetProofs() map[string][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

// BatchGetUserResponse contains the leaf entries for a set of users at the most
// recently published revision.
type BatchGetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// revision is the most recently published revision.
	Revision *Revision `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// map_leaves_by_user_id is a map from user_id to the map leaf at the most
	// recently published revision.
	MapLeavesByUserId map[string]*MapLeaf `protobuf:"bytes,2,rep,name=map_leaves_by_user_id,json=mapLeavesByUserId,proto3" json:"map_leaves_by_user_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetUserResponse) Reset() {
	*x = BatchGetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserResponse) ProtoMessage() {}

func (x *BatchGetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserResponse.ProtoReflect.Descriptor instead.
func (*BatchGetUserResponse) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{12}
}

func (x *BatchGetUserResponse) GetRevision() *Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *BatchGetUserResponse) GetMapLeavesByUserId() map[string]*MapLeaf {
	if x != nil {
		return x.MapLeavesByUserId
	}
	return nil
}

// ListEntryHistoryRequest gets a list of historical keys for a user.
type ListEntryHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id identifies the directory in which the user lives.
	DirectoryId string `protobuf:"bytes,6,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_id is the user identifier.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// start is the starting revision.
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// page_size is the maximum number of entries to return.
	// The server can return fewer entries than requested.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// last_verified is the last log root the client verified.
	// Omitting this field will omit the log consistency proof from the response.
	LastVerified *LogRootRequest `protobuf:"bytes,7,opt,name=last_verified,json=lastVerified,proto3" json:"last_verified,omitempty"`
}

func (x *ListEntryHistoryRequest) Reset() {
	*x = ListEntryHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntryHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntryHistoryRequest) ProtoMessage() {}

func (x *ListEntryHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntryHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListEntryHistoryRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{13}
}

func (x *ListEntryHistoryRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *ListEntryHistoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListEntryHistoryRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ListEntryHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEntryHistoryRequest) GetLastVerified() *LogRootRequest {
	if x != nil {
		return x.LastVerified
	}
	return nil
}

// ListEntryHistoryResponse requests a paginated history of keys for a user.
type ListEntryHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values represents the list of keys this user_id has contained over time.
	Values []*GetUserResponse `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// next_start is the next page token to query for pagination.
	// next_start is 0 when there are no more results to fetch.
	NextStart int64 `protobuf:"varint,2,opt,name=next_start,json=nextStart,proto3" json:"next_start,omitempty"`
}

func (x *ListEntryHistoryResponse) Reset() {
	*x = ListEntryHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntryHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntryHistoryResponse) ProtoMessage() {}

func (x *ListEntryHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntryHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListEntryHistoryResponse) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{14}
}

func (x *ListEntryHistoryResponse) GetValues() []*GetUserResponse {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ListEntryHistoryResponse) GetNextStart() int64 {
	if x != nil {
		return x.NextStart
	}
	return 0
}

// ListUserRevisionsRequest gets a list of historical keys for a user.
type ListUserRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id identifies the directory in which the user lives.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_id is the user identifier.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// start_revision is the starting epoch.
	StartRevision int64 `protobuf:"varint,3,opt,name=start_revision,json=startRevision,proto3" json:"start_revision,omitempty"`
	// end_revision is the ending epoch.
	EndRevision int64 `protobuf:"varint,4,opt,name=end_revision,json=endRevision,proto3" json:"end_revision,omitempty"`
	// page_size is the maximum number of entries to return. If page_size is
	// unspecified, the server will decide how to paginate results.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is a continuation token for paginating through results.
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// last_verified is the last log root the client verified.
	// Omitting this field will omit the log consistency proof from the response.
	LastVerified *LogRootRequest `protobuf:"bytes,8,opt,name=last_verified,json=lastVerified,proto3" json:"last_verified,omitempty"`
}

func (x *ListUserRevisionsRequest) Reset() {
	*x = ListUserRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserRevisionsRequest) ProtoMessage() {}

func (x *ListUserRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserRevisionsRequest.ProtoReflect.Descriptor instead.
func (*ListUserRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{15}
}

func (x *ListUserRevisionsRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *ListUserRevisionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListUserRevisionsRequest) GetStartRevision() int64 {
	if x != nil {
		return x.StartRevision
	}
	return 0
}

func (x *ListUserRevisionsRequest) GetEndRevision() int64 {
	if x != nil {
		return x.EndRevision
	}
	return 0
}

func (x *ListUserRevisionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUserRevisionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListUserRevisionsRequest) GetLastVerified() *LogRootRequest {
	if x != nil {
		return x.LastVerified
	}
	return nil
}

// MapRevision contains a map leaf at a speific revision.
type MapRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map_root contains the map root and its inclusion in the log.
	MapRoot *MapRoot `protobuf:"bytes,1,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	// map_leaf contains a leaf and its inclusion proof to map_root.
	MapLeaf *MapLeaf `protobuf:"bytes,2,opt,name=map_leaf,json=mapLeaf,proto3" json:"map_leaf,omitempty"`
}

func (x *MapRevision) Reset() {
	*x = MapRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRevision) ProtoMessage() {}

func (x *MapRevision) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRevision.ProtoReflect.Descriptor instead.
func (*MapRevision) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{16}
}

func (x *MapRevision) GetMapRoot() *MapRoot {
	if x != nil {
		return x.MapRoot
	}
	return nil
}

func (x *MapRevision) GetMapLeaf() *MapLeaf {
	if x != nil {
		return x.MapLeaf
	}
	return nil
}

// ListUserRevisionsResponse requests a paginated history of keys for a user.
type ListUserRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// latest_log_root contains the latest log root and its consistency proof.
	LatestLogRoot *LogRoot `protobuf:"bytes,1,opt,name=latest_log_root,json=latestLogRoot,proto3" json:"latest_log_root,omitempty"`
	// map_revisions represents the list of keys this user_id has contained over
	// time. At most page_size results will be returned.
	MapRevisions []*MapRevision `protobuf:"bytes,2,rep,name=map_revisions,json=mapRevisions,proto3" json:"map_revisions,omitempty"`
	// next_page_token is a pagination token which will be set if more than
	// page_size results are available. Clients can pass this value as
	// the page_token in the next request in order to continue pagination.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListUserRevisionsResponse) Reset() {
	*x = ListUserRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserRevisionsResponse) ProtoMessage() {}

func (x *ListUserRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserRevisionsResponse.ProtoReflect.Descriptor instead.
func (*ListUserRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{17}
}

func (x *ListUserRevisionsResponse) GetLatestLogRoot() *LogRoot {
	if x != nil {
		return x.LatestLogRoot
	}
	return nil
}

func (x *ListUserRevisionsResponse) GetMapRevisions() []*MapRevision {
	if x != nil {
		return x.MapRevisions
	}
	return nil
}

func (x *ListUserRevisionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// BatchListUserRevisionsRequest contains a list of users and a range of revisions.
type BatchListUserRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id identifies the directory in which the users live.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// user_ids are the user identifiers.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// start_revision is the starting revision.
	StartRevision int64 `protobuf:"varint,3,opt,name=start_revision,json=startRevision,proto3" json:"start_revision,omitempty"`
	// end_revision is the ending epoch.
	EndRevision int64 `protobuf:"varint,4,opt,name=end_revision,json=endRevision,proto3" json:"end_revision,omitempty"`
	// page_size is the maximum number of entries to return. If page_size is
	// unspecified, the server will decide how to paginate results.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is a continuation token for paginating through results.
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// last_verified is the last log root the client verified.
	// Omitting this field will omit the log consistency proof from the response.
	LastVerified *LogRootRequest `protobuf:"bytes,8,opt,name=last_verified,json=lastVerified,proto3" json:"last_verified,omitempty"`
}

func (x *BatchListUserRevisionsRequest) Reset() {
	*x = BatchListUserRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchListUserRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchListUserRevisionsRequest) ProtoMessage() {}

func (x *BatchListUserRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchListUserRevisionsRequest.ProtoReflect.Descriptor instead.
func (*BatchListUserRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{18}
}

func (x *BatchListUserRevisionsRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *BatchListUserRevisionsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *BatchListUserRevisionsRequest) GetStartRevision() int64 {
	if x != nil {
		return x.StartRevision
	}
	return 0
}

func (x *BatchListUserRevisionsRequest) GetEndRevision() int64 {
	if x != nil {
		return x.EndRevision
	}
	return 0
}

func (x *BatchListUserRevisionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *BatchListUserRevisionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *BatchListUserRevisionsRequest) GetLastVerified() *LogRootRequest {
	if x != nil {
		return x.LastVerified
	}
	return nil
}

// BatchMapRevision contains a set of map leaves at a speific revision.
type BatchMapRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map_root contains the map root and its inclusion in the log.
	MapRoot *MapRoot `protobuf:"bytes,1,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	// map_leaves_by_user_id contains a mapping from user_id to the map leaf at
	// this revision.
	MapLeavesByUserId map[string]*MapLeaf `protobuf:"bytes,2,rep,name=map_leaves_by_user_id,json=mapLeavesByUserId,proto3" json:"map_leaves_by_user_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchMapRevision) Reset() {
	*x = BatchMapRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMapRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMapRevision) ProtoMessage() {}

func (x *BatchMapRevision) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMapRevision.ProtoReflect.Descriptor instead.
func (*BatchMapRevision) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{19}
}

func (x *BatchMapRevision) GetMapRoot() *MapRoot {
	if x != nil {
		return x.MapRoot
	}
	return nil
}

func (x *BatchMapRevision) GetMapLeavesByUserId() map[string]*MapLeaf {
	if x != nil {
		return x.MapLeavesByUserId
	}
	return nil
}

// BatchListUserRevisionsResponse contains multiple map leaves across multiple revisions.
type BatchListUserRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// latest_log_root contains the latest log root and its consistency proof.
	LatestLogRoot *LogRoot `protobuf:"bytes,1,opt,name=latest_log_root,json=latestLogRoot,proto3" json:"latest_log_root,omitempty"`
	// map_revisions is a list of map revisions.  At most page_size revisions will be returned.
	MapRevisions []*BatchMapRevision `protobuf:"bytes,2,rep,name=map_revisions,json=mapRevisions,proto3" json:"map_revisions,omitempty"`
}

func (x *BatchListUserRevisionsResponse) Reset() {
	*x = BatchListUserRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchListUserRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchListUserRevisionsResponse) ProtoMessage() {}

func (x *BatchListUserRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchListUserRevisionsResponse.ProtoReflect.Descriptor instead.
func (*BatchListUserRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{20}
}

func (x *BatchListUserRevisionsResponse) GetLatestLogRoot() *LogRoot {
	if x != nil {
		return x.LatestLogRoot
	}
	return nil
}

func (x *BatchListUserRevisionsResponse) GetMapRevisions() []*BatchMapRevision {
	if x != nil {
		return x.MapRevisions
	}
	return nil
}

// UpdateEntryRequest updates a user's profile.
type UpdateEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id identifies the directory in which the user lives.
	DirectoryId string `protobuf:"bytes,5,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// entry_update contains the user submitted update.
	EntryUpdate *EntryUpdate `protobuf:"bytes,4,opt,name=entry_update,json=entryUpdate,proto3" json:"entry_update,omitempty"`
}

func (x *UpdateEntryRequest) Reset() {
	*x = UpdateEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntryRequest) ProtoMessage() {}

func (x *UpdateEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntryRequest.ProtoReflect.Descriptor instead.
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateEntryRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *UpdateEntryRequest) GetEntryUpdate() *EntryUpdate {
	if x != nil {
		return x.EntryUpdate
	}
	return nil
}

// BatchQueueUserUpdateRequest enqueues multiple changes to user profiles.
type BatchQueueUserUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id identifies the directory in which the users live.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// updates contains user updates.
	Updates []*EntryUpdate `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *BatchQueueUserUpdateRequest) Reset() {
	*x = BatchQueueUserUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueueUserUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueueUserUpdateRequest) ProtoMessage() {}

func (x *BatchQueueUserUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueueUserUpdateRequest.ProtoReflect.Descriptor instead.
func (*BatchQueueUserUpdateRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{22}
}

func (x *BatchQueueUserUpdateRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *BatchQueueUserUpdateRequest) GetUpdates() []*EntryUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// GetRevisionRequest identifies a particular revision.
type GetRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id is the directory for which revisions are being requested.
	DirectoryId string `protobuf:"bytes,5,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// revision specifies the revision number in which mutations will be returned.
	Revision int64 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// last_verified is the last log root the client verified.
	// Omitting this field will omit the log consistency proof from the response.
	LastVerified *LogRootRequest `protobuf:"bytes,4,opt,name=last_verified,json=lastVerified,proto3" json:"last_verified,omitempty"`
}

func (x *GetRevisionRequest) Reset() {
	*x = GetRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevisionRequest) ProtoMessage() {}

func (x *GetRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevisionRequest.ProtoReflect.Descriptor instead.
func (*GetRevisionRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{23}
}

func (x *GetRevisionRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *GetRevisionRequest) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *GetRevisionRequest) GetLastVerified() *LogRootRequest {
	if x != nil {
		return x.LastVerified
	}
	return nil
}

// GetLatestRevisionRequest identifies a particular revision.
type GetLatestRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id is the directory for which revisions are being requested.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// last_verified is the last log root the client verified.
	// Omitting this field will omit the log consistency proof from the response.
	LastVerified *LogRootRequest `protobuf:"bytes,3,opt,name=last_verified,json=lastVerified,proto3" json:"last_verified,omitempty"`
}

func (x *GetLatestRevisionRequest) Reset() {
	*x = GetLatestRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestRevisionRequest) ProtoMessage() {}

func (x *GetLatestRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestRevisionRequest.ProtoReflect.Descriptor instead.
func (*GetLatestRevisionRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{24}
}

func (x *GetLatestRevisionRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *GetLatestRevisionRequest) GetLastVerified() *LogRootRequest {
	if x != nil {
		return x.LastVerified
	}
	return nil
}

// MapRoot contains the map root and its inclusion proof in the log.
type MapRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map_root contains the signed map root for the sparse Merkle Tree.
	MapRoot *trillian.SignedMapRoot `protobuf:"bytes,1,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	// log_inclusion proves that map_root is part of log_root at
	// index=map_root.MapRevision.
	LogInclusion [][]byte `protobuf:"bytes,2,rep,name=log_inclusion,json=logInclusion,proto3" json:"log_inclusion,omitempty"`
}

func (x *MapRoot) Reset() {
	*x = MapRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRoot) ProtoMessage() {}

func (x *MapRoot) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRoot.ProtoReflect.Descriptor instead.
func (*MapRoot) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{25}
}

func (x *MapRoot) GetMapRoot() *trillian.SignedMapRoot {
	if x != nil {
		return x.MapRoot
	}
	return nil
}

func (x *MapRoot) GetLogInclusion() [][]byte {
	if x != nil {
		return x.LogInclusion
	}
	return nil
}

// LogRootRequest contains the information needed to request and verify LogRoot.
type LogRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// root_hash is the root hash of the last log root the client verified.
	RootHash []byte `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	// tree_size is the tree size of the last log root the client verified.
	TreeSize int64 `protobuf:"varint,2,opt,name=tree_size,json=treeSize,proto3" json:"tree_size,omitempty"`
}

func (x *LogRootRequest) Reset() {
	*x = LogRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRootRequest) ProtoMessage() {}

func (x *LogRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRootRequest.ProtoReflect.Descriptor instead.
func (*LogRootRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{26}
}

func (x *LogRootRequest) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *LogRootRequest) GetTreeSize() int64 {
	if x != nil {
		return x.TreeSize
	}
	return 0
}

// LogRoot contains the latest log root and its consistency proof.
type LogRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// log_root is the latest globally consistent log root.
	LogRoot *trillian.SignedLogRoot `protobuf:"bytes,1,opt,name=log_root,json=logRoot,proto3" json:"log_root,omitempty"`
	// log_consistency proves that log_root is consistent with previously seen
	// roots.
	LogConsistency [][]byte `protobuf:"bytes,2,rep,name=log_consistency,json=logConsistency,proto3" json:"log_consistency,omitempty"`
}

func (x *LogRoot) Reset() {
	*x = LogRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRoot) ProtoMessage() {}

func (x *LogRoot) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRoot.ProtoReflect.Descriptor instead.
func (*LogRoot) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{27}
}

func (x *LogRoot) GetLogRoot() *trillian.SignedLogRoot {
	if x != nil {
		return x.LogRoot
	}
	return nil
}

func (x *LogRoot) GetLogConsistency() [][]byte {
	if x != nil {
		return x.LogConsistency
	}
	return nil
}

// Revision represents a snapshot of the entire key directory and
// a diff of what changed between this revision and the previous revision.
type Revision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id is the directory identifier.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// map_root contains the map root and its inclusion in the log.
	MapRoot *MapRoot `protobuf:"bytes,5,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	// latest_log_root contains the most recent log root and its consistency
	// proof to the client's last seen log root.
	LatestLogRoot *LogRoot `protobuf:"bytes,6,opt,name=latest_log_root,json=latestLogRoot,proto3" json:"latest_log_root,omitempty"`
}

func (x *Revision) Reset() {
	*x = Revision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Revision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Revision) ProtoMessage() {}

func (x *Revision) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Revision.ProtoReflect.Descriptor instead.
func (*Revision) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{28}
}

func (x *Revision) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *Revision) GetMapRoot() *MapRoot {
	if x != nil {
		return x.MapRoot
	}
	return nil
}

func (x *Revision) GetLatestLogRoot() *LogRoot {
	if x != nil {
		return x.LatestLogRoot
	}
	return nil
}

// ListMutationsRequest requests the mutations that created a given revision.
type ListMutationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id is the directory identifier.
	DirectoryId string `protobuf:"bytes,5,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// revision specifies the revision number.
	Revision int64 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// page_token defines the starting point for pagination.
	// To request the next page, pass next_page_token from the previous response.
	// To start at the beginning, simply omit page_token from the request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// page_size is the maximum number of mutations to return in a single request.
	// The server may choose a smaller page_size than the one requested.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // TODO(gbelvin): Add field mask.
}

func (x *ListMutationsRequest) Reset() {
	*x = ListMutationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMutationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMutationsRequest) ProtoMessage() {}

func (x *ListMutationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMutationsRequest.ProtoReflect.Descriptor instead.
func (*ListMutationsRequest) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{29}
}

func (x *ListMutationsRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *ListMutationsRequest) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *ListMutationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMutationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// ListMutationsResponse contains the mutations that produced an revision.
type ListMutationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mutations contains the mutation object and the leaf value it operated on.
	Mutations []*MutationProof `protobuf:"bytes,6,rep,name=mutations,proto3" json:"mutations,omitempty"`
	// next_page_token is the next page token to query for pagination.
	// An empty value means there are no more results to fetch.
	NextPageToken string `protobuf:"bytes,7,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMutationsResponse) Reset() {
	*x = ListMutationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_keytransparency_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMutationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMutationsResponse) ProtoMessage() {}

func (x *ListMutationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_keytransparency_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMutationsResponse.ProtoReflect.Descriptor instead.
func (*ListMutationsResponse) Descriptor() ([]byte, []int) {
	return file_v1_keytransparency_proto_rawDescGZIP(), []int{30}
}

func (x *ListMutationsResponse) GetMutations() []*MutationProof {
	if x != nil {
		return x.Mutations
	}
	return nil
}

func (x *ListMutationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_v1_keytransparency_proto protoreflect.FileDescriptor

var file_v1_keytransparency_proto_rawDesc = []byte{
	0x0a, 0x18, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x74, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x74, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a, 0x0b,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0xa4, 0x01, 0x0a,
	0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x22, 0x43, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x2e, 0x4d, 0x61,
	0x70, 0x4c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6c, 0x65, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x4f, 0x0a, 0x0e, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x1b, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x65, 0x71, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22,
	0xab, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x72, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x76, 0x72, 0x66, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x65,
	0x61, 0x66, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0x8a, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70,
	0x4c, 0x65, 0x61, 0x66, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x4e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x58, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0xb0, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbb, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a,
	0x15, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x68, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xe4, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4e, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x7d, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65,
	0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x8b, 0x01, 0x0a,
	0x0b, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08,
	0x6d, 0x61, 0x70, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x6d,
	0x61, 0x70, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x61,
	0x66, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4c, 0x65, 0x61, 0x66, 0x22, 0xdc, 0x01, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb9, 0x02, 0x0a, 0x1d, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x4e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xb1, 0x02, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x61,
	0x70, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x74, 0x0a, 0x15, 0x6d, 0x61, 0x70,
	0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61,
	0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a,
	0x68, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x1e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b,
	0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61,
	0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b,
	0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x62,
	0x0a, 0x07, 0x4d, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x61, 0x70,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72,
	0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x61, 0x70,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x66,
	0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72,
	0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x67,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xca, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f,
	0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65,
	0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x09,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x32, 0xc1, 0x13, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65,
	0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35,
	0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0xa2,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65,
	0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x30, 0x01, 0x12, 0xb9, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b,
	0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f,
	0x12, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xc0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa6, 0x01,
	0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0xba, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12,
	0x32, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0xbb, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0xc3, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x38, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xd1, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22,
	0x37, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb2, 0x01, 0x0a, 0x10,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x22,
	0x41, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x3a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0xa2, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_keytransparency_proto_rawDescOnce sync.Once
	file_v1_keytransparency_proto_rawDescData = file_v1_keytransparency_proto_rawDesc
)

func file_v1_keytransparency_proto_rawDescGZIP() []byte {
	file_v1_keytransparency_proto_rawDescOnce.Do(func() {
		file_v1_keytransparency_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_keytransparency_proto_rawDescData)
	})
	return file_v1_keytransparency_proto_rawDescData
}

var file_v1_keytransparency_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_v1_keytransparency_proto_goTypes = []interface{}{
	(*Committed)(nil),                      // 0: google.keytransparency.v1.Committed
	(*EntryUpdate)(nil),                    // 1: google.keytransparency.v1.EntryUpdate
	(*Entry)(nil),                          // 2: google.keytransparency.v1.Entry
	(*SignedEntry)(nil),                    // 3: google.keytransparency.v1.SignedEntry
	(*MutationProof)(nil),                  // 4: google.keytransparency.v1.MutationProof
	(*MapperMetadata)(nil),                 // 5: google.keytransparency.v1.MapperMetadata
	(*GetUserRequest)(nil),                 // 6: google.keytransparency.v1.GetUserRequest
	(*MapLeaf)(nil),                        // 7: google.keytransparency.v1.MapLeaf
	(*GetUserResponse)(nil),                // 8: google.keytransparency.v1.GetUserResponse
	(*BatchGetUserRequest)(nil),            // 9: google.keytransparency.v1.BatchGetUserRequest
	(*BatchGetUserIndexRequest)(nil),       // 10: google.keytransparency.v1.BatchGetUserIndexRequest
	(*BatchGetUserIndexResponse)(nil),      // 11: google.keytransparency.v1.BatchGetUserIndexResponse
	(*BatchGetUserResponse)(nil),           // 12: google.keytransparency.v1.BatchGetUserResponse
	(*ListEntryHistoryRequest)(nil),        // 13: google.keytransparency.v1.ListEntryHistoryRequest
	(*ListEntryHistoryResponse)(nil),       // 14: google.keytransparency.v1.ListEntryHistoryResponse
	(*ListUserRevisionsRequest)(nil),       // 15: google.keytransparency.v1.ListUserRevisionsRequest
	(*MapRevision)(nil),                    // 16: google.keytransparency.v1.MapRevision
	(*ListUserRevisionsResponse)(nil),      // 17: google.keytransparency.v1.ListUserRevisionsResponse
	(*BatchListUserRevisionsRequest)(nil),  // 18: google.keytransparency.v1.BatchListUserRevisionsRequest
	(*BatchMapRevision)(nil),               // 19: google.keytransparency.v1.BatchMapRevision
	(*BatchListUserRevisionsResponse)(nil), // 20: google.keytransparency.v1.BatchListUserRevisionsResponse
	(*UpdateEntryRequest)(nil),             // 21: google.keytransparency.v1.UpdateEntryRequest
	(*BatchQueueUserUpdateRequest)(nil),    // 22: google.keytransparency.v1.BatchQueueUserUpdateRequest
	(*GetRevisionRequest)(nil),             // 23: google.keytransparency.v1.GetRevisionRequest
	(*GetLatestRevisionRequest)(nil),       // 24: google.keytransparency.v1.GetLatestRevisionRequest
	(*MapRoot)(nil),                        // 25: google.keytransparency.v1.MapRoot
	(*LogRootRequest)(nil),                 // 26: google.keytransparency.v1.LogRootRequest
	(*LogRoot)(nil),                        // 27: google.keytransparency.v1.LogRoot
	(*Revision)(nil),                       // 28: google.keytransparency.v1.Revision
	(*ListMutationsRequest)(nil),           // 29: google.keytransparency.v1.ListMutationsRequest
	(*ListMutationsResponse)(nil),          // 30: google.keytransparency.v1.ListMutationsResponse
	nil,                                    // 31: google.keytransparency.v1.BatchGetUserIndexResponse.ProofsEntry
	nil,                                    // 32: google.keytransparency.v1.BatchGetUserResponse.MapLeavesByUserIdEntry
	nil,                                    // 33: google.keytransparency.v1.BatchMapRevision.MapLeavesByUserIdEntry
	(*trillian.MapLeafInclusion)(nil),      // 34: trillian.MapLeafInclusion
	(*trillian.SignedMapRoot)(nil),         // 35: trillian.SignedMapRoot
	(*trillian.SignedLogRoot)(nil),         // 36: trillian.SignedLogRoot
	(*GetDirectoryRequest)(nil),            // 37: google.keytransparency.v1.GetDirectoryRequest
	(*Directory)(nil),                      // 38: google.keytransparency.v1.Directory
	(*empty.Empty)(nil),                    // 39: google.protobuf.Empty
}
var file_v1_keytransparency_proto_depIdxs = []int32{
	3,  // 0: google.keytransparency.v1.EntryUpdate.mutation:type_name -> google.keytransparency.v1.SignedEntry
	0,  // 1: google.keytransparency.v1.EntryUpdate.committed:type_name -> google.keytransparency.v1.Committed
	3,  // 2: google.keytransparency.v1.MutationProof.mutation:type_name -> google.keytransparency.v1.SignedEntry
	34, // 3: google.keytransparency.v1.MutationProof.leaf_proof:type_name -> trillian.MapLeafInclusion
	26, // 4: google.keytransparency.v1.GetUserRequest.last_verified:type_name -> google.keytransparency.v1.LogRootRequest
	34, // 5: google.keytransparency.v1.MapLeaf.map_inclusion:type_name -> trillian.MapLeafInclusion
	0,  // 6: google.keytransparency.v1.MapLeaf.committed:type_name -> google.keytransparency.v1.Committed
	28, // 7: google.keytransparency.v1.GetUserResponse.revision:type_name -> google.keytransparency.v1.Revision
	7,  // 8: google.keytransparency.v1.GetUserResponse.leaf:type_name -> google.keytransparency.v1.MapLeaf
	26, // 9: google.keytransparency.v1.BatchGetUserRequest.last_verified:type_name -> google.keytransparency.v1.LogRootRequest
	31, // 10: google.keytransparency.v1.BatchGetUserIndexResponse.proofs:type_name -> google.keytransparency.v1.BatchGetUserIndexResponse.ProofsEntry
	28, // 11: google.keytransparency.v1.BatchGetUserResponse.revision:type_name -> google.keytransparency.v1.Revision
	32, // 12: google.keytransparency.v1.BatchGetUserResponse.map_leaves_by_user_id:type_name -> google.keytransparency.v1.BatchGetUserResponse.MapLeavesByUserIdEntry
	26, // 13: google.keytransparency.v1.ListEntryHistoryRequest.last_verified:type_name -> google.keytransparency.v1.LogRootRequest
	8,  // 14: google.keytransparency.v1.ListEntryHistoryResponse.values:type_name -> google.keytransparency.v1.GetUserResponse
	26, // 15: google.keytransparency.v1.ListUserRevisionsRequest.last_verified:type_name -> google.keytransparency.v1.LogRootRequest
	25, // 16: google.keytransparency.v1.MapRevision.map_root:type_name -> google.keytransparency.v1.MapRoot
	7,  // 17: google.keytransparency.v1.MapRevision.map_leaf:type_name -> google.keytransparency.v1.MapLeaf
	27, // 18: google.keytransparency.v1.ListUserRevisionsResponse.latest_log_root:type_name -> google.keytransparency.v1.LogRoot
	16, // 19: google.keytransparency.v1.ListUserRevisionsResponse.map_revisions:type_name -> google.keytransparency.v1.MapRevision
	26, // 20: google.keytransparency.v1.BatchListUserRevisionsRequest.last_verified:type_name -> google.keytransparency.v1.LogRootRequest
	25, // 21: google.keytransparency.v1.BatchMapRevision.map_root:type_name -> google.keytransparency.v1.MapRoot
	33, // 22: google.keytransparency.v1.BatchMapRevision.map_leaves_by_user_id:type_name -> google.keytransparency.v1.BatchMapRevision.MapLeavesByUserIdEntry
	27, // 23: google.keytransparency.v1.BatchListUserRevisionsResponse.latest_log_root:type_name -> google.keytransparency.v1.LogRoot
	19, // 24: google.keytransparency.v1.BatchListUserRevisionsResponse.map_revisions:type_name -> google.keytransparency.v1.BatchMapRevision
	1,  // 25: google.keytransparency.v1.UpdateEntryRequest.entry_update:type_name -> google.keytransparency.v1.EntryUpdate
	1,  // 26: google.keytransparency.v1.BatchQueueUserUpdateRequest.updates:type_name -> google.keytransparency.v1.EntryUpdate
	26, // 27: google.keytransparency.v1.GetRevisionRequest.last_verified:type_name -> google.keytransparency.v1.LogRootRequest
	26, // 28: google.keytransparency.v1.GetLatestRevisionRequest.last_verified:type_name -> google.keytransparency.v1.LogRootRequest
	35, // 29: google.keytransparency.v1.MapRoot.map_root:type_name -> trillian.SignedMapRoot
	36, // 30: google.keytransparency.v1.LogRoot.log_root:type_name -> trillian.SignedLogRoot
	25, // 31: google.keytransparency.v1.Revision.map_root:type_name -> google.keytransparency.v1.MapRoot
	27, // 32: google.keytransparency.v1.Revision.latest_log_root:type_name -> google.keytransparency.v1.LogRoot
	4,  // 33: google.keytransparency.v1.ListMutationsResponse.mutations:type_name -> google.keytransparency.v1.MutationProof
	7,  // 34: google.keytransparency.v1.BatchGetUserResponse.MapLeavesByUserIdEntry.value:type_name -> google.keytransparency.v1.MapLeaf
	7,  // 35: google.keytransparency.v1.BatchMapRevision.MapLeavesByUserIdEntry.value:type_name -> google.keytransparency.v1.MapLeaf
	37, // 36: google.keytransparency.v1.KeyTransparency.GetDirectory:input_type -> google.keytransparency.v1.GetDirectoryRequest
	23, // 37: google.keytransparency.v1.KeyTransparency.GetRevision:input_type -> google.keytransparency.v1.GetRevisionRequest
	24, // 38: google.keytransparency.v1.KeyTransparency.GetLatestRevision:input_type -> google.keytransparency.v1.GetLatestRevisionRequest
	23, // 39: google.keytransparency.v1.KeyTransparency.GetRevisionStream:input_type -> google.keytransparency.v1.GetRevisionRequest
	29, // 40: google.keytransparency.v1.KeyTransparency.ListMutations:input_type -> google.keytransparency.v1.ListMutationsRequest
	29, // 41: google.keytransparency.v1.KeyTransparency.ListMutationsStream:input_type -> google.keytransparency.v1.ListMutationsRequest
	6,  // 42: google.keytransparency.v1.KeyTransparency.GetUser:input_type -> google.keytransparency.v1.GetUserRequest
	9,  // 43: google.keytransparency.v1.KeyTransparency.BatchGetUser:input_type -> google.keytransparency.v1.BatchGetUserRequest
	10, // 44: google.keytransparency.v1.KeyTransparency.BatchGetUserIndex:input_type -> google.keytransparency.v1.BatchGetUserIndexRequest
	13, // 45: google.keytransparency.v1.KeyTransparency.ListEntryHistory:input_type -> google.keytransparency.v1.ListEntryHistoryRequest
	15, // 46: google.keytransparency.v1.KeyTransparency.ListUserRevisions:input_type -> google.keytransparency.v1.ListUserRevisionsRequest
	18, // 47: google.keytransparency.v1.KeyTransparency.BatchListUserRevisions:input_type -> google.keytransparency.v1.BatchListUserRevisionsRequest
	21, // 48: google.keytransparency.v1.KeyTransparency.QueueEntryUpdate:input_type -> google.keytransparency.v1.UpdateEntryRequest
	22, // 49: google.keytransparency.v1.KeyTransparency.BatchQueueUserUpdate:input_type -> google.keytransparency.v1.BatchQueueUserUpdateRequest
	38, // 50: google.keytransparency.v1.KeyTransparency.GetDirectory:output_type -> google.keytransparency.v1.Directory
	28, // 51: google.keytransparency.v1.KeyTransparency.GetRevision:output_type -> google.keytransparency.v1.Revision
	28, // 52: google.keytransparency.v1.KeyTransparency.GetLatestRevision:output_type -> google.keytransparency.v1.Revision
	28, // 53: google.keytransparency.v1.KeyTransparency.GetRevisionStream:output_type -> google.keytransparency.v1.Revision
	30, // 54: google.keytransparency.v1.KeyTransparency.ListMutations:output_type -> google.keytransparency.v1.ListMutationsResponse
	4,  // 55: google.keytransparency.v1.KeyTransparency.ListMutationsStream:output_type -> google.keytransparency.v1.MutationProof
	8,  // 56: google.keytransparency.v1.KeyTransparency.GetUser:output_type -> google.keytransparency.v1.GetUserResponse
	12, // 57: google.keytransparency.v1.KeyTransparency.BatchGetUser:output_type -> google.keytransparency.v1.BatchGetUserResponse
	11, // 58: google.keytransparency.v1.KeyTransparency.BatchGetUserIndex:output_type -> google.keytransparency.v1.BatchGetUserIndexResponse
	14, // 59: google.keytransparency.v1.KeyTransparency.ListEntryHistory:output_type -> google.keytransparency.v1.ListEntryHistoryResponse
	17, // 60: google.keytransparency.v1.KeyTransparency.ListUserRevisions:output_type -> google.keytransparency.v1.ListUserRevisionsResponse
	20, // 61: google.keytransparency.v1.KeyTransparency.BatchListUserRevisions:output_type -> google.keytransparency.v1.BatchListUserRevisionsResponse
	39, // 62: google.keytransparency.v1.KeyTransparency.QueueEntryUpdate:output_type -> google.protobuf.Empty
	39, // 63: google.keytransparency.v1.KeyTransparency.BatchQueueUserUpdate:output_type -> google.protobuf.Empty
	50, // [50:64] is the sub-list for method output_type
	36, // [36:50] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_v1_keytransparency_proto_init() }
func file_v1_keytransparency_proto_init() {
	if File_v1_keytransparency_proto != nil {
		return
	}
	file_v1_admin_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_keytransparency_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Committed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutationProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntryHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntryHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchListUserRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMapRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchListUserRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueueUserUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Revision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMutationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_keytransparency_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMutationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_keytransparency_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_keytransparency_proto_goTypes,
		DependencyIndexes: file_v1_keytransparency_proto_depIdxs,
		MessageInfos:      file_v1_keytransparency_proto_msgTypes,
	}.Build()
	File_v1_keytransparency_proto = out.File
	file_v1_keytransparency_proto_rawDesc = nil
	file_v1_keytransparency_proto_goTypes = nil
	file_v1_keytransparency_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KeyTransparencyClient is the client API for KeyTransparency service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyTransparencyClient interface {
	// GetDirectory returns the information needed to verify the specified
	// directory.
	GetDirectory(ctx context.Context, in *GetDirectoryRequest, opts ...grpc.CallOption) (*Directory, error)
	// GetRevision returns a SignedMapRoot by the by the requested revision number
	// along with its inclusion proof in the log and the log's consistency proofs.
	GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*Revision, error)
	// GetLatestRevision returns the latest SignedMapRoot along with its inclusion
	// proof in the log and the log's consistency proofs.
	GetLatestRevision(ctx context.Context, in *GetLatestRevisionRequest, opts ...grpc.CallOption) (*Revision, error)
	// GetRevisionStream streams new revisions from a requested starting point
	// and continues as new revisions are created.
	GetRevisionStream(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (KeyTransparency_GetRevisionStreamClient, error)
	// ListMutations returns a list of mutations in a specific revision.
	ListMutations(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (*ListMutationsResponse, error)
	// ListMutationsStream is a streaming list of mutations in a specific revision.
	ListMutationsStream(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (KeyTransparency_ListMutationsStreamClient, error)
	// GetUser returns a user's leaf entry in the Merkle Tree.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// BatchGetUser returns a batch of user leaf entries in the Merkle tree at the same revision.
	BatchGetUser(ctx context.Context, in *BatchGetUserRequest, opts ...grpc.CallOption) (*BatchGetUserResponse, error)
	// BatchGetUserIndex returns the VRF proof for a set of userIDs.
	BatchGetUserIndex(ctx context.Context, in *BatchGetUserIndexRequest, opts ...grpc.CallOption) (*BatchGetUserIndexResponse, error)
	// ListEntryHistory returns a list of historic GetUser values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(ctx context.Context, in *ListEntryHistoryRequest, opts ...grpc.CallOption) (*ListEntryHistoryResponse, error)
	// ListUserRevisions returns a list of historic leaf values for a user.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListUserRevisions(ctx context.Context, in *ListUserRevisionsRequest, opts ...grpc.CallOption) (*ListUserRevisionsResponse, error)
	// BatchListUserRevisions returns a list of revisions for multiple users.
	BatchListUserRevisions(ctx context.Context, in *BatchListUserRevisionsRequest, opts ...grpc.CallOption) (*BatchListUserRevisionsResponse, error)
	// QueueUserUpdate enqueues an update to a user's profile.
	//
	// Clients should poll GetUser until the update appears, and retry if no
	// update appears after a timeout.
	QueueEntryUpdate(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// BatchQueueUserUpdate enqueues a list of user profiles.
	BatchQueueUserUpdate(ctx context.Context, in *BatchQueueUserUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyTransparencyClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyTransparencyClient(cc grpc.ClientConnInterface) KeyTransparencyClient {
	return &keyTransparencyClient{cc}
}

func (c *keyTransparencyClient) GetDirectory(ctx context.Context, in *GetDirectoryRequest, opts ...grpc.CallOption) (*Directory, error) {
	out := new(Directory)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*Revision, error) {
	out := new(Revision)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetLatestRevision(ctx context.Context, in *GetLatestRevisionRequest, opts ...grpc.CallOption) (*Revision, error) {
	out := new(Revision)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetLatestRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetRevisionStream(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (KeyTransparency_GetRevisionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KeyTransparency_serviceDesc.Streams[0], "/google.keytransparency.v1.KeyTransparency/GetRevisionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyTransparencyGetRevisionStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyTransparency_GetRevisionStreamClient interface {
	Recv() (*Revision, error)
	grpc.ClientStream
}

type keyTransparencyGetRevisionStreamClient struct {
	grpc.ClientStream
}

func (x *keyTransparencyGetRevisionStreamClient) Recv() (*Revision, error) {
	m := new(Revision)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyTransparencyClient) ListMutations(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (*ListMutationsResponse, error) {
	out := new(ListMutationsResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/ListMutations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) ListMutationsStream(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (KeyTransparency_ListMutationsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KeyTransparency_serviceDesc.Streams[1], "/google.keytransparency.v1.KeyTransparency/ListMutationsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyTransparencyListMutationsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyTransparency_ListMutationsStreamClient interface {
	Recv() (*MutationProof, error)
	grpc.ClientStream
}

type keyTransparencyListMutationsStreamClient struct {
	grpc.ClientStream
}

func (x *keyTransparencyListMutationsStreamClient) Recv() (*MutationProof, error) {
	m := new(MutationProof)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyTransparencyClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) BatchGetUser(ctx context.Context, in *BatchGetUserRequest, opts ...grpc.CallOption) (*BatchGetUserResponse, error) {
	out := new(BatchGetUserResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/BatchGetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) BatchGetUserIndex(ctx context.Context, in *BatchGetUserIndexRequest, opts ...grpc.CallOption) (*BatchGetUserIndexResponse, error) {
	out := new(BatchGetUserIndexResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/BatchGetUserIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) ListEntryHistory(ctx context.Context, in *ListEntryHistoryRequest, opts ...grpc.CallOption) (*ListEntryHistoryResponse, error) {
	out := new(ListEntryHistoryResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/ListEntryHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) ListUserRevisions(ctx context.Context, in *ListUserRevisionsRequest, opts ...grpc.CallOption) (*ListUserRevisionsResponse, error) {
	out := new(ListUserRevisionsResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/ListUserRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) BatchListUserRevisions(ctx context.Context, in *BatchListUserRevisionsRequest, opts ...grpc.CallOption) (*BatchListUserRevisionsResponse, error) {
	out := new(BatchListUserRevisionsResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/BatchListUserRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) QueueEntryUpdate(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/QueueEntryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) BatchQueueUserUpdate(ctx context.Context, in *BatchQueueUserUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/BatchQueueUserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyTransparencyServer is the server API for KeyTransparency service.
type KeyTransparencyServer interface {
	// GetDirectory returns the information needed to verify the specified
	// directory.
	GetDirectory(context.Context, *GetDirectoryRequest) (*Directory, error)
	// GetRevision returns a SignedMapRoot by the by the requested revision number
	// along with its inclusion proof in the log and the log's consistency proofs.
	GetRevision(context.Context, *GetRevisionRequest) (*Revision, error)
	// GetLatestRevision returns the latest SignedMapRoot along with its inclusion
	// proof in the log and the log's consistency proofs.
	GetLatestRevision(context.Context, *GetLatestRevisionRequest) (*Revision, error)
	// GetRevisionStream streams new revisions from a requested starting point
	// and continues as new revisions are created.
	GetRevisionStream(*GetRevisionRequest, KeyTransparency_GetRevisionStreamServer) error
	// ListMutations returns a list of mutations in a specific revision.
	ListMutations(context.Context, *ListMutationsRequest) (*ListMutationsResponse, error)
	// ListMutationsStream is a streaming list of mutations in a specific revision.
	ListMutationsStream(*ListMutationsRequest, KeyTransparency_ListMutationsStreamServer) error
	// GetUser returns a user's leaf entry in the Merkle Tree.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// BatchGetUser returns a batch of user leaf entries in the Merkle tree at the same revision.
	BatchGetUser(context.Context, *BatchGetUserRequest) (*BatchGetUserResponse, error)
	// BatchGetUserIndex returns the VRF proof for a set of userIDs.
	BatchGetUserIndex(context.Context, *BatchGetUserIndexRequest) (*BatchGetUserIndexResponse, error)
	// ListEntryHistory returns a list of historic GetUser values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(context.Context, *ListEntryHistoryRequest) (*ListEntryHistoryResponse, error)
	// ListUserRevisions returns a list of historic leaf values for a user.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListUserRevisions(context.Context, *ListUserRevisionsRequest) (*ListUserRevisionsResponse, error)
	// BatchListUserRevisions returns a list of revisions for multiple users.
	BatchListUserRevisions(context.Context, *BatchListUserRevisionsRequest) (*BatchListUserRevisionsResponse, error)
	// QueueUserUpdate enqueues an update to a user's profile.
	//
	// Clients should poll GetUser until the update appears, and retry if no
	// update appears after a timeout.
	QueueEntryUpdate(context.Context, *UpdateEntryRequest) (*empty.Empty, error)
	// BatchQueueUserUpdate enqueues a list of user profiles.
	BatchQueueUserUpdate(context.Context, *BatchQueueUserUpdateRequest) (*empty.Empty, error)
}

// UnimplementedKeyTransparencyServer can be embedded to have forward compatible implementations.
type UnimplementedKeyTransparencyServer struct {
}

func (*UnimplementedKeyTransparencyServer) GetDirectory(context.Context, *GetDirectoryRequest) (*Directory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectory not implemented")
}
func (*UnimplementedKeyTransparencyServer) GetRevision(context.Context, *GetRevisionRequest) (*Revision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevision not implemented")
}
func (*UnimplementedKeyTransparencyServer) GetLatestRevision(context.Context, *GetLatestRevisionRequest) (*Revision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRevision not implemented")
}
func (*UnimplementedKeyTransparencyServer) GetRevisionStream(*GetRevisionRequest, KeyTransparency_GetRevisionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRevisionStream not implemented")
}
func (*UnimplementedKeyTransparencyServer) ListMutations(context.Context, *ListMutationsRequest) (*ListMutationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMutations not implemented")
}
func (*UnimplementedKeyTransparencyServer) ListMutationsStream(*ListMutationsRequest, KeyTransparency_ListMutationsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMutationsStream not implemented")
}
func (*UnimplementedKeyTransparencyServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedKeyTransparencyServer) BatchGetUser(context.Context, *BatchGetUserRequest) (*BatchGetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUser not implemented")
}
func (*UnimplementedKeyTransparencyServer) BatchGetUserIndex(context.Context, *BatchGetUserIndexRequest) (*BatchGetUserIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserIndex not implemented")
}
func (*UnimplementedKeyTransparencyServer) ListEntryHistory(context.Context, *ListEntryHistoryRequest) (*ListEntryHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntryHistory not implemented")
}
func (*UnimplementedKeyTransparencyServer) ListUserRevisions(context.Context, *ListUserRevisionsRequest) (*ListUserRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRevisions not implemented")
}
func (*UnimplementedKeyTransparencyServer) BatchListUserRevisions(context.Context, *BatchListUserRevisionsRequest) (*BatchListUserRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchListUserRevisions not implemented")
}
func (*UnimplementedKeyTransparencyServer) QueueEntryUpdate(context.Context, *UpdateEntryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueEntryUpdate not implemented")
}
func (*UnimplementedKeyTransparencyServer) BatchQueueUserUpdate(context.Context, *BatchQueueUserUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueueUserUpdate not implemented")
}

func RegisterKeyTransparencyServer(s *grpc.Server, srv KeyTransparencyServer) {
	s.RegisterService(&_KeyTransparency_serviceDesc, srv)
}

func _KeyTransparency_GetDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetDirectory(ctx, req.(*GetDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetRevision(ctx, req.(*GetRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetLatestRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetLatestRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetLatestRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetLatestRevision(ctx, req.(*GetLatestRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetRevisionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRevisionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyTransparencyServer).GetRevisionStream(m, &keyTransparencyGetRevisionStreamServer{stream})
}

type KeyTransparency_GetRevisionStreamServer interface {
	Send(*Revision) error
	grpc.ServerStream
}

type keyTransparencyGetRevisionStreamServer struct {
	grpc.ServerStream
}

func (x *keyTransparencyGetRevisionStreamServer) Send(m *Revision) error {
	return x.ServerStream.SendMsg(m)
}

func _KeyTransparency_ListMutations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMutationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).ListMutations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/ListMutations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).ListMutations(ctx, req.(*ListMutationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_ListMutationsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMutationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyTransparencyServer).ListMutationsStream(m, &keyTransparencyListMutationsStreamServer{stream})
}

type KeyTransparency_ListMutationsStreamServer interface {
	Send(*MutationProof) error
	grpc.ServerStream
}

type keyTransparencyListMutationsStreamServer struct {
	grpc.ServerStream
}

func (x *keyTransparencyListMutationsStreamServer) Send(m *MutationProof) error {
	return x.ServerStream.SendMsg(m)
}

func _KeyTransparency_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_BatchGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).BatchGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/BatchGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).BatchGetUser(ctx, req.(*BatchGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_BatchGetUserIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).BatchGetUserIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/BatchGetUserIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).BatchGetUserIndex(ctx, req.(*BatchGetUserIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_ListEntryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).ListEntryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/ListEntryHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).ListEntryHistory(ctx, req.(*ListEntryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_ListUserRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).ListUserRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/ListUserRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).ListUserRevisions(ctx, req.(*ListUserRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_BatchListUserRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchListUserRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).BatchListUserRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/BatchListUserRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).BatchListUserRevisions(ctx, req.(*BatchListUserRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_QueueEntryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).QueueEntryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/QueueEntryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).QueueEntryUpdate(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_BatchQueueUserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueueUserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).BatchQueueUserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/BatchQueueUserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).BatchQueueUserUpdate(ctx, req.(*BatchQueueUserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparency_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.v1.KeyTransparency",
	HandlerType: (*KeyTransparencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDirectory",
			Handler:    _KeyTransparency_GetDirectory_Handler,
		},
		{
			MethodName: "GetRevision",
			Handler:    _KeyTransparency_GetRevision_Handler,
		},
		{
			MethodName: "GetLatestRevision",
			Handler:    _KeyTransparency_GetLatestRevision_Handler,
		},
		{
			MethodName: "ListMutations",
			Handler:    _KeyTransparency_ListMutations_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _KeyTransparency_GetUser_Handler,
		},
		{
			MethodName: "BatchGetUser",
			Handler:    _KeyTransparency_BatchGetUser_Handler,
		},
		{
			MethodName: "BatchGetUserIndex",
			Handler:    _KeyTransparency_BatchGetUserIndex_Handler,
		},
		{
			MethodName: "ListEntryHistory",
			Handler:    _KeyTransparency_ListEntryHistory_Handler,
		},
		{
			MethodName: "ListUserRevisions",
			Handler:    _KeyTransparency_ListUserRevisions_Handler,
		},
		{
			MethodName: "BatchListUserRevisions",
			Handler:    _KeyTransparency_BatchListUserRevisions_Handler,
		},
		{
			MethodName: "QueueEntryUpdate",
			Handler:    _KeyTransparency_QueueEntryUpdate_Handler,
		},
		{
			MethodName: "BatchQueueUserUpdate",
			Handler:    _KeyTransparency_BatchQueueUserUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRevisionStream",
			Handler:       _KeyTransparency_GetRevisionStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListMutationsStream",
			Handler:       _KeyTransparency_ListMutationsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/keytransparency.proto",
}
