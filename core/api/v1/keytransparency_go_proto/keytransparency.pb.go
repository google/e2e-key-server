// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/keytransparency.proto

/*
Package keytransparency_go_proto is a generated protocol buffer package.

Key Transparency

The Key Transparency API consists of a map of user names to public
keys. Each user name also has a history of public keys that have been
associated with it.

It is generated from these files:
	v1/keytransparency.proto
	v1/admin.proto

It has these top-level messages:
	Committed
	EntryUpdate
	Entry
	MutationProof
	MapperMetadata
	UserProfile
	GetEntryRequest
	GetEntryResponse
	ListEntryHistoryRequest
	ListEntryHistoryResponse
	UpdateEntryRequest
	UpdateEntryResponse
	GetEpochRequest
	GetLatestEpochRequest
	Epoch
	ListMutationsRequest
	ListMutationsResponse
	Domain
	ListDomainsRequest
	ListDomainsResponse
	GetDomainRequest
	CreateDomainRequest
	DeleteDomainRequest
	UndeleteDomainRequest
*/
package keytransparency_go_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import trillian "github.com/google/trillian"
import trillian1 "github.com/google/trillian"
import google_crypto_tink "github.com/google/tink/proto/tink_go_proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Committed represents the data committed to in a cryptographic commitment.
// commitment = HMAC_SHA512_256(key, data)
type Committed struct {
	// key is the 16 byte random commitment key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// data is the data being committed to.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Committed) Reset()                    { *m = Committed{} }
func (m *Committed) String() string            { return proto.CompactTextString(m) }
func (*Committed) ProtoMessage()               {}
func (*Committed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Committed) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Committed) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// EntryUpdate contains the user entry update(s).
type EntryUpdate struct {
	// mutation authorizes the change to entry.
	Mutation *Entry `protobuf:"bytes,2,opt,name=mutation" json:"mutation,omitempty"`
	// commitment contains the data committed to in update.commitment.
	Committed *Committed `protobuf:"bytes,3,opt,name=committed" json:"committed,omitempty"`
}

func (m *EntryUpdate) Reset()                    { *m = EntryUpdate{} }
func (m *EntryUpdate) String() string            { return proto.CompactTextString(m) }
func (*EntryUpdate) ProtoMessage()               {}
func (*EntryUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EntryUpdate) GetMutation() *Entry {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (m *EntryUpdate) GetCommitted() *Committed {
	if m != nil {
		return m.Committed
	}
	return nil
}

// Entry is a signed change to a map entry.
// Entry contains a commitment to profile and a set of authorized update keys.
// Entry is placed in the verifiable map as leaf data.
type Entry struct {
	// index is the location of this leaf in the sparse merkle tree.
	Index []byte `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	// commitment is a cryptographic commitment to arbitrary data.
	Commitment []byte `protobuf:"bytes,6,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// authorized_keys is the set of keys allowed to sign updates for this entry.
	AuthorizedKeys *google_crypto_tink.Keyset `protobuf:"bytes,7,opt,name=authorized_keys,json=authorizedKeys" json:"authorized_keys,omitempty"`
	// previous contains the hash of the previous entry that this mutation is
	// modifying creating a hash chain of all mutations. The hash used is
	// CommonJSON in "github.com/benlaurie/objecthash/go/objecthash".
	Previous []byte `protobuf:"bytes,8,opt,name=previous,proto3" json:"previous,omitempty"`
	// signatures on entry. Must be signed by keys from both previous and
	// current epochs. The first proves ownership of new epoch key, and the
	// second proves that the correct owner is making this change.
	Signatures [][]byte `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Entry) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Entry) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *Entry) GetAuthorizedKeys() *google_crypto_tink.Keyset {
	if m != nil {
		return m.AuthorizedKeys
	}
	return nil
}

func (m *Entry) GetPrevious() []byte {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *Entry) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// MutationProof contains the information necessary to compute the new leaf value.
// It contains a) the old leaf value with it's inclusion proof and b) the mutation.
// The new leaf value is computed via:
//       Mutate(leaf_value, mutation)
type MutationProof struct {
	// mutation contains the information needed to modify the old leaf.
	// The format of a mutation is specific to the particular Mutate function being used.
	Mutation *Entry `protobuf:"bytes,1,opt,name=mutation" json:"mutation,omitempty"`
	// leaf_proof contains the leaf and its inclusion proof for a particular map revision.
	LeafProof *trillian1.MapLeafInclusion `protobuf:"bytes,2,opt,name=leaf_proof,json=leafProof" json:"leaf_proof,omitempty"`
}

func (m *MutationProof) Reset()                    { *m = MutationProof{} }
func (m *MutationProof) String() string            { return proto.CompactTextString(m) }
func (*MutationProof) ProtoMessage()               {}
func (*MutationProof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MutationProof) GetMutation() *Entry {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (m *MutationProof) GetLeafProof() *trillian1.MapLeafInclusion {
	if m != nil {
		return m.LeafProof
	}
	return nil
}

// MapperMetadata tracks the mutations that have been mapped so far. It is
// embedded in the Trillian SignedMapHead.
type MapperMetadata struct {
	HighestFullyCompletedSeq int64 `protobuf:"varint,1,opt,name=highest_fully_completed_seq,json=highestFullyCompletedSeq" json:"highest_fully_completed_seq,omitempty"`
}

func (m *MapperMetadata) Reset()                    { *m = MapperMetadata{} }
func (m *MapperMetadata) String() string            { return proto.CompactTextString(m) }
func (*MapperMetadata) ProtoMessage()               {}
func (*MapperMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MapperMetadata) GetHighestFullyCompletedSeq() int64 {
	if m != nil {
		return m.HighestFullyCompletedSeq
	}
	return 0
}

// UserProfile is the data that a client would like to store on the server.
type UserProfile struct {
	// data is the public key data for the user.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UserProfile) Reset()                    { *m = UserProfile{} }
func (m *UserProfile) String() string            { return proto.CompactTextString(m) }
func (*UserProfile) ProtoMessage()               {}
func (*UserProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserProfile) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// GetEntryRequest for a user object.
type GetEntryRequest struct {
	// domain_id identifies the domain in which the user and application live.
	DomainId string `protobuf:"bytes,4,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// user_id is the user identifier. Most commonly an email address.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// app_id is the identifier for the application.
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// first_tree_size is the tree_size of the currently trusted log root.
	// Omitting this field will omit the log consistency proof from the response.
	FirstTreeSize int64 `protobuf:"varint,3,opt,name=first_tree_size,json=firstTreeSize" json:"first_tree_size,omitempty"`
}

func (m *GetEntryRequest) Reset()                    { *m = GetEntryRequest{} }
func (m *GetEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntryRequest) ProtoMessage()               {}
func (*GetEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetEntryRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetEntryRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetEntryRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GetEntryRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

// GetEntryResponse returns a requested user entry.
type GetEntryResponse struct {
	// vrf_proof is the proof for VRF on user_id.
	VrfProof []byte `protobuf:"bytes,1,opt,name=vrf_proof,json=vrfProof,proto3" json:"vrf_proof,omitempty"`
	// committed contains the profile for this account and connects the data
	// in profile to the commitment in leaf_proof.
	Committed *Committed `protobuf:"bytes,2,opt,name=committed" json:"committed,omitempty"`
	// leaf_proof contains an Entry and an inclusion proof in the sparse Merkle
	// Tree.
	LeafProof *trillian1.MapLeafInclusion `protobuf:"bytes,3,opt,name=leaf_proof,json=leafProof" json:"leaf_proof,omitempty"`
	// smr contains the signed map head for the sparse Merkle Tree.
	// smr is also stored in the append only log.
	Smr *trillian.SignedMapRoot `protobuf:"bytes,4,opt,name=smr" json:"smr,omitempty"`
	// log_root is the latest globally consistent log root.
	// TODO: gossip the log root to verify global consistency.
	LogRoot *trillian.SignedLogRoot `protobuf:"bytes,5,opt,name=log_root,json=logRoot" json:"log_root,omitempty"`
	// log_consistency proves that log_root is consistent with previously seen roots.
	LogConsistency [][]byte `protobuf:"bytes,6,rep,name=log_consistency,json=logConsistency,proto3" json:"log_consistency,omitempty"`
	// log_inclusion proves that smr is part of log_root at index=srm.MapRevision.
	LogInclusion [][]byte `protobuf:"bytes,7,rep,name=log_inclusion,json=logInclusion,proto3" json:"log_inclusion,omitempty"`
}

func (m *GetEntryResponse) Reset()                    { *m = GetEntryResponse{} }
func (m *GetEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEntryResponse) ProtoMessage()               {}
func (*GetEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetEntryResponse) GetVrfProof() []byte {
	if m != nil {
		return m.VrfProof
	}
	return nil
}

func (m *GetEntryResponse) GetCommitted() *Committed {
	if m != nil {
		return m.Committed
	}
	return nil
}

func (m *GetEntryResponse) GetLeafProof() *trillian1.MapLeafInclusion {
	if m != nil {
		return m.LeafProof
	}
	return nil
}

func (m *GetEntryResponse) GetSmr() *trillian.SignedMapRoot {
	if m != nil {
		return m.Smr
	}
	return nil
}

func (m *GetEntryResponse) GetLogRoot() *trillian.SignedLogRoot {
	if m != nil {
		return m.LogRoot
	}
	return nil
}

func (m *GetEntryResponse) GetLogConsistency() [][]byte {
	if m != nil {
		return m.LogConsistency
	}
	return nil
}

func (m *GetEntryResponse) GetLogInclusion() [][]byte {
	if m != nil {
		return m.LogInclusion
	}
	return nil
}

// ListEntryHistoryRequest gets a list of historical keys for a user.
type ListEntryHistoryRequest struct {
	// domain_id identifies the domain in which the user and application live.
	DomainId string `protobuf:"bytes,6,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// user_id is the user identifier.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// start is the starting epoch.
	Start int64 `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	// page_size is the maximum number of entries to return.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// app_id is the identifier for the application.
	AppId string `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// first_tree_size is the tree_size of the currently trusted log root.
	// Omitting this field will omit the log consistency proof from the response.
	FirstTreeSize int64 `protobuf:"varint,5,opt,name=first_tree_size,json=firstTreeSize" json:"first_tree_size,omitempty"`
}

func (m *ListEntryHistoryRequest) Reset()                    { *m = ListEntryHistoryRequest{} }
func (m *ListEntryHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*ListEntryHistoryRequest) ProtoMessage()               {}
func (*ListEntryHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListEntryHistoryRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *ListEntryHistoryRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListEntryHistoryRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ListEntryHistoryRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListEntryHistoryRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ListEntryHistoryRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

// ListEntryHistoryResponse requests a paginated history of keys for a user.
type ListEntryHistoryResponse struct {
	// values represents the list of keys this user_id has contained over time.
	Values []*GetEntryResponse `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	// next_start is the next page token to query for pagination.
	// next_start is 0 when there are no more results to fetch.
	NextStart int64 `protobuf:"varint,2,opt,name=next_start,json=nextStart" json:"next_start,omitempty"`
}

func (m *ListEntryHistoryResponse) Reset()                    { *m = ListEntryHistoryResponse{} }
func (m *ListEntryHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*ListEntryHistoryResponse) ProtoMessage()               {}
func (*ListEntryHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListEntryHistoryResponse) GetValues() []*GetEntryResponse {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListEntryHistoryResponse) GetNextStart() int64 {
	if m != nil {
		return m.NextStart
	}
	return 0
}

// UpdateEntryRequest updates a user's profile.
type UpdateEntryRequest struct {
	// domain_id identifies the domain in which the user and application live.
	DomainId string `protobuf:"bytes,5,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// user_id specifies the id for the user who's profile is being updated.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// app_id is the identifier for the application.
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// first_tree_size is the tree_size of the currently trusted log root.
	// Omitting this field will omit the log consistency proof from the response.
	FirstTreeSize int64 `protobuf:"varint,3,opt,name=first_tree_size,json=firstTreeSize" json:"first_tree_size,omitempty"`
	// entry_update contains the user submitted update.
	EntryUpdate *EntryUpdate `protobuf:"bytes,4,opt,name=entry_update,json=entryUpdate" json:"entry_update,omitempty"`
}

func (m *UpdateEntryRequest) Reset()                    { *m = UpdateEntryRequest{} }
func (m *UpdateEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEntryRequest) ProtoMessage()               {}
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateEntryRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *UpdateEntryRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateEntryRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateEntryRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

func (m *UpdateEntryRequest) GetEntryUpdate() *EntryUpdate {
	if m != nil {
		return m.EntryUpdate
	}
	return nil
}

// UpdateEntryResponse contains a proof once the update has been included in
// the Merkle Tree.
type UpdateEntryResponse struct {
	// proof contains a proof that the update has been included in the tree.
	Proof *GetEntryResponse `protobuf:"bytes,1,opt,name=proof" json:"proof,omitempty"`
}

func (m *UpdateEntryResponse) Reset()                    { *m = UpdateEntryResponse{} }
func (m *UpdateEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateEntryResponse) ProtoMessage()               {}
func (*UpdateEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateEntryResponse) GetProof() *GetEntryResponse {
	if m != nil {
		return m.Proof
	}
	return nil
}

// GetEpochRequest identifies a particular epoch.
type GetEpochRequest struct {
	// domain_id is the domain for which epochs are being requested.
	DomainId string `protobuf:"bytes,5,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// epoch specifies the epoch number in which mutations will be returned.
	Epoch int64 `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	// first_tree_size is the tree_size of the currently trusted log root.
	// Omitting this field will omit the log consistency proof from the response.
	FirstTreeSize int64 `protobuf:"varint,2,opt,name=first_tree_size,json=firstTreeSize" json:"first_tree_size,omitempty"`
}

func (m *GetEpochRequest) Reset()                    { *m = GetEpochRequest{} }
func (m *GetEpochRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEpochRequest) ProtoMessage()               {}
func (*GetEpochRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetEpochRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetEpochRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *GetEpochRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

// GetLatestEpochRequest identifies a particular epoch.
type GetLatestEpochRequest struct {
	// domain_id is the domain for which epochs are being requested.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// first_tree_size is the tree_size of the currently trusted log root.
	// Omitting this field will omit the log consistency proof from the response.
	FirstTreeSize int64 `protobuf:"varint,2,opt,name=first_tree_size,json=firstTreeSize" json:"first_tree_size,omitempty"`
}

func (m *GetLatestEpochRequest) Reset()                    { *m = GetLatestEpochRequest{} }
func (m *GetLatestEpochRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLatestEpochRequest) ProtoMessage()               {}
func (*GetLatestEpochRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetLatestEpochRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetLatestEpochRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

// Epoch represents a snapshot of the entire key directory and
// a diff of what changed between this revision and the previous revision.
type Epoch struct {
	// domain_id is the domain identifier.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// smr contains the signed map root for the sparse Merkle Tree.
	Smr *trillian.SignedMapRoot `protobuf:"bytes,2,opt,name=smr" json:"smr,omitempty"`
	// log_root is the latest globally consistent log root.
	LogRoot *trillian.SignedLogRoot `protobuf:"bytes,3,opt,name=log_root,json=logRoot" json:"log_root,omitempty"`
	// log_consistency proves that log_root is consistent with previously seen roots.
	LogConsistency [][]byte `protobuf:"bytes,4,rep,name=log_consistency,json=logConsistency,proto3" json:"log_consistency,omitempty"`
	// log_inclusion proves that smr is part of log_root at index=srm.MapRevision.
	LogInclusion [][]byte `protobuf:"bytes,5,rep,name=log_inclusion,json=logInclusion,proto3" json:"log_inclusion,omitempty"`
}

func (m *Epoch) Reset()                    { *m = Epoch{} }
func (m *Epoch) String() string            { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()               {}
func (*Epoch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Epoch) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *Epoch) GetSmr() *trillian.SignedMapRoot {
	if m != nil {
		return m.Smr
	}
	return nil
}

func (m *Epoch) GetLogRoot() *trillian.SignedLogRoot {
	if m != nil {
		return m.LogRoot
	}
	return nil
}

func (m *Epoch) GetLogConsistency() [][]byte {
	if m != nil {
		return m.LogConsistency
	}
	return nil
}

func (m *Epoch) GetLogInclusion() [][]byte {
	if m != nil {
		return m.LogInclusion
	}
	return nil
}

// ListMutationsRequest requests the mutations that created a given epoch.
type ListMutationsRequest struct {
	// domain_id is the domain identifier.
	DomainId string `protobuf:"bytes,5,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// epoch specifies the epoch number.
	Epoch int64 `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	// page_token defines the starting point for pagination.
	// To request the next page, pass next_page_token from the previous response.
	// To start at the beginning, simply omit page_token from the request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// page_size is the maximum number of mutations to return in a single request.
	// The server may choose a smaller page_size than the one requested.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *ListMutationsRequest) Reset()                    { *m = ListMutationsRequest{} }
func (m *ListMutationsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMutationsRequest) ProtoMessage()               {}
func (*ListMutationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListMutationsRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *ListMutationsRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ListMutationsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListMutationsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// ListMutationsResponse contains the mutations that produced an epoch.
type ListMutationsResponse struct {
	// mutations contains the the mutation object and the leaf value it operated on.
	Mutations []*MutationProof `protobuf:"bytes,6,rep,name=mutations" json:"mutations,omitempty"`
	// next_page_token is the next page token to query for pagination.
	// An empty value means there are no more results to fetch.
	NextPageToken string `protobuf:"bytes,7,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListMutationsResponse) Reset()                    { *m = ListMutationsResponse{} }
func (m *ListMutationsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListMutationsResponse) ProtoMessage()               {}
func (*ListMutationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ListMutationsResponse) GetMutations() []*MutationProof {
	if m != nil {
		return m.Mutations
	}
	return nil
}

func (m *ListMutationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Committed)(nil), "google.keytransparency.v1.Committed")
	proto.RegisterType((*EntryUpdate)(nil), "google.keytransparency.v1.EntryUpdate")
	proto.RegisterType((*Entry)(nil), "google.keytransparency.v1.Entry")
	proto.RegisterType((*MutationProof)(nil), "google.keytransparency.v1.MutationProof")
	proto.RegisterType((*MapperMetadata)(nil), "google.keytransparency.v1.MapperMetadata")
	proto.RegisterType((*UserProfile)(nil), "google.keytransparency.v1.UserProfile")
	proto.RegisterType((*GetEntryRequest)(nil), "google.keytransparency.v1.GetEntryRequest")
	proto.RegisterType((*GetEntryResponse)(nil), "google.keytransparency.v1.GetEntryResponse")
	proto.RegisterType((*ListEntryHistoryRequest)(nil), "google.keytransparency.v1.ListEntryHistoryRequest")
	proto.RegisterType((*ListEntryHistoryResponse)(nil), "google.keytransparency.v1.ListEntryHistoryResponse")
	proto.RegisterType((*UpdateEntryRequest)(nil), "google.keytransparency.v1.UpdateEntryRequest")
	proto.RegisterType((*UpdateEntryResponse)(nil), "google.keytransparency.v1.UpdateEntryResponse")
	proto.RegisterType((*GetEpochRequest)(nil), "google.keytransparency.v1.GetEpochRequest")
	proto.RegisterType((*GetLatestEpochRequest)(nil), "google.keytransparency.v1.GetLatestEpochRequest")
	proto.RegisterType((*Epoch)(nil), "google.keytransparency.v1.Epoch")
	proto.RegisterType((*ListMutationsRequest)(nil), "google.keytransparency.v1.ListMutationsRequest")
	proto.RegisterType((*ListMutationsResponse)(nil), "google.keytransparency.v1.ListMutationsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KeyTransparency service

type KeyTransparencyClient interface {
	// GetDomain returns the information needed to verify the specified domain.
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// GetEpoch returns a SignedMapRoot by the by the requested revision number
	// along with its inclusion proof in the log and the log's consistency proofs.
	GetEpoch(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (*Epoch, error)
	// GetLatestEpoch returns the latest SignedMapRoot along with its inclusion
	// proof in the log and the log's consistency proofs.
	GetLatestEpoch(ctx context.Context, in *GetLatestEpochRequest, opts ...grpc.CallOption) (*Epoch, error)
	// GetEpochStream streams new epochs from a requested starting point
	// and continues as new epochs are created.
	GetEpochStream(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (KeyTransparency_GetEpochStreamClient, error)
	// ListMutations returns a list of mutations in a specific epoch.
	ListMutations(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (*ListMutationsResponse, error)
	// ListMutationsStream is a streaming list of mutations in a specific epoch.
	ListMutationsStream(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (KeyTransparency_ListMutationsStreamClient, error)
	// GetEntry returns a user's entry in the Merkle Tree.
	//
	// Entries contain signed commitments to a profile, which is also returned.
	// TODO(gbelvin): Replace with GetUser
	GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error)
	// ListEntryHistory returns a list of historic GetEntry values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(ctx context.Context, in *ListEntryHistoryRequest, opts ...grpc.CallOption) (*ListEntryHistoryResponse, error)
	// UpdateEntry updates a user's profile.
	//
	// Returns the current user profile.
	// Clients must retry until this function returns a proof containing the desired value.
	UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*UpdateEntryResponse, error)
}

type keyTransparencyClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyClient(cc *grpc.ClientConn) KeyTransparencyClient {
	return &keyTransparencyClient{cc}
}

func (c *keyTransparencyClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetEpoch(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (*Epoch, error) {
	out := new(Epoch)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetEpoch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetLatestEpoch(ctx context.Context, in *GetLatestEpochRequest, opts ...grpc.CallOption) (*Epoch, error) {
	out := new(Epoch)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetLatestEpoch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) GetEpochStream(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (KeyTransparency_GetEpochStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KeyTransparency_serviceDesc.Streams[0], c.cc, "/google.keytransparency.v1.KeyTransparency/GetEpochStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyTransparencyGetEpochStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyTransparency_GetEpochStreamClient interface {
	Recv() (*Epoch, error)
	grpc.ClientStream
}

type keyTransparencyGetEpochStreamClient struct {
	grpc.ClientStream
}

func (x *keyTransparencyGetEpochStreamClient) Recv() (*Epoch, error) {
	m := new(Epoch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyTransparencyClient) ListMutations(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (*ListMutationsResponse, error) {
	out := new(ListMutationsResponse)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/ListMutations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) ListMutationsStream(ctx context.Context, in *ListMutationsRequest, opts ...grpc.CallOption) (KeyTransparency_ListMutationsStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KeyTransparency_serviceDesc.Streams[1], c.cc, "/google.keytransparency.v1.KeyTransparency/ListMutationsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyTransparencyListMutationsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyTransparency_ListMutationsStreamClient interface {
	Recv() (*MutationProof, error)
	grpc.ClientStream
}

type keyTransparencyListMutationsStreamClient struct {
	grpc.ClientStream
}

func (x *keyTransparencyListMutationsStreamClient) Recv() (*MutationProof, error) {
	m := new(MutationProof)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyTransparencyClient) GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error) {
	out := new(GetEntryResponse)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/GetEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) ListEntryHistory(ctx context.Context, in *ListEntryHistoryRequest, opts ...grpc.CallOption) (*ListEntryHistoryResponse, error) {
	out := new(ListEntryHistoryResponse)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/ListEntryHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyClient) UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*UpdateEntryResponse, error) {
	out := new(UpdateEntryResponse)
	err := grpc.Invoke(ctx, "/google.keytransparency.v1.KeyTransparency/UpdateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyTransparency service

type KeyTransparencyServer interface {
	// GetDomain returns the information needed to verify the specified domain.
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	// GetEpoch returns a SignedMapRoot by the by the requested revision number
	// along with its inclusion proof in the log and the log's consistency proofs.
	GetEpoch(context.Context, *GetEpochRequest) (*Epoch, error)
	// GetLatestEpoch returns the latest SignedMapRoot along with its inclusion
	// proof in the log and the log's consistency proofs.
	GetLatestEpoch(context.Context, *GetLatestEpochRequest) (*Epoch, error)
	// GetEpochStream streams new epochs from a requested starting point
	// and continues as new epochs are created.
	GetEpochStream(*GetEpochRequest, KeyTransparency_GetEpochStreamServer) error
	// ListMutations returns a list of mutations in a specific epoch.
	ListMutations(context.Context, *ListMutationsRequest) (*ListMutationsResponse, error)
	// ListMutationsStream is a streaming list of mutations in a specific epoch.
	ListMutationsStream(*ListMutationsRequest, KeyTransparency_ListMutationsStreamServer) error
	// GetEntry returns a user's entry in the Merkle Tree.
	//
	// Entries contain signed commitments to a profile, which is also returned.
	// TODO(gbelvin): Replace with GetUser
	GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error)
	// ListEntryHistory returns a list of historic GetEntry values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(context.Context, *ListEntryHistoryRequest) (*ListEntryHistoryResponse, error)
	// UpdateEntry updates a user's profile.
	//
	// Returns the current user profile.
	// Clients must retry until this function returns a proof containing the desired value.
	UpdateEntry(context.Context, *UpdateEntryRequest) (*UpdateEntryResponse, error)
}

func RegisterKeyTransparencyServer(s *grpc.Server, srv KeyTransparencyServer) {
	s.RegisterService(&_KeyTransparency_serviceDesc, srv)
}

func _KeyTransparency_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetEpoch(ctx, req.(*GetEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetLatestEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetLatestEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetLatestEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetLatestEpoch(ctx, req.(*GetLatestEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_GetEpochStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEpochRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyTransparencyServer).GetEpochStream(m, &keyTransparencyGetEpochStreamServer{stream})
}

type KeyTransparency_GetEpochStreamServer interface {
	Send(*Epoch) error
	grpc.ServerStream
}

type keyTransparencyGetEpochStreamServer struct {
	grpc.ServerStream
}

func (x *keyTransparencyGetEpochStreamServer) Send(m *Epoch) error {
	return x.ServerStream.SendMsg(m)
}

func _KeyTransparency_ListMutations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMutationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).ListMutations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/ListMutations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).ListMutations(ctx, req.(*ListMutationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_ListMutationsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMutationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyTransparencyServer).ListMutationsStream(m, &keyTransparencyListMutationsStreamServer{stream})
}

type KeyTransparency_ListMutationsStreamServer interface {
	Send(*MutationProof) error
	grpc.ServerStream
}

type keyTransparencyListMutationsStreamServer struct {
	grpc.ServerStream
}

func (x *keyTransparencyListMutationsStreamServer) Send(m *MutationProof) error {
	return x.ServerStream.SendMsg(m)
}

func _KeyTransparency_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).GetEntry(ctx, req.(*GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_ListEntryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).ListEntryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/ListEntryHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).ListEntryHistory(ctx, req.(*ListEntryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparency_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.v1.KeyTransparency/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServer).UpdateEntry(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparency_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.v1.KeyTransparency",
	HandlerType: (*KeyTransparencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDomain",
			Handler:    _KeyTransparency_GetDomain_Handler,
		},
		{
			MethodName: "GetEpoch",
			Handler:    _KeyTransparency_GetEpoch_Handler,
		},
		{
			MethodName: "GetLatestEpoch",
			Handler:    _KeyTransparency_GetLatestEpoch_Handler,
		},
		{
			MethodName: "ListMutations",
			Handler:    _KeyTransparency_ListMutations_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _KeyTransparency_GetEntry_Handler,
		},
		{
			MethodName: "ListEntryHistory",
			Handler:    _KeyTransparency_ListEntryHistory_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _KeyTransparency_UpdateEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEpochStream",
			Handler:       _KeyTransparency_GetEpochStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListMutationsStream",
			Handler:       _KeyTransparency_ListMutationsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/keytransparency.proto",
}

func init() { proto.RegisterFile("v1/keytransparency.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0x4d, 0x6f, 0x1b, 0xc5,
	0x1b, 0xc0, 0xb5, 0x76, 0xec, 0xd8, 0x8f, 0xf3, 0x52, 0x4d, 0xd3, 0x7f, 0xb6, 0xee, 0xbf, 0x90,
	0x2e, 0xd0, 0x86, 0xa2, 0x7a, 0x13, 0x57, 0xa8, 0xb4, 0xa2, 0xaa, 0x68, 0xe8, 0x4b, 0xd4, 0x44,
	0x54, 0x9b, 0x56, 0x42, 0x08, 0x69, 0x35, 0xf5, 0x4e, 0xd6, 0xa3, 0xac, 0x77, 0xb6, 0x33, 0x63,
	0xab, 0x4e, 0x08, 0x07, 0x24, 0xa0, 0xb7, 0x1e, 0xfa, 0x0d, 0x38, 0x73, 0xe3, 0xc4, 0x05, 0x09,
	0xee, 0x1c, 0x10, 0xdc, 0xb8, 0xf2, 0x41, 0xd0, 0xcc, 0xac, 0x5f, 0xe3, 0x38, 0x76, 0x40, 0x9c,
	0xbc, 0xf3, 0xec, 0xf3, 0xcc, 0xfc, 0xe6, 0x79, 0x9b, 0x59, 0x83, 0xdd, 0x5a, 0x77, 0xf7, 0x48,
	0x5b, 0x72, 0x1c, 0x8b, 0x04, 0x73, 0x12, 0xd7, 0xda, 0x95, 0x84, 0x33, 0xc9, 0xd0, 0xf9, 0x90,
	0xb1, 0x30, 0x22, 0x95, 0xe1, 0xb7, 0xad, 0xf5, 0xf2, 0xff, 0xcd, 0x2b, 0x17, 0x27, 0xd4, 0xc5,
	0x71, 0xcc, 0x24, 0x96, 0x94, 0xc5, 0xc2, 0x18, 0x96, 0x17, 0x24, 0xa7, 0x51, 0x44, 0x71, 0x9c,
	0x8e, 0xff, 0xd7, 0x19, 0xfb, 0x0d, 0x9c, 0xf8, 0x38, 0xa1, 0xa9, 0x1c, 0x24, 0x8d, 0xf7, 0x3a,
	0x36, 0xad, 0x75, 0x17, 0x07, 0x0d, 0x9a, 0xda, 0x38, 0xeb, 0x50, 0xdc, 0x60, 0x8d, 0x06, 0x95,
	0x92, 0x04, 0xe8, 0x0c, 0x64, 0xf7, 0x48, 0xdb, 0xb6, 0x56, 0xac, 0xd5, 0x39, 0x4f, 0x3d, 0x22,
	0x04, 0x33, 0x01, 0x96, 0xd8, 0xce, 0x68, 0x91, 0x7e, 0x76, 0x5e, 0x59, 0x50, 0xba, 0x17, 0x4b,
	0xde, 0x7e, 0x9a, 0x04, 0x58, 0x12, 0xf4, 0x21, 0x14, 0x1a, 0x4d, 0x43, 0xa6, 0xf5, 0x4a, 0xd5,
	0x95, 0xca, 0xb1, 0x5b, 0xaa, 0x68, 0x4b, 0xaf, 0x6b, 0x81, 0xee, 0x42, 0xb1, 0xd6, 0x01, 0xb0,
	0xb3, 0xda, 0xfc, 0xed, 0x31, 0xe6, 0x5d, 0x58, 0xaf, 0x67, 0xe6, 0xfc, 0x64, 0x41, 0x4e, 0xcf,
	0x8b, 0x96, 0x20, 0x47, 0xe3, 0x80, 0xbc, 0xd0, 0x33, 0xcd, 0x79, 0x66, 0x80, 0xde, 0x00, 0x30,
	0xca, 0x0d, 0x12, 0x4b, 0x3b, 0xaf, 0x5f, 0xf5, 0x49, 0xd0, 0x06, 0x2c, 0xe2, 0xa6, 0xac, 0x33,
	0x4e, 0xf7, 0x49, 0xe0, 0xef, 0x91, 0xb6, 0xb0, 0x67, 0x35, 0x49, 0xb9, 0x43, 0x52, 0xe3, 0xed,
	0x44, 0xb2, 0x8a, 0x76, 0xe4, 0x23, 0xd2, 0x16, 0x44, 0x7a, 0x0b, 0x3d, 0x13, 0x25, 0x41, 0x65,
	0x28, 0x24, 0x9c, 0xb4, 0x28, 0x6b, 0x0a, 0xbb, 0xa0, 0x97, 0xe8, 0x8e, 0x15, 0x80, 0xa0, 0x61,
	0x8c, 0x65, 0x93, 0x13, 0x61, 0x67, 0x56, 0xb2, 0x0a, 0xa0, 0x27, 0x71, 0x5e, 0x5a, 0x30, 0xbf,
	0x9d, 0x7a, 0xe4, 0x31, 0x67, 0x6c, 0x77, 0xc0, 0xa9, 0xd6, 0xd4, 0x4e, 0xbd, 0x09, 0x10, 0x11,
	0xbc, 0xeb, 0x27, 0x6a, 0xae, 0x34, 0x28, 0xe5, 0x4a, 0x37, 0x5d, 0xb6, 0x71, 0xb2, 0x45, 0xf0,
	0xee, 0x66, 0x5c, 0x8b, 0x9a, 0x82, 0xb2, 0xd8, 0x2b, 0x2a, 0x6d, 0xbd, 0xb0, 0xf3, 0x09, 0x2c,
	0x6c, 0xe3, 0x24, 0x21, 0x7c, 0x9b, 0x48, 0xac, 0xe2, 0x8d, 0x6e, 0xc3, 0x85, 0x3a, 0x0d, 0xeb,
	0x44, 0x48, 0x7f, 0xb7, 0x19, 0x45, 0x6d, 0xbf, 0xc6, 0x1a, 0x49, 0x44, 0x24, 0x09, 0x7c, 0x41,
	0x9e, 0x6b, 0xba, 0xac, 0x67, 0xa7, 0x2a, 0xf7, 0x95, 0xc6, 0x46, 0x47, 0x61, 0x87, 0x3c, 0x77,
	0x2e, 0x41, 0xe9, 0xa9, 0x20, 0xfc, 0x31, 0x67, 0xbb, 0x34, 0x22, 0xdd, 0x8c, 0xb2, 0xfa, 0x32,
	0xea, 0x1b, 0x0b, 0x16, 0x1f, 0x10, 0x69, 0x76, 0x41, 0x9e, 0x37, 0x89, 0x90, 0xe8, 0x02, 0x14,
	0x03, 0xd6, 0xc0, 0x34, 0xf6, 0x69, 0x60, 0xcf, 0xac, 0x58, 0xab, 0x45, 0xaf, 0x60, 0x04, 0x9b,
	0x01, 0x5a, 0x86, 0xd9, 0xa6, 0x20, 0x5c, 0xbd, 0xb2, 0xf4, 0xab, 0xbc, 0x1a, 0x6e, 0x06, 0xe8,
	0x1c, 0xe4, 0x71, 0x92, 0x28, 0x79, 0x46, 0xcb, 0x73, 0x38, 0x49, 0x36, 0x03, 0x74, 0x19, 0x16,
	0x77, 0x29, 0x17, 0xd2, 0x97, 0x9c, 0x10, 0x5f, 0xd0, 0x7d, 0xa2, 0x13, 0x24, 0xeb, 0xcd, 0x6b,
	0xf1, 0x13, 0x4e, 0xc8, 0x0e, 0xdd, 0x27, 0xce, 0x9f, 0x19, 0x38, 0xd3, 0x03, 0x11, 0x09, 0x8b,
	0x05, 0x51, 0x24, 0x2d, 0xde, 0xf1, 0xa5, 0xc1, 0x2e, 0xb4, 0xb8, 0x71, 0xd7, 0x60, 0xfa, 0x66,
	0x4e, 0x95, 0xbe, 0x43, 0xd1, 0xca, 0x4e, 0x11, 0x2d, 0xf4, 0x2e, 0x64, 0x45, 0x83, 0x6b, 0xff,
	0x94, 0xaa, 0xcb, 0x3d, 0x9b, 0x1d, 0x1a, 0xc6, 0x24, 0xd8, 0xc6, 0x89, 0xc7, 0x98, 0xf4, 0x94,
	0x0e, 0xaa, 0x42, 0x21, 0x62, 0xa1, 0xcf, 0x19, 0x93, 0x76, 0x6e, 0xb4, 0xfe, 0x16, 0x0b, 0xb5,
	0xfe, 0x6c, 0x64, 0x1e, 0xd0, 0x15, 0x58, 0x54, 0x36, 0x35, 0x16, 0x0b, 0x2a, 0xa4, 0xda, 0x84,
	0x9d, 0xd7, 0xc9, 0xbb, 0x10, 0xb1, 0x70, 0xa3, 0x27, 0x45, 0x6f, 0xc1, 0xbc, 0x52, 0xa4, 0x1d,
	0x46, 0x7b, 0x56, 0xab, 0xcd, 0x45, 0x2c, 0xec, 0x72, 0x3b, 0x3f, 0x5b, 0xb0, 0xbc, 0x45, 0x85,
	0x71, 0xef, 0x43, 0x2a, 0x24, 0x3b, 0x26, 0xdc, 0xf9, 0x49, 0xc3, 0xbd, 0x04, 0x39, 0x21, 0x31,
	0x97, 0xda, 0xf3, 0x59, 0xcf, 0x0c, 0xd4, 0x5c, 0x09, 0x0e, 0xfb, 0xe2, 0x9c, 0xf3, 0x0a, 0x4a,
	0xa0, 0x42, 0xdc, 0x97, 0x21, 0x33, 0x27, 0x64, 0x48, 0x6e, 0x54, 0x86, 0x7c, 0x09, 0xf6, 0xd1,
	0x2d, 0xa4, 0x89, 0xb2, 0x01, 0xf9, 0x16, 0x8e, 0x9a, 0x44, 0xd8, 0xd6, 0x4a, 0x76, 0xb5, 0x54,
	0x7d, 0x6f, 0x4c, 0x22, 0x0c, 0x67, 0x99, 0x97, 0x9a, 0xa2, 0x8b, 0x00, 0x31, 0x79, 0x21, 0xfd,
	0xfe, 0x7d, 0x15, 0x95, 0x64, 0x47, 0x09, 0x9c, 0x3f, 0x2c, 0x40, 0xa6, 0xef, 0x1e, 0x5f, 0x2d,
	0xb9, 0xff, 0xa6, 0x5a, 0xd0, 0x26, 0xcc, 0x11, 0x05, 0xe1, 0x37, 0x35, 0x50, 0x9a, 0x85, 0x97,
	0x4f, 0xea, 0x53, 0x06, 0xdf, 0x2b, 0x91, 0xde, 0xc0, 0xf9, 0x14, 0xce, 0x0e, 0xec, 0x2a, 0xf5,
	0xe8, 0x47, 0x90, 0xeb, 0x95, 0xdd, 0x94, 0x0e, 0x35, 0x96, 0x4e, 0x64, 0x5a, 0x4b, 0xc2, 0x6a,
	0xf5, 0x89, 0x9c, 0xb5, 0x04, 0x39, 0xa2, 0x94, 0xd3, 0xbe, 0x66, 0x06, 0xa3, 0x5c, 0x92, 0x19,
	0x95, 0x1e, 0x9f, 0xc3, 0xb9, 0x07, 0x44, 0x6e, 0x61, 0x49, 0xc4, 0x98, 0x35, 0xad, 0xa1, 0x35,
	0x27, 0x9d, 0xfd, 0x37, 0x75, 0xce, 0x69, 0x9e, 0xb1, 0xd3, 0xa5, 0x4d, 0x21, 0x33, 0x65, 0x53,
	0xc8, 0x9e, 0xbe, 0x29, 0xcc, 0x4c, 0xd6, 0x14, 0x72, 0x23, 0x9a, 0xc2, 0xd7, 0x16, 0x2c, 0xa9,
	0x8a, 0xea, 0x1c, 0x7f, 0xe2, 0x1f, 0x44, 0xe9, 0x22, 0x80, 0x2e, 0x7c, 0xc9, 0xf6, 0x48, 0xac,
	0xf7, 0x53, 0xf4, 0x74, 0x2b, 0x78, 0xa2, 0x04, 0x83, 0x7d, 0x61, 0x66, 0xb0, 0x2f, 0x38, 0xdf,
	0x5a, 0x70, 0x6e, 0x88, 0x23, 0x4d, 0xc2, 0xfb, 0x50, 0xec, 0x1c, 0xac, 0x42, 0xb7, 0xbf, 0x52,
	0x75, 0x75, 0x4c, 0x22, 0x0e, 0x9c, 0xe3, 0x5e, 0xcf, 0x54, 0x45, 0x59, 0x57, 0x76, 0x1f, 0xe2,
	0xac, 0x46, 0x9c, 0x57, 0xe2, 0xc7, 0x1d, 0xcc, 0xea, 0xaf, 0x25, 0x58, 0x7c, 0x44, 0xda, 0x4f,
	0xfa, 0xe6, 0x45, 0x5f, 0x40, 0xf1, 0x01, 0x91, 0x1f, 0xeb, 0xed, 0xa3, 0x13, 0xca, 0xc0, 0x68,
	0xa5, 0x6e, 0x2c, 0x5f, 0x1a, 0xa3, 0x6c, 0x34, 0x9d, 0x37, 0xbf, 0xfa, 0xfd, 0xaf, 0xd7, 0x99,
	0xf3, 0x68, 0xd9, 0x6d, 0xad, 0xbb, 0xc6, 0xc5, 0xc2, 0x3d, 0xe8, 0x3a, 0xff, 0x10, 0xbd, 0xb4,
	0xa0, 0xd0, 0x29, 0x22, 0x74, 0xf5, 0x84, 0x22, 0xec, 0xcb, 0xfa, 0xf2, 0xd8, 0x3b, 0x8b, 0x52,
	0x74, 0x2a, 0x7a, 0xed, 0x55, 0x74, 0xf9, 0x98, 0xb5, 0x5d, 0x1d, 0x59, 0xe1, 0x1e, 0xe8, 0xdf,
	0x43, 0xf4, 0xda, 0x82, 0x85, 0xc1, 0x0a, 0x43, 0x6b, 0xe3, 0x81, 0x8e, 0x16, 0xe3, 0x04, 0x58,
	0xd7, 0x34, 0xd6, 0x15, 0xf4, 0xce, 0x78, 0xac, 0x5b, 0x91, 0x9e, 0x1c, 0xbd, 0x32, 0x54, 0xda,
	0x76, 0x47, 0x72, 0x82, 0x1b, 0xff, 0xb2, 0x9b, 0x26, 0xe5, 0x11, 0x7a, 0xf1, 0x35, 0x0b, 0x7d,
	0x6f, 0xc1, 0xfc, 0x40, 0x3a, 0x23, 0x77, 0xcc, 0x22, 0xa3, 0x0a, 0xb0, 0xbc, 0x36, 0xb9, 0x81,
	0xa9, 0x14, 0xe7, 0x03, 0x4d, 0x59, 0x45, 0x6b, 0x93, 0x05, 0xd3, 0xed, 0xd5, 0xc6, 0x0f, 0x16,
	0x9c, 0x1d, 0x98, 0x33, 0xf5, 0xe2, 0xd4, 0xd0, 0x13, 0x57, 0xa6, 0x73, 0x47, 0xc3, 0xde, 0x44,
	0x37, 0xa6, 0x85, 0xed, 0x39, 0xf9, 0xbb, 0xb4, 0x2e, 0xf4, 0xa7, 0xc7, 0xd5, 0x89, 0x0e, 0x27,
	0x43, 0x39, 0xcd, 0x41, 0xe6, 0xdc, 0xd6, 0xa0, 0x37, 0xd0, 0xfb, 0xc7, 0x81, 0xe2, 0x24, 0x11,
	0xee, 0x81, 0x39, 0xc9, 0x0f, 0x5d, 0x75, 0xb6, 0x0b, 0xf7, 0x20, 0x3d, 0xf1, 0x0f, 0xd1, 0x2f,
	0x16, 0x9c, 0x19, 0xbe, 0xb2, 0xa0, 0xea, 0x09, 0x7e, 0x1d, 0x71, 0x45, 0x2b, 0x5f, 0x9f, 0xca,
	0x26, 0x85, 0xbf, 0xa7, 0xe1, 0xef, 0xa0, 0xdb, 0xa7, 0x82, 0x77, 0xeb, 0x29, 0xef, 0x8f, 0x16,
	0x94, 0xfa, 0x2e, 0x08, 0xe8, 0xda, 0x18, 0x96, 0xa3, 0xd7, 0xa3, 0x72, 0x65, 0x52, 0xf5, 0x94,
	0xfa, 0x91, 0xa6, 0xbe, 0x57, 0x3e, 0x9d, 0xcb, 0x6f, 0x0d, 0x5c, 0x8b, 0xee, 0x3e, 0xfc, 0xec,
	0x7e, 0x48, 0x65, 0xbd, 0xf9, 0xac, 0x52, 0x63, 0x0d, 0x37, 0xfd, 0xa2, 0x1f, 0x02, 0x71, 0x6b,
	0x8c, 0x9b, 0xcf, 0xfc, 0xa3, 0x7f, 0x13, 0xf8, 0x21, 0xf3, 0xf5, 0xc7, 0xfa, 0xb3, 0xbc, 0xfe,
	0xb9, 0xfe, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0x2e, 0x76, 0xfb, 0x4c, 0x10, 0x00, 0x00,
}
