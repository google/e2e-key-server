// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package client

import (
	"context"
	"crypto"
	"testing"

	"github.com/google/keytransparency/core/crypto/vrf/p256"
	"github.com/google/keytransparency/core/fake"

	"github.com/google/trillian"
	"github.com/google/trillian/client"
	"github.com/google/trillian/crypto/keys/pem"
	"github.com/google/trillian/merkle/hashers"

	"github.com/golang/protobuf/ptypes"
	"github.com/golang/protobuf/ptypes/any"

	pb "github.com/google/keytransparency/core/api/v1/keytransparency_proto"
	tcrypto "github.com/google/trillian/crypto"
	_ "github.com/google/trillian/merkle/coniks" // Register coniks
)

var (
	domainID = "default"
	VRFPub   = []byte(`-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5AV2WCmStBt4N2Dx+7BrycJFbxhW
f5JqSoyp0uiL8LeNYyj5vgklK8pLcyDbRqch9Az8jXVAmcBAkvaSrLW8wQ==
-----END PUBLIC KEY-----`)
	// openssl ecparam -name prime256v1 -genkey -out p256-key.pem
	testPrivKey1 = `-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIBoLpoKGPbrFbEzF/ZktBSuGP+Llmx2wVKSkbdAdQ+3JoAoGCCqGSM49
AwEHoUQDQgAE+xVOdphkfpEtl7OF8oCyvWw31dV4hnGbXDPbdFlL1nmayhnqyEfR
dXNlpBT2U9hXcSxliKI1rHrAJFDx3ncttA==
-----END EC PRIVATE KEY-----`
	// openssl ec -in p256-key.pem -pubout -out p256-pubkey.pem
	testPubKey1 = `-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+xVOdphkfpEtl7OF8oCyvWw31dV4
hnGbXDPbdFlL1nmayhnqyEfRdXNlpBT2U9hXcSxliKI1rHrAJFDx3ncttA==
-----END PUBLIC KEY-----`
	domainPB = &keytransparency_proto.Domain{
		DomainId: "domain_5577006791947779410",
		Log: &trillian.Tree{
			TreeId:             2557154934846783189,
			TreeType:           1,
			HashStrategy:       3,
			HashAlgorithm:      4,
			SignatureAlgorithm: 3,
			PublicKey: &keyspb.PublicKey{
				Der: {0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0x51, 0xfc, 0xf1, 0xa4, 0xbc, 0xd1, 0xe4, 0x10, 0xae, 0x57, 0x92, 0x8a, 0x66, 0x3e, 0x44, 0x65, 0xff, 0x83, 0x5, 0xa9, 0x72, 0x8b, 0xb6, 0xf8, 0xc0, 0x35, 0xdb, 0x67, 0xd1, 0x7b, 0xd9, 0xbd, 0x20, 0xac, 0x27, 0x26, 0x58, 0x66, 0x88, 0xf, 0x9f, 0x6d, 0x6b, 0xf9, 0x1c, 0xd6, 0x92, 0x7, 0xfc, 0x4e, 0x7c, 0xf7, 0xa3, 0x12, 0x43, 0xe6, 0x69, 0xc4, 0xac, 0x69, 0xcd, 0x9a, 0xd0, 0xc5},
			},
		},
		Map: &trillian.Tree{
			TreeId:             1023392002763969093,
			TreeType:           2,
			HashStrategy:       4,
			HashAlgorithm:      4,
			SignatureAlgorithm: 3,
			PublicKey: &keyspb.PublicKey{
				Der: {0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0x15, 0xe5, 0xa8, 0xd0, 0x92, 0x5a, 0xf7, 0x9e, 0xba, 0xfe, 0x5d, 0xaf, 0x7e, 0x13, 0x8a, 0xc5, 0xd4, 0x37, 0xb1, 0x6d, 0x9, 0x77, 0x80, 0x16, 0xaf, 0xfb, 0x1b, 0xcd, 0x85, 0xfd, 0x7c, 0x8a, 0x2, 0x3e, 0x61, 0xb6, 0x41, 0x10, 0xb6, 0xe2, 0xa, 0xc1, 0xb8, 0xac, 0x5a, 0x97, 0x85, 0x90, 0x48, 0xa5, 0x4e, 0xca, 0x62, 0x23, 0x32, 0xd3, 0xb4, 0xaa, 0x6e, 0xde, 0x43, 0x91, 0xa9, 0x28},
			},
		},
		Vrf: &keyspb.PublicKey{
			Der: {0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0xfb, 0x15, 0x4e, 0x76, 0x98, 0x64, 0x7e, 0x91, 0x2d, 0x97, 0xb3, 0x85, 0xf2, 0x80, 0xb2, 0xbd, 0x6c, 0x37, 0xd5, 0xd5, 0x78, 0x86, 0x71, 0x9b, 0x5c, 0x33, 0xdb, 0x74, 0x59, 0x4b, 0xd6, 0x79, 0x9a, 0xca, 0x19, 0xea, 0xc8, 0x47, 0xd1, 0x75, 0x73, 0x65, 0xa4, 0x14, 0xf6, 0x53, 0xd8, 0x57, 0x71, 0x2c, 0x65, 0x88, 0xa2, 0x35, 0xac, 0x7a, 0xc0, 0x24, 0x50, 0xf1, 0xde, 0x77, 0x2d, 0xb4},
		},
	}
)

func mustMetadataAsAny(t *testing.T, meta *pb.MapperMetadata) *any.Any {
	if meta == nil {
		meta = &pb.MapperMetadata{}
	}
	metaAny, err := ptypes.MarshalAny(meta)
	if err != nil {
		t.Fatal(err)
	}
	return metaAny
}

// signs signs smr with s.
func sign(s crypto.Signer, smr *trillian.SignedMapRoot) *trillian.SignedMapRoot {
	signer := &tcrypto.Signer{Hash: crypto.SHA256, Signer: s}
	sig, err := signer.SignObject(smr)
	if err != nil {
		panic(err)
	}
	smr.Signature = sig
	return smr
}

// Test vectors were obtained by observing the integration tests, in particular by adding logging
// output around the calls to GetEntry and VerifyGetEntryResponse in grpc_client.go, and the input
// to merkle.VerifyMapInclusionProof in VerifyGetEntryResponse.
func TestVerifyGetEntryResponse(t *testing.T) {
	ctx := context.Background()

	vrfPub, err := p256.NewVRFVerifierFromPEM(VRFPub)
	if err != nil {
		t.Fatal(err)
	}
	mapPub, err := pem.UnmarshalPublicKey(testPubKey1)
	if err != nil {
		t.Fatal(err)
	}
	mapHasher, err := hashers.NewMapHasher(trillian.HashStrategy_CONIKS_SHA512_256)
	if err != nil {
		t.Fatal(err)
	}
	signer, err := pem.UnmarshalPrivateKey(testPrivKey1, "")
	if err != nil {
		t.Fatal(err)
	}
	mapVerifier := &client.MapVerifier{
		PubKey: mapPub,
		Hasher: mapHasher,
	}

	v := NewVerifier(vrfPub, mapVerifier, fake.NewTrillianLogVerifier())

	for _, tc := range []struct {
		desc          string
		wantErr       bool
		userID, appID string
		trusted       trillian.SignedLogRoot
		in            *pb.GetEntryResponse
	}{
		{
			desc:   "empty",
			userID: "noalice",
			appID:  "app",
			in: &pb.GetEntryResponse{
				VrfProof:  []byte{0x46, 0xae, 0x42, 0xd5, 0x0f, 0x0e, 0x24, 0xa8, 0x22, 0xa3, 0xf1, 0x55, 0xc6, 0xcd, 0xa0, 0x7b, 0xf6, 0xbb, 0x1d, 0x47, 0x13, 0x22, 0x00, 0xc1, 0x4c, 0xe3, 0x80, 0x2c, 0x01, 0x2d, 0xad, 0x37, 0xa4, 0x32, 0xcf, 0x4a, 0x5e, 0xc9, 0xd5, 0x9b, 0x20, 0x5c, 0x68, 0xdd, 0x8f, 0xf4, 0x21, 0x51, 0x7e, 0x24, 0x77, 0xb0, 0xca, 0x9b, 0x60, 0xd0, 0x03, 0x63, 0x9a, 0x48, 0xaa, 0x26, 0x84, 0xa0, 0x04, 0x0b, 0x13, 0x89, 0xd7, 0xc6, 0x63, 0x22, 0x39, 0x18, 0x73, 0x72, 0xfa, 0x32, 0xf6, 0xeb, 0x03, 0x08, 0x5d, 0x07, 0x4e, 0x02, 0x3a, 0xc6, 0x7f, 0x89, 0xe8, 0x44, 0x27, 0xcb, 0x73, 0xdc, 0xf2, 0x2f, 0xcc, 0xcd, 0x90, 0x6e, 0x97, 0xcb, 0x22, 0xff, 0x6e, 0xdb, 0x74, 0x22, 0xbf, 0x28, 0x27, 0x9b, 0x9e, 0x26, 0x1a, 0xe4, 0xc6, 0x16, 0x59, 0x4f, 0x7d, 0xcc, 0xb9, 0x8e, 0x7d, 0x41, 0xf7},
				Committed: nil,
				LeafProof: &trillian.MapLeafInclusion{
					Leaf:      &trillian.MapLeaf{},
					Inclusion: make([][]byte, 256),
				},
				Smr: sign(signer, &trillian.SignedMapRoot{
					TimestampNanos: 1506524755543208185,
					RootHash:       []byte{0x0e, 0xfc, 0x54, 0xad, 0xe0, 0xfc, 0xe8, 0x76, 0x55, 0x8c, 0x97, 0x38, 0xf5, 0xaa, 0x89, 0xe4, 0xd9, 0x9c, 0x0b, 0x8b, 0x6f, 0xe0, 0xb6, 0x2d, 0xbf, 0x63, 0x59, 0xcf, 0xc2, 0xad, 0xbb, 0xd7},
					MapId:          9175411803742040796,
					MapRevision:    1,
					Metadata:       mustMetadataAsAny(t, &pb.MapperMetadata{}),
				}),
			},
			wantErr: false,
		},
		{
			desc:    "Tree size 2",
			userID:  "nocarol",
			appID:   "app",
			trusted: trillian.SignedLogRoot{},
			in: &pb.GetEntryResponse{
				VrfProof:  []byte{0x9f, 0x8f, 0xb1, 0x41, 0xbc, 0x10, 0xcb, 0xe2, 0x02, 0xe8, 0x3e, 0x8a, 0xe2, 0xd0, 0xe7, 0xe3, 0xc9, 0xa2, 0x83, 0x94, 0x85, 0xf7, 0xca, 0x8f, 0x33, 0xb6, 0x52, 0x56, 0xb0, 0x76, 0x8e, 0xf9, 0x6e, 0x0c, 0x8a, 0x1c, 0xe6, 0x7d, 0x8b, 0xb6, 0x73, 0xb3, 0xae, 0x51, 0x36, 0x52, 0xab, 0x2b, 0x9d, 0x5a, 0x96, 0xdd, 0xae, 0x2a, 0x74, 0x74, 0x02, 0x6b, 0xdd, 0x16, 0x86, 0x70, 0x94, 0x15, 0x04, 0x7b, 0xcd, 0x07, 0x03, 0xb9, 0x69, 0xe3, 0x72, 0x35, 0xdb, 0xfc, 0xb2, 0xa3, 0x4c, 0x22, 0x6b, 0xaa, 0xce, 0x92, 0x6b, 0xcf, 0x02, 0x11, 0x78, 0x7b, 0x1f, 0x5c, 0x2f, 0xff, 0xb9, 0x34, 0x32, 0xa1, 0xd9, 0xba, 0xec, 0xa5, 0x9d, 0x5e, 0xa6, 0xbb, 0xb6, 0x77, 0x92, 0x4c, 0x0c, 0x2d, 0x76, 0xdf, 0xbe, 0x9e, 0xa0, 0x93, 0xde, 0xf5, 0xa1, 0xc1, 0x4e, 0x9e, 0x19, 0x39, 0x16, 0xfe, 0x60},
				Committed: nil,
				LeafProof: &trillian.MapLeafInclusion{
					Leaf: &trillian.MapLeaf{},
					Inclusion: append(make([][]byte, 255), []byte{
						92, 215, 13, 113, 97, 138, 214, 158, 13, 29, 227, 67, 236, 34, 215, 4, 76, 188, 79, 247, 149, 223, 227, 147, 86, 214, 90, 126, 192, 212, 113, 64,
					}),
				},
				Smr: sign(signer, &trillian.SignedMapRoot{
					TimestampNanos: 1506596629587264426,
					RootHash:       []byte{0x2c, 0x27, 0x03, 0xe0, 0x34, 0xf4, 0x00, 0x2f, 0x94, 0x1d, 0xfc, 0xea, 0x7a, 0x4e, 0x16, 0x03, 0xee, 0x8b, 0x4e, 0xe3, 0x75, 0xbd, 0xf8, 0x72, 0x5e, 0xb8, 0xaf, 0x04, 0xbf, 0xa3, 0xd1, 0x56},
					MapId:          2595744899657020594,
					MapRevision:    2,
					Metadata:       mustMetadataAsAny(t, &pb.MapperMetadata{HighestFullyCompletedSeq: 1}),
				}),
				LogRoot: signSLR(signer, &tpb.SignedLogRoot{
					TimestampNanos: 1519219330710249000,
					RootHash:       []byte{0xff, 0x28, 0xc1, 0x3, 0x1d, 0x8a, 0xa, 0x55, 0x35, 0xc3, 0x7e, 0x2, 0x79, 0x2f, 0xa0, 0x31, 0x4, 0x2a, 0xcc, 0x36, 0x5a, 0xb7, 0x3f, 0xd7, 0x48, 0x88, 0x19, 0xc2, 0x4d, 0x50, 0xd, 0x4f},
					TreeSize:       3,
					LogId:          2557154934846783189,
					TreeRevision:   3,
				}),
			},
		},
		{
			desc:    "bob",
			userID:  "bob",
			appID:   "app",
			trusted: tpb.SignedLogRoot{},
			in: &pb.GetEntryResponse{
				VrfProof: []byte{0x5e, 0xa, 0x1, 0x65, 0xf1, 0x22, 0xcf, 0x4a, 0xcb, 0x0, 0xe1, 0x5f, 0x73, 0x8a, 0xc9, 0xb6, 0x4c, 0x71, 0x60, 0xc2, 0xca, 0xd4, 0x57, 0x20, 0x3a, 0xe, 0x62, 0x6b, 0x67, 0x26, 0xdd, 0x20, 0x3d, 0x6d, 0xd7, 0x69, 0x4, 0x2f, 0x7e, 0x31, 0x34, 0xa2, 0x5a, 0xa4, 0x34, 0xd, 0xfb, 0x14, 0x1f, 0x8b, 0x15, 0xe9, 0x87, 0xc3, 0xd2, 0xc3, 0x2f, 0x7c, 0x3d, 0x35, 0x1e, 0xae, 0x26, 0x5e, 0x4, 0x2e, 0xba, 0x7e, 0x3b, 0xaa, 0xa0, 0x7a, 0x5a, 0xd0, 0x69, 0x75, 0xa5, 0x99, 0x51, 0xb0, 0xf2, 0xff, 0xef, 0xd9, 0x9e, 0xc1, 0xb, 0xd4, 0xde, 0x72, 0xe5, 0x9b, 0xcb, 0x24, 0xe8, 0xbf, 0x1e, 0x2d, 0x95, 0x5a, 0x1d, 0xbc, 0xe2, 0xc8, 0xc9, 0x17, 0x4e, 0x47, 0x6, 0x63, 0x6b, 0x8a, 0x4d, 0x5e, 0xd4, 0x51, 0x5e, 0x3a, 0xef, 0xf3, 0x2b, 0xe7, 0x31, 0xad, 0x97, 0x34, 0xec, 0x8b, 0x46},
				Committed: &pb.Committed{
					Key:  []byte{0x2a, 0xd6, 0xc0, 0x70, 0xc5, 0xf1, 0xb5, 0x98, 0x1c, 0xb7, 0xd, 0xb3, 0xa7, 0x67, 0xee, 0x40},
					Data: []byte{0x62, 0x6f, 0x62, 0x2d, 0x6b, 0x65, 0x79, 0x34},
				},
				LeafProof: &tpb.MapLeafInclusion{
					Leaf: &tpb.MapLeaf{
						LeafValue: []byte{0x12, 0x90, 0x1, 0xa, 0x40, 0x62, 0x63, 0x36, 0x33, 0x65, 0x34, 0x65, 0x61, 0x66, 0x33, 0x63, 0x39, 0x62, 0x33, 0x39, 0x63, 0x36, 0x32, 0x37, 0x65, 0x30, 0x38, 0x34, 0x38, 0x66, 0x33, 0x62, 0x39, 0x35, 0x38, 0x64, 0x31, 0x33, 0x30, 0x63, 0x36, 0x64, 0x65, 0x30, 0x32, 0x39, 0x65, 0x34, 0x35, 0x38, 0x38, 0x35, 0x65, 0x32, 0x66, 0x37, 0x39, 0x31, 0x31, 0x62, 0x39, 0x64, 0x31, 0x39, 0x64, 0x38, 0x65, 0x65, 0x65, 0x12, 0x4c, 0x8, 0x4, 0x10, 0x3, 0x1a, 0x46, 0x30, 0x44, 0x2, 0x20, 0x18, 0x6c, 0x18, 0x82, 0xf1, 0x8d, 0xff, 0xbb, 0xd8, 0xf8, 0xc6, 0xa8, 0x44, 0x4e, 0x8, 0x47, 0x19, 0xde, 0x73, 0x79, 0xfa, 0x43, 0x68, 0x78, 0x36, 0x36, 0x59, 0xbe, 0xa3, 0x5b, 0xe1, 0x5d, 0x2, 0x20, 0x1d, 0xc6, 0xfc, 0xc8, 0x4e, 0x5a, 0xc, 0x66, 0x81, 0x25, 0x3b, 0x85, 0xc4, 0xdf, 0x92, 0x6f, 0x6f, 0x47, 0x82, 0x3f, 0xeb, 0x6e, 0xfa, 0xfd, 0x66, 0x76, 0xed, 0x61, 0xcb, 0xd5, 0xb0, 0x6f, 0x1a, 0x20, 0x8, 0x31, 0x51, 0x76, 0xc7, 0xbb, 0xf4, 0x5a, 0x5a, 0xec, 0x91, 0x5a, 0x49, 0x9, 0x34, 0xe6, 0x33, 0x6e, 0x78, 0x5f, 0xd, 0xd1, 0x1, 0x84, 0x46, 0x4f, 0xf6, 0xb, 0xcc, 0x79, 0x85, 0x39, 0x32, 0x20, 0x7c, 0xb4, 0xa, 0x17, 0x7b, 0x5c, 0x2c, 0x26, 0x95, 0xf4, 0x2, 0x36, 0x16, 0xf9, 0xa9, 0xb0, 0xfa, 0xad, 0x29, 0xf5, 0xf2, 0x69, 0xa1, 0xb, 0x23, 0x4, 0x60, 0x35, 0x9a, 0x61, 0x36, 0x95, 0x3a, 0x5d, 0xa, 0x5b, 0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0x24, 0xa0, 0xdb, 0x47, 0x8b, 0xb2, 0x85, 0x23, 0x17, 0x5b, 0xcd, 0x31, 0xd3, 0x63, 0x6d, 0x61, 0x15, 0x5, 0x94, 0xc4, 0x1b, 0x2c, 0xe0, 0x3e, 0xb4, 0xb7, 0xbf, 0x31, 0xbc, 0x19, 0xeb, 0xd4, 0x91, 0x74, 0x6e, 0x91, 0xc7, 0xdd, 0x9f, 0xf6, 0xd6, 0xc2, 0xe9, 0xdc, 0xfb, 0x51, 0x5b, 0x32, 0x23, 0xbb, 0xc8, 0x8d, 0x2f, 0xbd, 0xeb, 0x5b, 0x4, 0x2c, 0xe, 0x85, 0x79, 0x1f, 0x75, 0x94, 0x42, 0x20, 0xbe, 0xc3, 0x7a, 0xb0, 0xda, 0xb1, 0xaf, 0xa8, 0x27, 0x48, 0x39, 0x54, 0xfa, 0xe, 0x45, 0x6e, 0xb5, 0xcc, 0x7, 0xd8, 0x2e, 0x41, 0xfb, 0xfb, 0xe5, 0x28, 0x34, 0xbd, 0xf2, 0x11, 0x70, 0x10},
					},
					Inclusion: make([][]byte, 256),
				},
				Smr: signSMR(signer, &tpb.SignedMapRoot{
					TimestampNanos: 1519219333313289000,
					RootHash:       []byte{0x38, 0x99, 0xdc, 0x44, 0x51, 0xac, 0xb3, 0x53, 0xa2, 0x75, 0x9b, 0xa3, 0x65, 0xdd, 0x33, 0x3a, 0x53, 0xec, 0x6d, 0x54, 0x8a, 0x2c, 0xc9, 0x4f, 0xde, 0x78, 0xab, 0xcf, 0x6c, 0xda, 0xc0, 0xe9},
					MapId:          1023392002763969093,
					MapRevision:    5,
				}),
				LogRoot: signSLR(signer, &tpb.SignedLogRoot{
					TimestampNanos: 1519219333732320000,
					RootHash:       []byte{0x78, 0x6e, 0x65, 0xcd, 0xa4, 0x47, 0x35, 0x2b, 0x38, 0x96, 0x95, 0x5f, 0x77, 0xe9, 0x2f, 0x9f, 0x2e, 0xd5, 0xbe, 0x6d, 0x9d, 0x23, 0x37, 0xd6, 0x47, 0x1a, 0xa0, 0x92, 0xd8, 0x75, 0x96, 0xed},
					TreeSize:       6,
					LogId:          2557154934846783189,
					TreeRevision:   6,
				}),
				LogConsistency: [][]byte{
					{0x20, 0x67, 0xe, 0x3b, 0x27, 0xd9, 0x68, 0xa0, 0x18, 0x3a, 0x9c, 0xde, 0x2e, 0xd5, 0xf0, 0x6f, 0x16, 0x3d, 0xfd, 0x79, 0xcc, 0x57, 0xea, 0x25, 0xe6, 0x4f, 0xbc, 0x86, 0xaa, 0xce, 0x61, 0x93},
					{0xee, 0x69, 0xbd, 0x33, 0xc8, 0xf2, 0xf8, 0x21, 0xa9, 0x28, 0x39, 0x78, 0x4a, 0x67, 0xb3, 0xf3, 0x7d, 0xb4, 0xc5, 0x70, 0x51, 0xfb, 0x37, 0x9a, 0x4f, 0xf1, 0x3c, 0x9e, 0x9f, 0xaf, 0xbd, 0x7},
					{0xce, 0x73, 0x8, 0x6f, 0xb6, 0x23, 0x2, 0x5f, 0x6f, 0x7d, 0xe3, 0x9c, 0x62, 0x38, 0x32, 0xbe, 0x83, 0xc7, 0x2c, 0xa5, 0x2f, 0x33, 0x48, 0xa, 0x11, 0xca, 0xad, 0xd3, 0xe5, 0x1f, 0x6d, 0x9f},
				},
				LogInclusion: [][]byte{
					{0x8, 0xd4, 0x7c, 0x1c, 0x7f, 0xac, 0x39, 0x7b, 0x2d, 0x5a, 0x5e, 0x5, 0x2e, 0x6b, 0xed, 0xb, 0x9c, 0xa3, 0x46, 0x83, 0x28, 0x41, 0xaa, 0x20, 0x28, 0xea, 0x4, 0x36, 0xa7, 0xc5, 0xbf, 0x78},
					{0x64, 0x55, 0xaa, 0xb5, 0xe9, 0x39, 0x91, 0xfe, 0x54, 0x59, 0xf, 0x89, 0x65, 0xd, 0xcb, 0x46, 0xfa, 0x87, 0x17, 0x6b, 0xd6, 0x3e, 0x5e, 0xcc, 0x69, 0x4, 0x84, 0xdb, 0xba, 0x11, 0x33, 0x75},
				},
			},
		},
	} {
		err := v.VerifyGetEntryResponse(ctx, domainID, tc.appID, tc.userID, tc.trusted, tc.in)
		if got, want := err != nil, tc.wantErr; got != want {
			t.Errorf("VerifyGetEntryResponse(%v, %v, %v, %v): %t, wantErr %t (err=%v)",
				tc.userID, tc.appID, tc.trusted, tc.in, got, want, err)
		}
	}
}
