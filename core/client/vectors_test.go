// Copyright 2018 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package client

import (
	"github.com/golang/protobuf/ptypes/any"
	"github.com/golang/protobuf/ptypes/duration"
	"github.com/golang/protobuf/ptypes/timestamp"
	"github.com/google/trillian/crypto/keyspb"
	"github.com/google/trillian/crypto/sigpb"
	"github.com/google/trillian/types"

	"github.com/google/keytransparency/core/api/v1/keytransparency_proto"
	"github.com/google/trillian"
)

// GetEntryResponseVector is a captured GetEntryResponse that should verify without errors.
type GetEntryResponseVector struct {
	desc          string
	appID, userID string
	trusted       types.LogRootV1
	resp          *keytransparency_proto.GetEntryResponse
}

var (
	domainPB = &keytransparency_proto.Domain{
		DomainId: "domain_5577006791947779410",
		Log: &trillian.Tree{
			TreeId:             5770492153431832062,
			TreeState:          1,
			TreeType:           1,
			HashStrategy:       3,
			HashAlgorithm:      4,
			SignatureAlgorithm: 3,
			DisplayName:        "KT SMH Log",
			Description:        "KT domain domain_5577006791947779410",
			PrivateKey:         (*any.Any)(nil),
			StorageSettings:    (*any.Any)(nil),
			PublicKey: &keyspb.PublicKey{
				Der: []byte{0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0xa8, 0x65, 0xcf, 0x9e, 0x13, 0x8, 0x72, 0x54, 0x66, 0x60, 0x74, 0xa6, 0x2, 0x70, 0x8c, 0x99, 0xf0, 0xd4, 0x27, 0xd8, 0x8d, 0x4, 0xc9, 0x85, 0xc5, 0x1f, 0xf0, 0x1c, 0x97, 0x4b, 0xd7, 0x60, 0x2e, 0x55, 0x49, 0x20, 0x72, 0xe8, 0x5b, 0x12, 0x9d, 0xa1, 0xcb, 0x91, 0x13, 0xb3, 0xb6, 0xdf, 0x15, 0xcd, 0x8f, 0xf7, 0x92, 0x18, 0x16, 0x59, 0x9b, 0x8a, 0xe1, 0xcc, 0xab, 0x75, 0x18, 0xfc},
			},
			MaxRootDuration: &duration.Duration{},
			CreateTime:      &timestamp.Timestamp{Seconds: 1519390804, Nanos: 91000000},
			UpdateTime:      &timestamp.Timestamp{Seconds: 1519390804, Nanos: 91000000},
			Deleted:         false,
			DeleteTime:      (*timestamp.Timestamp)(nil),
		},
		Map: &trillian.Tree{
			TreeId:             6174413707957232682,
			TreeState:          1,
			TreeType:           2,
			HashStrategy:       4,
			HashAlgorithm:      4,
			SignatureAlgorithm: 3,
			DisplayName:        "KT Map",
			Description:        "KT domain domain_5577006791947779410",
			PrivateKey:         (*any.Any)(nil),
			StorageSettings:    (*any.Any)(nil),
			PublicKey: &keyspb.PublicKey{
				Der: []byte{0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0x58, 0xb1, 0xe6, 0xd1, 0x32, 0xd8, 0x69, 0x3c, 0xc4, 0x36, 0x93, 0xe4, 0x6, 0x5d, 0x84, 0xef, 0xdc, 0x92, 0xa8, 0x92, 0x3e, 0x11, 0x6e, 0x75, 0x56, 0x9a, 0x16, 0x87, 0xbc, 0x2a, 0x63, 0x73, 0xa3, 0x48, 0x97, 0x1f, 0xb7, 0x8c, 0xe0, 0x11, 0xe3, 0x5e, 0x1d, 0x81, 0x1b, 0xfd, 0x3d, 0xa3, 0x4, 0x51, 0xf8, 0x79, 0x88, 0x38, 0x89, 0x23, 0x7b, 0xf, 0xf5, 0x58, 0x68, 0x9c, 0x49, 0x44},
			},
			MaxRootDuration: &duration.Duration{},
			CreateTime:      &timestamp.Timestamp{Seconds: 1519390804, Nanos: 98000000},
			UpdateTime:      &timestamp.Timestamp{Seconds: 1519390804, Nanos: 98000000},
			Deleted:         false,
			DeleteTime:      (*timestamp.Timestamp)(nil),
		},
		Vrf: &keyspb.PublicKey{
			Der: []byte{0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0x17, 0x63, 0xe6, 0xda, 0x42, 0xb2, 0x6b, 0xe2, 0x41, 0xba, 0x7d, 0x50, 0x46, 0x62, 0x90, 0x31, 0xca, 0xc, 0x38, 0x80, 0x4d, 0x5a, 0x9f, 0x1f, 0x8c, 0x40, 0xa4, 0x25, 0x7f, 0xbf, 0x84, 0xd5, 0x9d, 0x57, 0x55, 0xa, 0x6f, 0x5d, 0x96, 0xfb, 0x25, 0xdc, 0x5f, 0x63, 0x2a, 0x37, 0xb6, 0x4c, 0x5f, 0xbe, 0xe1, 0x4b, 0xd9, 0x8b, 0xba, 0xcf, 0xd6, 0x68, 0x4d, 0xd, 0x4b, 0x7e, 0xf4, 0x98},
		},
		MinInterval: (*duration.Duration)(nil),
		MaxInterval: (*duration.Duration)(nil),
		Deleted:     false,
	}

	getEntryResponses = []GetEntryResponseVector{
		{
			desc:   "empty_alice",
			appID:  "app",
			userID: "alice",
			resp: &keytransparency_proto.GetEntryResponse{
				VrfProof:  []byte{0x9f, 0xd1, 0x9b, 0xe3, 0xb0, 0x16, 0xf1, 0x55, 0x2d, 0x9a, 0x8a, 0x94, 0x1f, 0x34, 0x36, 0xf1, 0x2, 0x74, 0x2c, 0xaf, 0x3f, 0x2, 0x64, 0x1c, 0x43, 0xae, 0xa3, 0xa3, 0xa0, 0x9d, 0x52, 0xab, 0xdb, 0x4c, 0x9, 0xc5, 0xea, 0xcc, 0xef, 0x10, 0x16, 0x2e, 0xa2, 0x2f, 0x6, 0xe1, 0x17, 0xd3, 0xf9, 0xc7, 0xec, 0xe9, 0x5b, 0xb6, 0xd, 0x46, 0x4, 0x63, 0xab, 0x53, 0xd4, 0xd1, 0xf9, 0xa4, 0x4, 0xae, 0xf8, 0xfd, 0x9b, 0x34, 0x81, 0x44, 0x52, 0xcd, 0xda, 0x8a, 0xe3, 0x6f, 0x63, 0x71, 0xf3, 0xa6, 0x94, 0xd9, 0x5b, 0x65, 0xcc, 0x50, 0x9c, 0xe5, 0xa9, 0x33, 0x54, 0xca, 0x8, 0x74, 0xe2, 0xf9, 0x3, 0x26, 0x89, 0xf, 0xde, 0xf9, 0xdb, 0x81, 0xff, 0xd0, 0xca, 0x66, 0x8, 0x72, 0x56, 0xf9, 0x19, 0xd0, 0x1c, 0xbf, 0x47, 0x59, 0xc9, 0x1c, 0x49, 0x61, 0x9b, 0xe6, 0x2c, 0xb7, 0xa4},
				Committed: (*keytransparency_proto.Committed)(nil),
				LeafProof: &trillian.MapLeafInclusion{
					Leaf:      &trillian.MapLeaf{},
					Inclusion: make([][]byte, 256),
				},
				Smr: &trillian.SignedMapRoot{
					MapRoot: []byte{0x0, 0x1, 0x20, 0x5, 0xc, 0x17, 0xaa, 0xf9, 0x6b, 0xae, 0x4f, 0xdd, 0xcf, 0xb8, 0x88, 0x77, 0xd6, 0xed, 0x23, 0x62, 0x73, 0xe6, 0xf9, 0x76, 0x2d, 0x6b, 0x5d, 0x54, 0x4a, 0x7, 0x1b, 0x16, 0xa4, 0xa7, 0x40, 0x15, 0x1e, 0x3e, 0x8f, 0xe0, 0x82, 0x63, 0xb9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
					Signature: &sigpb.DigitallySigned{
						HashAlgorithm:      4,
						SignatureAlgorithm: 3,
						Signature:          []byte{0x30, 0x45, 0x2, 0x21, 0x0, 0xdc, 0xaf, 0x77, 0x85, 0xf4, 0xbc, 0x13, 0x4b, 0xec, 0xc7, 0x89, 0x73, 0xc8, 0x1b, 0x22, 0x14, 0x6c, 0x59, 0xea, 0x9b, 0xb1, 0xa1, 0xe6, 0x39, 0x87, 0x5e, 0xba, 0x7d, 0x30, 0xd8, 0xc2, 0x8, 0x2, 0x20, 0x47, 0x21, 0x1d, 0xe8, 0x22, 0x82, 0xad, 0xfc, 0x83, 0xd4, 0xd9, 0xac, 0x8f, 0x10, 0xe9, 0x42, 0x8d, 0x1d, 0x52, 0xa2, 0x99, 0x8e, 0x6b, 0x31, 0xb4, 0x43, 0x69, 0xb5, 0xdb, 0x6e, 0x5b, 0xeb},
					},
				},
				LogRoot: &trillian.SignedLogRoot{
					TimestampNanos: 1521722512234876572,
					RootHash:       []byte{0xb6, 0xb0, 0xbd, 0xaf, 0xa8, 0x4f, 0xb3, 0xaf, 0xb4, 0xf6, 0xdf, 0x95, 0x8b, 0x44, 0xc0, 0x8a, 0xde, 0xa4, 0x27, 0xb0, 0xbd, 0xb9, 0x65, 0x3f, 0x50, 0x28, 0x22, 0xae, 0x86, 0x22, 0x43, 0xcc},
					TreeSize:       1,
					Signature: &sigpb.DigitallySigned{
						HashAlgorithm:      4,
						SignatureAlgorithm: 3,
						Signature:          []byte{0x30, 0x45, 0x2, 0x20, 0x3a, 0xab, 0x24, 0x59, 0xdb, 0x44, 0x48, 0xc5, 0x4c, 0xe5, 0x61, 0xea, 0xb3, 0x4e, 0x77, 0xf1, 0xbe, 0xd3, 0xc0, 0x89, 0x53, 0x62, 0x8e, 0xbc, 0xa0, 0x73, 0x6c, 0x69, 0xa2, 0xe4, 0x68, 0x7a, 0x2, 0x21, 0x0, 0x86, 0x82, 0xb7, 0x2e, 0x57, 0x5a, 0x59, 0x83, 0xf9, 0x41, 0x7c, 0x6f, 0xd1, 0x47, 0x6e, 0x45, 0xdf, 0xad, 0x99, 0x6d, 0xc7, 0xb3, 0xa0, 0x9e, 0xbb, 0xfe, 0x57, 0xaa, 0x8e, 0xac, 0x7d, 0x9},
					},
					TreeRevision: 1,
				},
			},
		},
		{
			desc:   "bob0_set",
			appID:  "app",
			userID: "bob",
			resp: &keytransparency_proto.GetEntryResponse{
				VrfProof: []byte{0x65, 0x5c, 0xf5, 0xbf, 0xd8, 0x85, 0xc3, 0x1f, 0xae, 0xa9, 0xad, 0x85, 0xd9, 0x5e, 0xe6, 0xdd, 0x1b, 0xba, 0xc3, 0x19, 0x57, 0x6e, 0x3, 0x9b, 0x67, 0xc5, 0xf0, 0x8e, 0xe4, 0x1a, 0xa6, 0xca, 0x99, 0xc2, 0x3c, 0x25, 0x38, 0xf2, 0xed, 0x63, 0x77, 0xfe, 0x13, 0xd, 0x5d, 0x39, 0x9b, 0x90, 0x86, 0xa6, 0xff, 0x1b, 0xcc, 0x29, 0x77, 0xb9, 0x7b, 0x6b, 0x9, 0x98, 0x9a, 0x85, 0x8a, 0xcc, 0x4, 0xd9, 0xbc, 0x4a, 0x9e, 0xe3, 0xba, 0xb5, 0xac, 0x99, 0xa3, 0x8d, 0xf, 0xe2, 0xd6, 0xe, 0xa4, 0x85, 0x45, 0xcb, 0x6d, 0xb9, 0x8e, 0x98, 0xf7, 0x19, 0xb1, 0xfc, 0xeb, 0x73, 0x74, 0x18, 0xc9, 0x87, 0xc, 0x62, 0x64, 0xb0, 0x1a, 0x70, 0xab, 0xda, 0x73, 0xdd, 0xe4, 0x3f, 0x8, 0xfb, 0xb5, 0xb5, 0x7, 0x98, 0x69, 0x55, 0x5a, 0xeb, 0x2c, 0xb7, 0x3d, 0x2c, 0x39, 0x10, 0xf, 0x89, 0xce},
				Committed: &keytransparency_proto.Committed{
					Key:  []byte{0x59, 0xed, 0x99, 0xbf, 0x45, 0x54, 0x44, 0xb9, 0x66, 0xf2, 0xd5, 0x8c, 0xd, 0xac, 0x88, 0x6c},
					Data: []byte{0x62, 0x6f, 0x62, 0x2d, 0x6b, 0x65, 0x79, 0x31},
				},
				LeafProof: &trillian.MapLeafInclusion{
					Leaf: &trillian.MapLeaf{
						Index:     nil,
						LeafHash:  nil,
						LeafValue: []byte{0x12, 0x90, 0x1, 0xa, 0x40, 0x30, 0x39, 0x32, 0x64, 0x34, 0x31, 0x62, 0x66, 0x65, 0x64, 0x66, 0x66, 0x65, 0x66, 0x66, 0x39, 0x37, 0x62, 0x61, 0x31, 0x39, 0x63, 0x65, 0x34, 0x30, 0x35, 0x61, 0x65, 0x63, 0x34, 0x33, 0x38, 0x36, 0x31, 0x33, 0x37, 0x66, 0x37, 0x34, 0x35, 0x37, 0x64, 0x39, 0x30, 0x32, 0x34, 0x63, 0x35, 0x37, 0x66, 0x33, 0x61, 0x33, 0x34, 0x39, 0x36, 0x66, 0x30, 0x30, 0x39, 0x38, 0x36, 0x65, 0x38, 0x12, 0x4c, 0x8, 0x4, 0x10, 0x3, 0x1a, 0x46, 0x30, 0x44, 0x2, 0x20, 0x58, 0xcf, 0x1, 0x21, 0xcd, 0xec, 0x50, 0xd, 0x8, 0x1d, 0x5b, 0x59, 0xa, 0x54, 0xf6, 0x31, 0x99, 0x4c, 0x75, 0x72, 0xfc, 0xaf, 0xfa, 0x6e, 0xbe, 0xca, 0x68, 0x98, 0x2f, 0xc0, 0xb, 0x64, 0x2, 0x20, 0x72, 0xe3, 0xbe, 0xc8, 0x14, 0x1e, 0x55, 0x65, 0x4a, 0xa1, 0xc5, 0x85, 0xad, 0x5e, 0xab, 0x75, 0xd2, 0x3f, 0x41, 0x0, 0xec, 0xa, 0xe4, 0xdf, 0x4d, 0xf2, 0x99, 0x5, 0x16, 0x8b, 0x92, 0xfd, 0x1a, 0x20, 0xf7, 0x9d, 0xa5, 0x6b, 0xf, 0xc7, 0xf4, 0xf9, 0x96, 0xf4, 0xd4, 0x22, 0xf4, 0x9a, 0xcd, 0x85, 0x58, 0xec, 0xce, 0x35, 0x23, 0xb, 0x6c, 0x66, 0xec, 0x2a, 0x2, 0xc8, 0x8e, 0x12, 0x32, 0x57, 0x32, 0x20, 0xc8, 0xf3, 0x70, 0xba, 0x1d, 0xd5, 0xbb, 0x10, 0x6, 0xad, 0x8e, 0x46, 0x86, 0xcf, 0xb, 0x85, 0x10, 0xc4, 0x77, 0x9d, 0x57, 0xa8, 0x5d, 0x5a, 0x75, 0x89, 0x63, 0xad, 0x5a, 0xe5, 0xde, 0xf, 0x3a, 0x5d, 0xa, 0x5b, 0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0xfb, 0x15, 0x4e, 0x76, 0x98, 0x64, 0x7e, 0x91, 0x2d, 0x97, 0xb3, 0x85, 0xf2, 0x80, 0xb2, 0xbd, 0x6c, 0x37, 0xd5, 0xd5, 0x78, 0x86, 0x71, 0x9b, 0x5c, 0x33, 0xdb, 0x74, 0x59, 0x4b, 0xd6, 0x79, 0x9a, 0xca, 0x19, 0xea, 0xc8, 0x47, 0xd1, 0x75, 0x73, 0x65, 0xa4, 0x14, 0xf6, 0x53, 0xd8, 0x57, 0x71, 0x2c, 0x65, 0x88, 0xa2, 0x35, 0xac, 0x7a, 0xc0, 0x24, 0x50, 0xf1, 0xde, 0x77, 0x2d, 0xb4, 0x42, 0x20, 0x1b, 0x16, 0xb1, 0xdf, 0x53, 0x8b, 0xa1, 0x2d, 0xc3, 0xf9, 0x7e, 0xdb, 0xb8, 0x5c, 0xaa, 0x70, 0x50, 0xd4, 0x6c, 0x14, 0x81, 0x34, 0x29, 0xf, 0xeb, 0xa8, 0xf, 0x82, 0x36, 0xc8, 0x3d, 0xb9},
						ExtraData: nil,
					},
					Inclusion: [][]byte{
						{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
						{0xac, 0xca, 0xed, 0xb3, 0x59, 0xfb, 0xe8, 0x69, 0xe7, 0xbe, 0x80, 0xca, 0x9a, 0xe9, 0xb5, 0xfc, 0x71, 0x25, 0x3b, 0xf1, 0xc7, 0x81, 0x1c, 0xb1, 0xa2, 0xc5, 0xd, 0x41, 0x81, 0xd9, 0xec, 0x55},
					},
				},
				Smr: &trillian.SignedMapRoot{
					MapRoot: []byte{0x0, 0x1, 0x20, 0x57, 0xc7, 0x94, 0x4d, 0x88, 0xfb, 0x1b, 0xac, 0xa8, 0xe0, 0xc1, 0x1, 0xdb, 0x1b, 0xd4, 0xd0, 0xb1, 0xa9, 0xbc, 0xbf, 0xf5, 0x25, 0xc1, 0x9c, 0x6e, 0xfc, 0xec, 0x7b, 0x9a, 0x7b, 0xd6, 0x3c, 0x15, 0x1e, 0x3e, 0x90, 0xa4, 0x62, 0x2c, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0},
					Signature: &sigpb.DigitallySigned{
						HashAlgorithm:      4,
						SignatureAlgorithm: 3,
						Signature:          []byte{0x30, 0x44, 0x2, 0x20, 0x21, 0x8e, 0xd, 0x19, 0x51, 0xff, 0x6a, 0x26, 0xb2, 0xc8, 0xca, 0x61, 0xbf, 0x2e, 0x56, 0xc4, 0xaa, 0xd2, 0xcc, 0x86, 0xa9, 0x48, 0x96, 0x85, 0xe7, 0x48, 0xad, 0xa6, 0xa, 0x36, 0x6, 0xb5, 0x2, 0x20, 0x77, 0x7, 0xe6, 0xb0, 0xa6, 0x91, 0x29, 0x41, 0x62, 0x10, 0xa9, 0x99, 0x38, 0x79, 0x4c, 0xa4, 0x5b, 0x68, 0xf0, 0xd, 0xd3, 0x1, 0xc2, 0xad, 0x98, 0x16, 0x87, 0x98, 0xe8, 0x71, 0xbf, 0x9},
					},
				},
				LogRoot: &trillian.SignedLogRoot{
					TimestampNanos: 1521722515243765968,
					RootHash:       []byte{0x9a, 0x91, 0x18, 0x27, 0xe1, 0x90, 0xd7, 0x53, 0x6b, 0x66, 0x28, 0x6b, 0x6, 0x1c, 0xd0, 0xdf, 0x5c, 0x1, 0x24, 0x2d, 0xe3, 0x1, 0x37, 0x95, 0x6f, 0x9b, 0x1d, 0x5c, 0x8b, 0x57, 0xd, 0x40},
					TreeSize:       4,
					Signature: &sigpb.DigitallySigned{
						HashAlgorithm:      4,
						SignatureAlgorithm: 3,
						Signature:          []byte{0x30, 0x45, 0x2, 0x21, 0x0, 0xca, 0xd7, 0x14, 0x8d, 0xf6, 0xdb, 0x17, 0xab, 0x6a, 0x41, 0x2c, 0x10, 0x74, 0xeb, 0xb5, 0x20, 0x1f, 0x60, 0xb4, 0xdb, 0x9d, 0xaf, 0x52, 0xc8, 0x56, 0x6, 0xea, 0x29, 0xb2, 0x1d, 0xb2, 0x73, 0x2, 0x20, 0x8, 0x9f, 0xee, 0xa6, 0xf9, 0xfd, 0x41, 0x50, 0x9a, 0x7f, 0x3a, 0xc2, 0xac, 0x81, 0x3e, 0xfe, 0x55, 0xe5, 0xa4, 0x2d, 0x9, 0x54, 0x78, 0xd4, 0xe4, 0x1f, 0xf6, 0xd, 0xc9, 0x69, 0xf0, 0xa0},
					},
					TreeRevision: 4,
					KeyHint:      []byte{0x78, 0xcf, 0x8, 0xa2, 0xc5, 0xa7, 0xb4, 0xec},
				},
				LogConsistency: [][]byte{
					{0x71, 0xdc, 0x45, 0xb4, 0x6a, 0xb0, 0x90, 0xa7, 0x66, 0xf7, 0x6d, 0x95, 0x9a, 0xcb, 0x34, 0x72, 0x59, 0xdf, 0x86, 0xfb, 0xcb, 0x77, 0x18, 0xab, 0x29, 0x59, 0x82, 0x92, 0x19, 0xe9, 0x38, 0xbe},
					{0x54, 0xc3, 0xb4, 0x9a, 0x6b, 0x60, 0xba, 0xd1, 0x13, 0xd3, 0x2e, 0xb, 0x1a, 0x21, 0x5e, 0x2f, 0xcf, 0xb4, 0x14, 0x25, 0x32, 0x4b, 0x1f, 0xc, 0x25, 0x21, 0x55, 0xc5, 0xd9, 0xd6, 0xed, 0x75},
					{0x6d, 0x48, 0x2f, 0xbd, 0xdd, 0xbb, 0x54, 0x7a, 0x73, 0x1e, 0xf0, 0x9c, 0x75, 0xf7, 0x87, 0x1f, 0xd3, 0xa6, 0x2b, 0x30, 0x26, 0x6f, 0xb6, 0xd0, 0xa8, 0x36, 0x1, 0x9d, 0xa7, 0xcb, 0x17, 0x99},
				},
				LogInclusion: [][]byte{
					{0x71, 0xdc, 0x45, 0xb4, 0x6a, 0xb0, 0x90, 0xa7, 0x66, 0xf7, 0x6d, 0x95, 0x9a, 0xcb, 0x34, 0x72, 0x59, 0xdf, 0x86, 0xfb, 0xcb, 0x77, 0x18, 0xab, 0x29, 0x59, 0x82, 0x92, 0x19, 0xe9, 0x38, 0xbe},
					{0x6d, 0x48, 0x2f, 0xbd, 0xdd, 0xbb, 0x54, 0x7a, 0x73, 0x1e, 0xf0, 0x9c, 0x75, 0xf7, 0x87, 0x1f, 0xd3, 0xa6, 0x2b, 0x30, 0x26, 0x6f, 0xb6, 0xd0, 0xa8, 0x36, 0x1, 0x9d, 0xa7, 0xcb, 0x17, 0x99},
				},
			},
		},
	}
)
