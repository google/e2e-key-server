// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Monitor Service
//
// The Key Transparency monitor server service consists of APIs to fetch
// monitor results queried using the mutations API.
package monitor.v1.service;

import "github.com/google/keytransparency/core/proto/monitor_v1_types/monitor_v1_types.proto";
import "google/api/annotations.proto";

// The Monitor Service API allows clients to query the monitors observed and
// validated signed map roots.
//
// - Signed Map Roots can be collected using the GetSignedMapRoot APIs.
// - Monitor resources are named:
//   - /v1/monitor/{kt-url}/map/results/{epoch}
//   - /v1/monitor/{kt-url}/map/results:latest
//
service MonitorService {
  // GetSignedMapRoot returns the latest valid signed map root the monitor
  // observed. Additionally, the response contains additional data necessary to
  // reproduce errors on failure.
  //
  // Returns the signed map root for the latest epoch the monitor observed. If
  // the monitor could not reconstruct the map root given the set of mutations
  // from the previous to the current epoch it won't sign the map root and
  // additional data will be provided to reproduce the failure.
  rpc GetSignedMapRoot(monitor.v1.types.GetMonitoringRequest)
    returns (monitor.v1.types.GetMonitoringResponse) {
    option (google.api.http) = { get: "/v1/monitor/{kt_URL}/map/results:latest" };
  }

  // GetSignedMapRootByRevision works similar to GetSignedMapRoot but returns
  // the monitor's result for a specific map revision.
  //
  // Returns the signed map root for the specified epoch the monitor observed.
  // If the monitor could not reconstruct the map root given the set of
  // mutations from the previous to the current epoch it won't sign the map root
  // and additional data will be provided to reproduce the failure.
  rpc GetSignedMapRootByRevision(monitor.v1.types.GetMonitoringRequest)
    returns(monitor.v1.types.GetMonitoringResponse) {
    option (google.api.http) = { get: "/v1/monitor/{kt_URL}/map/results/{epoch}" };
  }
}


