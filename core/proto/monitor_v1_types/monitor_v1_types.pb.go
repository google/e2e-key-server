// Code generated by protoc-gen-go. DO NOT EDIT.
// source: monitor_v1_types.proto

/*
Package monitor_v1_types is a generated protocol buffer package.

Key Transparency Monitor Service


It is generated from these files:
	monitor_v1_types.proto

It has these top-level messages:
	GetMonitoringRequest
	InvalidMutation
	NotMatchingMapRootProof
	GetMonitoringResponse
*/
package monitor_v1_types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import trillian "github.com/google/trillian"
import trillian1 "github.com/google/trillian"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// GetMonitoringRequest contains the input parameters of the GetMonitoring APIs.
type GetMonitoringRequest struct {
	// start specifies the start epoch number from which monitoring results will
	// be returned (ranging from [start, latestObserved] and starting at 1).
	Start int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
}

func (m *GetMonitoringRequest) Reset()                    { *m = GetMonitoringRequest{} }
func (m *GetMonitoringRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMonitoringRequest) ProtoMessage()               {}
func (*GetMonitoringRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetMonitoringRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

// InvalidMutation includes all information to reproduce that there was an
// invalid mutation from epoch e to e+1.
type InvalidMutation struct {
	// old_leaf is the inclusion proof to the leaf at epoch e.
	OldLeaf *trillian1.MapLeafInclusion `protobuf:"bytes,1,opt,name=old_leaf,json=oldLeaf" json:"old_leaf,omitempty"`
	// new_leaf is the inclusion proof to the leaf at epoch e+1.
	NewLeaf *trillian1.MapLeafInclusion `protobuf:"bytes,2,opt,name=new_leaf,json=newLeaf" json:"new_leaf,omitempty"`
}

func (m *InvalidMutation) Reset()                    { *m = InvalidMutation{} }
func (m *InvalidMutation) String() string            { return proto.CompactTextString(m) }
func (*InvalidMutation) ProtoMessage()               {}
func (*InvalidMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InvalidMutation) GetOldLeaf() *trillian1.MapLeafInclusion {
	if m != nil {
		return m.OldLeaf
	}
	return nil
}

func (m *InvalidMutation) GetNewLeaf() *trillian1.MapLeafInclusion {
	if m != nil {
		return m.NewLeaf
	}
	return nil
}

// NotMatchingMapRootProof contains all data necessary to reproduce that set of
// mutations does not produce new expected map root.
type NotMatchingMapRootProof struct {
	// map_root contains the map root hash the monitor observed.
	MapRoot *trillian.SignedMapRoot `protobuf:"bytes,1,opt,name=map_root,json=mapRoot" json:"map_root,omitempty"`
	// old_leafs is a list of inclusion proofs for the leafs in epoch e.
	OldLeafs []*trillian1.MapLeafInclusion `protobuf:"bytes,2,rep,name=old_leafs,json=oldLeafs" json:"old_leafs,omitempty"`
	// new_leafs is a list of inclusion proofs for changed leafs (from epoch e
	// to epoch e+1). Hashing these produces a different hash than root hash in
	// above's map_root.
	NewLeafs []*trillian1.MapLeafInclusion `protobuf:"bytes,3,rep,name=new_leafs,json=newLeafs" json:"new_leafs,omitempty"`
}

func (m *NotMatchingMapRootProof) Reset()                    { *m = NotMatchingMapRootProof{} }
func (m *NotMatchingMapRootProof) String() string            { return proto.CompactTextString(m) }
func (*NotMatchingMapRootProof) ProtoMessage()               {}
func (*NotMatchingMapRootProof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NotMatchingMapRootProof) GetMapRoot() *trillian.SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

func (m *NotMatchingMapRootProof) GetOldLeafs() []*trillian1.MapLeafInclusion {
	if m != nil {
		return m.OldLeafs
	}
	return nil
}

func (m *NotMatchingMapRootProof) GetNewLeafs() []*trillian1.MapLeafInclusion {
	if m != nil {
		return m.NewLeafs
	}
	return nil
}

type GetMonitoringResponse struct {
	// smr contains the map root for the sparse Merkle Tree signed with the
	// monitor's key on success. If the checks were not successful the
	// smr will be empty. The epochs are encoded into the smr map_revision.
	Smr *trillian.SignedMapRoot `protobuf:"bytes,1,opt,name=smr" json:"smr,omitempty"`
	// seen_timestamp_nanos contains the time in nanoseconds where this particular
	// signed map root was retrieved and processed. The actual timestamp of the
	// smr returned by the server is contained in above smr field.
	SeenTimestampNanos int64 `protobuf:"varint,2,opt,name=seen_timestamp_nanos,json=seenTimestampNanos" json:"seen_timestamp_nanos,omitempty"`
	// isValid signals if all verification steps for the requested epoch passed
	// or not.
	IsValid bool `protobuf:"varint,3,opt,name=isValid" json:"isValid,omitempty"`
	// invalidMapSigProof contains the signed map root received by the
	// key-transparency server, if and only if the key-server's signature was
	// invalid.
	InvalidMapSigProof *trillian.SignedMapRoot `protobuf:"bytes,4,opt,name=invalidMapSigProof" json:"invalidMapSigProof,omitempty"`
	// invalidLogSigProof contains the signed map root received by the
	// key-transparency server, if and only if the key-server's signature was
	// invalid.
	InvalidLogSigProof *trillian.SignedLogRoot `protobuf:"bytes,5,opt,name=invalidLogSigProof" json:"invalidLogSigProof,omitempty"`
	// invalidMutation contains data to reproduce that there was an invalid
	// mutation from epoch e to epoch e+1
	InvalidMutation *InvalidMutation `protobuf:"bytes,6,opt,name=invalidMutation" json:"invalidMutation,omitempty"`
	// NotMatchingMapRoot contains all data to reproduce that the set of mutations
	// does not produce observed new map root.
	NotMatchingMapRoot *NotMatchingMapRootProof `protobuf:"bytes,7,opt,name=notMatchingMapRoot" json:"notMatchingMapRoot,omitempty"`
}

func (m *GetMonitoringResponse) Reset()                    { *m = GetMonitoringResponse{} }
func (m *GetMonitoringResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMonitoringResponse) ProtoMessage()               {}
func (*GetMonitoringResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetMonitoringResponse) GetSmr() *trillian.SignedMapRoot {
	if m != nil {
		return m.Smr
	}
	return nil
}

func (m *GetMonitoringResponse) GetSeenTimestampNanos() int64 {
	if m != nil {
		return m.SeenTimestampNanos
	}
	return 0
}

func (m *GetMonitoringResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *GetMonitoringResponse) GetInvalidMapSigProof() *trillian.SignedMapRoot {
	if m != nil {
		return m.InvalidMapSigProof
	}
	return nil
}

func (m *GetMonitoringResponse) GetInvalidLogSigProof() *trillian.SignedLogRoot {
	if m != nil {
		return m.InvalidLogSigProof
	}
	return nil
}

func (m *GetMonitoringResponse) GetInvalidMutation() *InvalidMutation {
	if m != nil {
		return m.InvalidMutation
	}
	return nil
}

func (m *GetMonitoringResponse) GetNotMatchingMapRoot() *NotMatchingMapRootProof {
	if m != nil {
		return m.NotMatchingMapRoot
	}
	return nil
}

func init() {
	proto.RegisterType((*GetMonitoringRequest)(nil), "monitor.v1.types.GetMonitoringRequest")
	proto.RegisterType((*InvalidMutation)(nil), "monitor.v1.types.InvalidMutation")
	proto.RegisterType((*NotMatchingMapRootProof)(nil), "monitor.v1.types.NotMatchingMapRootProof")
	proto.RegisterType((*GetMonitoringResponse)(nil), "monitor.v1.types.GetMonitoringResponse")
}

func init() { proto.RegisterFile("monitor_v1_types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0x95, 0x2e, 0x6d, 0x82, 0x39, 0x14, 0x59, 0x81, 0xae, 0x72, 0x0a, 0x39, 0x35, 0x12,
	0xda, 0x92, 0x22, 0xc4, 0x23, 0x54, 0x15, 0xd9, 0x0a, 0xb9, 0x08, 0x89, 0xd3, 0xca, 0x4d, 0x1c,
	0x77, 0x24, 0xef, 0x8c, 0x59, 0x4f, 0x52, 0x71, 0xe2, 0xd1, 0xb8, 0xf2, 0x58, 0xc8, 0xbb, 0x9b,
	0xd0, 0xa6, 0x81, 0xf4, 0x66, 0xcf, 0xcc, 0xf7, 0xfb, 0xf7, 0x78, 0x2c, 0x5e, 0x97, 0x84, 0xc0,
	0x54, 0x15, 0xab, 0x49, 0xc1, 0x3f, 0xbc, 0x09, 0x99, 0xaf, 0x88, 0x49, 0xbe, 0x6c, 0xe3, 0xd9,
	0x6a, 0x92, 0xd5, 0xf1, 0xc1, 0xd8, 0x02, 0xdf, 0x2e, 0x6f, 0xb2, 0x19, 0x95, 0x67, 0x96, 0xc8,
	0x3a, 0x73, 0xc6, 0x15, 0x38, 0x07, 0x1a, 0x37, 0x8b, 0x06, 0x1e, 0x4c, 0x9e, 0x50, 0x5a, 0x94,
	0xda, 0x17, 0xda, 0x43, 0x83, 0x8c, 0xde, 0x8a, 0xfe, 0x85, 0xe1, 0xbc, 0x39, 0x14, 0xd0, 0x2a,
	0xf3, 0x7d, 0x69, 0x02, 0xcb, 0xbe, 0x38, 0x0c, 0xac, 0x2b, 0x4e, 0x3b, 0xc3, 0xce, 0x69, 0xa2,
	0x9a, 0xcd, 0xe8, 0xa7, 0x38, 0xbe, 0xc4, 0x95, 0x76, 0x30, 0xcf, 0x97, 0xac, 0x19, 0x08, 0xe5,
	0x07, 0xd1, 0x23, 0x37, 0x2f, 0x9c, 0xd1, 0x8b, 0xba, 0xf6, 0xc5, 0xf9, 0x20, 0xdb, 0xd8, 0xca,
	0xb5, 0x9f, 0x1a, 0xbd, 0xb8, 0xc4, 0x99, 0x5b, 0x06, 0x20, 0x54, 0x5d, 0x72, 0xf3, 0x18, 0x89,
	0x18, 0x9a, 0xbb, 0x06, 0x3b, 0xd8, 0x8f, 0xa1, 0xb9, 0x8b, 0x91, 0xd1, 0xaf, 0x8e, 0x38, 0xb9,
	0x22, 0xce, 0x35, 0xcf, 0x6e, 0x01, 0x6d, 0xae, 0xbd, 0x22, 0xe2, 0xcf, 0x15, 0xd1, 0x42, 0x9e,
	0x8b, 0x5e, 0xbc, 0x5b, 0x45, 0xc4, 0xad, 0x93, 0x93, 0xbf, 0x92, 0xd7, 0x60, 0xd1, 0xcc, 0xdb,
	0x7a, 0xd5, 0x2d, 0x9b, 0x85, 0xfc, 0x28, 0x9e, 0xaf, 0xdd, 0x87, 0xf4, 0x60, 0x98, 0xec, 0xf1,
	0xd1, 0x6b, 0xed, 0x87, 0x08, 0xae, 0xfd, 0x87, 0x34, 0xd9, 0x0f, 0xb6, 0x17, 0x08, 0xa3, 0xdf,
	0x89, 0x78, 0xb5, 0xd5, 0xf1, 0xe0, 0x09, 0x83, 0x91, 0x63, 0x91, 0x84, 0xb2, 0xda, 0x67, 0x3d,
	0xd6, 0xc8, 0x77, 0xa2, 0x1f, 0x8c, 0xc1, 0x82, 0xa1, 0x34, 0x81, 0x75, 0xe9, 0x0b, 0xd4, 0x48,
	0xa1, 0xee, 0x64, 0xa2, 0x64, 0xcc, 0x7d, 0x59, 0xa7, 0xae, 0x62, 0x46, 0xa6, 0xa2, 0x0b, 0xe1,
	0x6b, 0x7c, 0xb9, 0x34, 0x19, 0x76, 0x4e, 0x7b, 0x6a, 0xbd, 0x95, 0x17, 0x42, 0x42, 0xfb, 0xa6,
	0xda, 0x5f, 0x83, 0xad, 0x9b, 0x99, 0x3e, 0xfb, 0xbf, 0x8b, 0x1d, 0xc8, 0x3d, 0xa1, 0x29, 0xd9,
	0x8d, 0xd0, 0xe1, 0x6e, 0xa1, 0x29, 0xd9, 0x07, 0x42, 0xf7, 0x10, 0xf9, 0x49, 0x1c, 0xc3, 0xc3,
	0x29, 0x4b, 0x8f, 0x6a, 0x95, 0x37, 0xd9, 0xf6, 0xef, 0xc8, 0xb6, 0xc6, 0x51, 0x6d, 0x93, 0xf2,
	0x9b, 0x90, 0xf8, 0x68, 0x60, 0xd2, 0x6e, 0xad, 0x37, 0x7e, 0xac, 0xf7, 0x8f, 0xe1, 0x52, 0x3b,
	0x44, 0x6e, 0x8e, 0xea, 0x2f, 0xf4, 0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xda, 0xc5,
	0xc2, 0xcc, 0x03, 0x00, 0x00,
}
