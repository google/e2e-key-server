// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Key Transparency Service
//
// The Key Transparency Service API consists of a map of user names to public
// keys. Each user name also has a history of public keys that have been
// associated with it.
package keytransparency.v1.types;

import "crypto/keyspb/keyspb.proto";
import "crypto/sigpb/sigpb.proto";
import "trillian.proto";
import "trillian_map_api.proto";

//
// Data types.
//

// Committed represents the data committed to in a cryptographic commitment.
// commitment = HMAC_SHA512_256(key, data)
message Committed {
  // key is the 16 byte random commitment key.
  bytes key = 1;
  // data is the data being committed to.
  bytes data = 2;
}

// EntryUpdate contains the user entry update(s).
message EntryUpdate {
  // update authorizes the change to entry.
  SignedKV update = 2;
  // commitment contains the data committed to in update.commitment.
  Committed committed = 3;
}

//
// Verifiable Map Leaf Data and Mutation Data.
//

// Entry contains a commitment to profile and a set of authorized update keys.
// Entry is placed in the verifiable map as leaf data.
message Entry {
  // commitment is a cryptographic commitment to arbitrary data.
  bytes commitment = 1;
  // authorized_keys is the set of keys allowed to sign updates for this entry.
  repeated PublicKey authorized_keys = 2;
  // previous contains the hash of the previous entry that this mutation is
  // modifying creating a hash chain of all mutations. The hash used is
  // CommonJSON in "github.com/benlaurie/objecthash/go/objecthash".
  bytes previous = 3;
}

// PublicKey defines a key this domain uses to sign MapHeads with.
message PublicKey {
  // Key formats from Keyczar.
  oneof key_type {
    // ed25519 contains an ed25519 32 bytes key (<http://ed25519.cr.yp.to/>).
    bytes ed25519 = 1;
    // rsa_verifying_sha256_3072 contains a SHA256 RSA 3072-bit key.
    bytes rsa_verifying_sha256_3072 = 2;
    // ecdsa_verifying_p256 contains ECC P256 key.
    bytes ecdsa_verifying_p256 = 3;
  }
}

// KeyValue is a map entry.
message KeyValue {
  // key contains the map entry key.
  bytes key = 1;
  // TODO(ismail): make proto.Any
  // value contains the map entry value.
  bytes value = 2;
}

// SignedKV is a signed change to a map entry.
message SignedKV {
  // key_value is a serialized KeyValue.
  KeyValue key_value = 1;
  // signatures on key_value. Must be signed by keys from both previous and
  // current epochs. The first proves ownership of new epoch key, and the
  // second proves that the correct owner is making this change.
  map<string, sigpb.DigitallySigned> signatures = 2;
}

// Mutation contains the actual mutation and the inclusion proof of the
// corresponding leaf.
message Mutation {
  // update contains the actual mutation information.
  SignedKV update = 1;
  // proof contains a leaf and an inclusion proof in the map of the previous
  // epoch. This is used by Storage-less monitors.
  trillian.MapLeafInclusion proof = 2;
}

//
// RPC request/response messages.
//

// GetEntryRequest for a user object.
message GetEntryRequest {
  // user_id is the user identifier. Most commonly an email address.
  string user_id = 1;
  // app_id is the identifier for the application.
  string app_id = 2;
  // first_tree_size is the tree_size of the currently trusted log root. 
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 3;
}

// GetEntryResponse returns a requested user entry.
message GetEntryResponse {
  //
  // Privacy layer hides user_id and profile data until requested.
  //

  // vrf_proof is the proof for VRF on user_id.
  bytes vrf_proof = 1;

  // committed contains the profile for this account and connects the data
  // in profile to the commitment in leaf_proof.
  Committed committed = 2;

  //
  // Trillian map layer proves that the response is consistent.
  //

  // leaf_proof contains an Entry and an inclusion proof in the sparse Merkle
  // Tree.
  trillian.MapLeafInclusion leaf_proof = 3;
  // smr contains the signed map head for the sparse Merkle Tree.
  // smr is also stored in the append only log.
  trillian.SignedMapRoot smr = 4;

  //
  // Trillian log layer proves that smr is part of a globally consistent, append only log.
  //

  // log_root is the latest globally consistent log root.
  // TODO: gossip the log root to verify global consistency.
  trillian.SignedLogRoot log_root = 5;
  // log_consistency proves that log_root is consistent with previously seen roots.
  repeated bytes log_consistency = 6;
  // log_inclusion proves that smr is part of log_root at index=srm.MapRevision.
  repeated bytes log_inclusion = 7;
}

// ListEntryHistoryRequest gets a list of historical keys for a user.
message ListEntryHistoryRequest {
  // user_id is the user identifier.
  string user_id = 1;
  // start is the starting epoch.
  int64 start = 2;
  // page_size is the maximum number of entries to return.
  int32 page_size = 3;
  // app_id is the identifier for the application.
  string app_id = 4;
  // first_tree_size is the tree_size of the currently trusted log root. 
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 5;
}

// ListEntryHistoryResponse requests a paginated history of keys for a user.
message ListEntryHistoryResponse {
  // values represents the list of keys this user_id has contained over time.
  repeated GetEntryResponse values = 1;
  // next_start is the next page token to query for pagination.
  // next_start is 0 when there are no more results to fetch.
  int64 next_start = 2;
}

// UpdateEntryRequest updates a user's profile.
message UpdateEntryRequest {
  // user_id specifies the id for the user who's profile is being updated.
  string user_id = 1;
  // app_id is the identifier for the application.
  string app_id = 2;
  // first_tree_size is the tree_size of the currently trusted log root. 
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 3;
  // entry_update contains the user submitted update.
  EntryUpdate entry_update = 4;
}

// UpdateEntryResponse contains a proof once the update has been included in
// the Merkle Tree.
message UpdateEntryResponse {
  // proof contains a proof that the update has been included in the tree.
  GetEntryResponse proof = 1;
}

// GetMutationsRequest contains the input parameters of the GetMutation APIs.
message GetMutationsRequest {
  // epoch specifies the epoch number in which mutations will be returned.
  int64 epoch = 1;
  // first_tree_size is the tree_size of the currently trusted log root.
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 2;
  // page_token defines the starting point for pagination. An empty
  // value means start from the beginning. A non-empty value requests the next
  // page of values.
  string page_token = 3;
  // page_size is the maximum number of epochs to return.
  int32 page_size = 4;
}

// GetMutationsResponse contains the results of GetMutation APIs.
message GetMutationsResponse {
  // epoch specifies the epoch number of the returned mutations.
  int64 epoch = 1;
  // smr contains the signed map root for the sparse Merkle Tree.
  trillian.SignedMapRoot smr = 2;
  // log_root is the latest globally consistent log root.
  trillian.SignedLogRoot log_root = 3;
  // log_consistency proves that log_root is consistent with previously seen roots.
  repeated bytes log_consistency = 4;
  // log_inclusion proves that smr is part of log_root at index=srm.MapRevision.
  repeated bytes log_inclusion = 5;
  // mutation contains mutation information.
  repeated Mutation mutations = 6;
  // next_page_token is the next page token to query for pagination.
  // An empty value means there are no more results to fetch.
  // A non-zero value may be used by the client to fetch the next page of
  // results.
  string next_page_token = 7;
}

// GetDomainInfoRequest contains an empty request to query the GetDomainInfo
// APIs.
message GetDomainInfoRequest {}

// GetDomainInfoResponse contains the results of GetDomainInfo APIs.
message GetDomainInfoResponse {
  // Log contains the Log-Tree's info.
  trillian.Tree log = 1;
  // Map contains the Map-Tree's info.
  trillian.Tree map = 2;
  // Vrf contains the VRF public key.
  keyspb.PublicKey vrf = 3;
}