// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Key Transparency Service
//
// The Key Transparency Service API consists of a map of user names to public
// keys. Each user name also has a history of public keys that have been
// associated with it.
package keytransparency.v1;

import "github.com/google/key-transparency/core/proto/ctmap/ctmap.proto";

//
// Data types.
//

// Committed represents the data committed to in a cryptographic commitment.
// commitment = HMAC_SHA512_256(key, data)
message Committed {
  // key is the 16 byte random commitment key.
  bytes key = 1;
  // data is the data being committed to.
  bytes data = 2;
}

// Profile contains data hidden behind the cryptographic commitment.
message Profile {
  // Keys is a map of application IDs to keys.
  map<string, bytes> keys = 1;
}

// EntryUpdate contains the user entry update(s).
message EntryUpdate {
  // update authorizes the change to profile.
  SignedKV update = 2;
  // commitment contains the serialized Profile protobuf.
  Committed committed = 3;
}

//
// Verifiable Map Leaf Data and Mutation Data.
//

// Entry contains a commitment to profile and a set of authorized update keys.
// Entry is placed in the verifiable map as leaf data.
message Entry {
  // commitment is a cryptographic commitment to arbitrary data.
  bytes commitment = 1;
  // authorized_keys is the set of keys allowed to sign updates for this entry.
  repeated PublicKey authorized_keys = 2;
}

// PublicKey defines a key this domain uses to sign MapHeads with.
message PublicKey {
  // Key formats from Keyczar.
  oneof key_type {
    // ed25519 contains an ed25519 32 bytes key (<http://ed25519.cr.yp.to/>).
    bytes ed25519 = 1;
    // rsa_verifying_sha256_2048 contains a SHA256 RSA 2048-bit key.
    bytes rsa_verifying_sha256_2048 = 2;
    // ecdsa_verifying_p256 contains ECC P256 key.
    bytes ecdsa_verifying_p256 = 3;
  }
}

// KeyValue is a map entry.
message KeyValue {
  // key contains the map entry key.
  bytes key = 1;
  // value contains the map entry value.
  bytes value = 2;
}

// SignedKV is a signed change to a map entry.
message SignedKV {
  // key_value is a serialized KeyValue.
  bytes key_value = 1;
  // signatures on keyvalue. Must be signed by keys from both previous and
  // current epochs. The first proves ownership of new epoch key, and the
  // second proves that the correct owner is making this change.
  map<fixed64, bytes> signatures = 2;
  // previous contains the hash of the previous entry that this mutation is
  // modifying creating a hash chain of all mutations. The hash used is
  // CommonJSON in "github.com/benlaurie/objecthash/go/objecthash".
  bytes previous = 3;
}

//
// RPC request/response messages.
//

// GetEntryRequest for a user object.
message GetEntryRequest {
  // User identifier. Most commonly an email address.
  string user_id = 1;
}

// GetEntryResponse returns a requested user entry.
message GetEntryResponse {
  //
  // Privacy layer hides user_id and profile data until requested.
  //

  // vrf is the output of VRF on user_id.
  bytes vrf = 1;
  // vrf_proof is the proof for VRF on user_id.
  bytes vrf_proof = 2;

  // committed contains the profile for this account and connects the data
  // in profile to the commitment in leaf_proof.
  Committed committed = 3;

  //
  // Verifiable map layer proves that the response is consistent.
  //

  // leaf_proof contains an Entry and an inclusion proof in the sparse merkle tree at end_epoch.
  ctmap.GetLeafResponse leaf_proof = 5;
  // smh contains the signed map head for the sparse merkle tree.
  // smh is also stored in the append only log.
  ctmap.SignedMapHead smh = 6;
  // smh_sct is the SCT showing that smh was submitted to CT logs.
  // TODO: Support storing smh in multiple logs.
  bytes smh_sct = 7;
}

// Get a list of historical values for a user.
message ListEntryHistoryRequest {
  // user_id is the user identifier.
  string user_id = 1;
  // start is the starting epcoh.
  int64 start = 2;
  // page_size is the maximum number of entries to return. 
  int32 page_size = 3;
}

// A paginated history of values for a user.
message ListEntryHistoryResponse {
  // values represents the list of values this user_id has contained over time.
  repeated GetEntryResponse values = 1;
  // next_start is the next page token to query for pagination.
  // next_start is 0 when there are no more results to fetch.
  int64 next_start = 2;
}

// Update a user's profile.
message UpdateEntryRequest {
  // user_id specifies the id for the new account to be registered.
  string user_id = 1;
  // entry_update contains the user submitted update(s).
  EntryUpdate entry_update = 2;
}

// UpdateEntryResponse contains a proof once the update has been included in
// the Merkel Tree.
message UpdateEntryResponse {
  // proof contains a proof that the update has been included in the tree.
  GetEntryResponse proof = 1;
}

// HkpLookupRequest contains query parameters for retrieving PGP keys.
message HkpLookupRequest {
  // Op specifies the operation to be performed on the keyserver.
  // - "get" returns the pgp key specified in the search parameter.
  // - "index" returns 501 (not implemented).
  // - "vindex" returns 501 (not implemented).
  string op = 1;
  // Search specifies the email address or key id being queried.
  string search = 2;
  // Options specifies what output format to use.
  // - "mr" machine readable will set the content type to "application/pgp-keys"
  // - other options will be ignored.
  string options = 3;
  // Exact specifies an exact match on search. Always on. If specified in the
  // URL, its value will be ignored.
  string exact = 4;
  // fingerprint is ignored.
  string fingerprint = 5;
}

// HttpBody represents an http body.
message HttpResponse {
  // Header content type.
  string content_type = 1;
  // The http body itself.
  bytes body = 2;
}
