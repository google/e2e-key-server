// Code generated by protoc-gen-go. DO NOT EDIT.
// source: keymaster_proto.proto

/*
Package keymaster_proto is a generated protocol buffer package.

It is generated from these files:
	keymaster_proto.proto

It has these top-level messages:
	Metadata
	SigningKey
	VerifyingKey
	KeySet
*/
package keymaster_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// KeyStatus defines a key status.
type SigningKey_KeyStatus int32

const (
	SigningKey_ACTIVE     SigningKey_KeyStatus = 0
	SigningKey_INACTIVE   SigningKey_KeyStatus = 1
	SigningKey_DEPRECATED SigningKey_KeyStatus = 2
)

var SigningKey_KeyStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "INACTIVE",
	2: "DEPRECATED",
}
var SigningKey_KeyStatus_value = map[string]int32{
	"ACTIVE":     0,
	"INACTIVE":   1,
	"DEPRECATED": 2,
}

func (x SigningKey_KeyStatus) String() string {
	return proto.EnumName(SigningKey_KeyStatus_name, int32(x))
}
func (SigningKey_KeyStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// KeyStatus defines a key status.
type VerifyingKey_KeyStatus int32

const (
	VerifyingKey_ACTIVE     VerifyingKey_KeyStatus = 0
	VerifyingKey_DEPRECATED VerifyingKey_KeyStatus = 1
)

var VerifyingKey_KeyStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "DEPRECATED",
}
var VerifyingKey_KeyStatus_value = map[string]int32{
	"ACTIVE":     0,
	"DEPRECATED": 1,
}

func (x VerifyingKey_KeyStatus) String() string {
	return proto.EnumName(VerifyingKey_KeyStatus_name, int32(x))
}
func (VerifyingKey_KeyStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Metadata struct {
	// key_id represents a key identifier.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	// added_at determines the time this key has been added to the key set.
	AddedAt *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=added_at,json=addedAt" json:"added_at,omitempty"`
	// description contains an arbitrary text describing the key.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Metadata) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *Metadata) GetAddedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.AddedAt
	}
	return nil
}

func (m *Metadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// SigningKey represents a private key.
type SigningKey struct {
	// metadata contains information about this key..
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// key_material contains the key material in PEM format.
	KeyMaterial []byte `protobuf:"bytes,2,opt,name=key_material,json=keyMaterial,proto3" json:"key_material,omitempty"`
	// status determines the status of this key, e.g., active, deprecated, etc.
	Status SigningKey_KeyStatus `protobuf:"varint,3,opt,name=status,enum=keymaster.proto.SigningKey_KeyStatus" json:"status,omitempty"`
}

func (m *SigningKey) Reset()                    { *m = SigningKey{} }
func (m *SigningKey) String() string            { return proto.CompactTextString(m) }
func (*SigningKey) ProtoMessage()               {}
func (*SigningKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SigningKey) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SigningKey) GetKeyMaterial() []byte {
	if m != nil {
		return m.KeyMaterial
	}
	return nil
}

func (m *SigningKey) GetStatus() SigningKey_KeyStatus {
	if m != nil {
		return m.Status
	}
	return SigningKey_ACTIVE
}

// VerifyingKey represents a public key.
type VerifyingKey struct {
	// metadata contains information about this key..
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// key_material contains the key material in PEM format.
	KeyMaterial []byte `protobuf:"bytes,2,opt,name=key_material,json=keyMaterial,proto3" json:"key_material,omitempty"`
	// status determines the status of this key, e.g., active, deprecated, etc.
	Status VerifyingKey_KeyStatus `protobuf:"varint,3,opt,name=status,enum=keymaster.proto.VerifyingKey_KeyStatus" json:"status,omitempty"`
}

func (m *VerifyingKey) Reset()                    { *m = VerifyingKey{} }
func (m *VerifyingKey) String() string            { return proto.CompactTextString(m) }
func (*VerifyingKey) ProtoMessage()               {}
func (*VerifyingKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VerifyingKey) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *VerifyingKey) GetKeyMaterial() []byte {
	if m != nil {
		return m.KeyMaterial
	}
	return nil
}

func (m *VerifyingKey) GetStatus() VerifyingKey_KeyStatus {
	if m != nil {
		return m.Status
	}
	return VerifyingKey_ACTIVE
}

// KeySet contains a set of public and private keys.
type KeySet struct {
	// signing_keys holds a map of private keys keyed by the ID of their
	// corresponding public keys.
	SigningKeys map[string]*SigningKey `protobuf:"bytes,1,rep,name=signing_keys,json=signingKeys" json:"signing_keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// verifying_keys holds a map of public keys keyed by their IDs.
	VerifyingKeys map[string]*VerifyingKey `protobuf:"bytes,2,rep,name=verifying_keys,json=verifyingKeys" json:"verifying_keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *KeySet) Reset()                    { *m = KeySet{} }
func (m *KeySet) String() string            { return proto.CompactTextString(m) }
func (*KeySet) ProtoMessage()               {}
func (*KeySet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *KeySet) GetSigningKeys() map[string]*SigningKey {
	if m != nil {
		return m.SigningKeys
	}
	return nil
}

func (m *KeySet) GetVerifyingKeys() map[string]*VerifyingKey {
	if m != nil {
		return m.VerifyingKeys
	}
	return nil
}

func init() {
	proto.RegisterType((*Metadata)(nil), "keymaster.proto.Metadata")
	proto.RegisterType((*SigningKey)(nil), "keymaster.proto.SigningKey")
	proto.RegisterType((*VerifyingKey)(nil), "keymaster.proto.VerifyingKey")
	proto.RegisterType((*KeySet)(nil), "keymaster.proto.KeySet")
	proto.RegisterEnum("keymaster.proto.SigningKey_KeyStatus", SigningKey_KeyStatus_name, SigningKey_KeyStatus_value)
	proto.RegisterEnum("keymaster.proto.VerifyingKey_KeyStatus", VerifyingKey_KeyStatus_name, VerifyingKey_KeyStatus_value)
}

func init() { proto.RegisterFile("keymaster_proto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xc1, 0x6b, 0xdb, 0x30,
	0x14, 0xc6, 0x27, 0x87, 0x7a, 0xe9, 0xb3, 0x97, 0x05, 0x41, 0x21, 0xcb, 0x18, 0xcb, 0x0c, 0xa3,
	0x61, 0x07, 0x97, 0xa5, 0x14, 0xc6, 0x60, 0x8c, 0xd0, 0xfa, 0x10, 0x42, 0xc7, 0xa6, 0x86, 0x5e,
	0x76, 0x30, 0xea, 0xfc, 0x1a, 0x84, 0xe3, 0x38, 0x58, 0x4a, 0x40, 0xfb, 0x33, 0x77, 0xde, 0x79,
	0x7f, 0xc7, 0xb0, 0x6c, 0xa7, 0x6e, 0xdc, 0xe6, 0xd6, 0x4b, 0x88, 0x3e, 0x7f, 0xfe, 0xbd, 0xef,
	0x93, 0x1f, 0x1c, 0xc5, 0xa8, 0x13, 0x2e, 0x15, 0x66, 0xe1, 0x2a, 0x4b, 0x55, 0xea, 0x9b, 0x5f,
	0xfa, 0x72, 0x2b, 0x17, 0x42, 0xff, 0xed, 0x3c, 0x4d, 0xe7, 0x0b, 0x3c, 0x31, 0xa7, 0x9b, 0xf5,
	0xed, 0x89, 0x12, 0x09, 0x4a, 0xc5, 0x93, 0x55, 0x61, 0xf0, 0x7e, 0x43, 0xfb, 0x12, 0x15, 0x8f,
	0xb8, 0xe2, 0xf4, 0x08, 0xec, 0x18, 0x75, 0x28, 0xa2, 0x1e, 0x19, 0x90, 0xe1, 0x21, 0x3b, 0x88,
	0x51, 0x4f, 0x22, 0x7a, 0x06, 0x6d, 0x1e, 0x45, 0x18, 0x85, 0x5c, 0xf5, 0xac, 0x01, 0x19, 0x3a,
	0xa3, 0xbe, 0x5f, 0x60, 0xfd, 0x0a, 0xeb, 0xcf, 0x2a, 0x2c, 0x7b, 0x6e, 0xbc, 0x63, 0x45, 0x07,
	0xe0, 0x44, 0x28, 0x7f, 0x65, 0x62, 0xa5, 0x44, 0xba, 0xec, 0xb5, 0x0c, 0xb2, 0x2e, 0x79, 0x7f,
	0x09, 0xc0, 0x95, 0x98, 0x2f, 0xc5, 0x72, 0x3e, 0x45, 0x9d, 0xcf, 0x49, 0xca, 0x28, 0x26, 0x80,
	0x33, 0x7a, 0xe5, 0xef, 0xf4, 0xf1, 0xab, 0xac, 0x6c, 0x6b, 0xa5, 0xef, 0xc0, 0xcd, 0x53, 0x27,
	0x5c, 0x61, 0x26, 0xf8, 0xc2, 0x44, 0x74, 0x99, 0x13, 0xa3, 0xbe, 0x2c, 0x25, 0xfa, 0x05, 0x6c,
	0xa9, 0xb8, 0x5a, 0x4b, 0x93, 0xa2, 0x33, 0x7a, 0xdf, 0xe0, 0xde, 0xc5, 0xf0, 0xa7, 0xa8, 0xaf,
	0x8c, 0x99, 0x95, 0x2f, 0x79, 0x67, 0x70, 0xb8, 0x15, 0x29, 0x80, 0x3d, 0x3e, 0x9f, 0x4d, 0xae,
	0x83, 0xee, 0x33, 0xea, 0x42, 0x7b, 0xf2, 0xad, 0x3c, 0x11, 0xda, 0x01, 0xb8, 0x08, 0xbe, 0xb3,
	0xe0, 0x7c, 0x3c, 0x0b, 0x2e, 0xba, 0x96, 0xf7, 0x87, 0x80, 0x7b, 0x8d, 0x99, 0xb8, 0xd5, 0x4f,
	0x5e, 0xf0, 0xeb, 0x4e, 0xc1, 0xe3, 0x06, 0xb7, 0x1e, 0xe4, 0x81, 0x8a, 0xc7, 0x8f, 0x55, 0xbc,
	0x5f, 0x8a, 0x78, 0xff, 0x2c, 0xb0, 0x73, 0x27, 0x2a, 0x3a, 0x05, 0x57, 0x16, 0xd7, 0x16, 0xc6,
	0xa8, 0x65, 0x8f, 0x0c, 0x5a, 0x43, 0x67, 0x34, 0x6c, 0x8c, 0x2e, 0xec, 0xb5, 0x2b, 0x96, 0xc1,
	0x52, 0x65, 0x9a, 0x39, 0xf2, 0x4e, 0xa1, 0x3f, 0xa0, 0xb3, 0xa9, 0x22, 0x16, 0x38, 0xcb, 0xe0,
	0x3e, 0x3c, 0x86, 0xab, 0x17, 0x2a, 0x81, 0x2f, 0x36, 0x75, 0xad, 0xff, 0x13, 0xba, 0xbb, 0x33,
	0x69, 0x17, 0x5a, 0x31, 0xea, 0x72, 0xbf, 0xf3, 0xbf, 0xf4, 0x23, 0x1c, 0x6c, 0xf8, 0x62, 0x8d,
	0xe5, 0x6a, 0xbf, 0xde, 0xb3, 0x1a, 0xac, 0x70, 0x7e, 0xb6, 0x3e, 0x91, 0x7e, 0x08, 0xb4, 0x99,
	0xe0, 0x01, 0xfc, 0xe9, 0x7d, 0xfc, 0x9b, 0xbd, 0x1f, 0xa6, 0x36, 0xe0, 0xc6, 0x36, 0x8f, 0x4f,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x85, 0x4f, 0x40, 0xef, 0xea, 0x03, 0x00, 0x00,
}
