// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/keytransparency_v1_grpc/keytransparency_v1_admin_grpc.proto

package keytransparency_v1_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import keytransparency_v1_proto1 "github.com/google/keytransparency/core/proto/keytransparency_v1_proto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KeyTransparencyAdminService service

type KeyTransparencyAdminServiceClient interface {
	// BatchSetEntries uses an authorized_public key to perform a set request on multiple entries at once.
	BatchUpdateEntries(ctx context.Context, in *keytransparency_v1_proto1.BatchUpdateEntriesRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.BatchUpdateEntriesResponse, error)
	ListDomains(ctx context.Context, in *keytransparency_v1_proto1.ListDomainsRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.ListDomainsResponse, error)
	// GetDomain returns the confiuration information for a given domain.
	GetDomain(ctx context.Context, in *keytransparency_v1_proto1.GetDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.GetDomainResponse, error)
	CreateDomain(ctx context.Context, in *keytransparency_v1_proto1.CreateDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.CreateDomainResponse, error)
	DeleteDomain(ctx context.Context, in *keytransparency_v1_proto1.DeleteDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.DeleteDomainResponse, error)
	// Undeletes a soft-deleted a tree.
	// A soft-deleted tree may be undeleted for a certain period, after which
	// it'll be permanently deleted.
	UndeleteDomain(ctx context.Context, in *keytransparency_v1_proto1.UndeleteDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.UndeleteDomainResponse, error)
}

type keyTransparencyAdminServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyAdminServiceClient(cc *grpc.ClientConn) KeyTransparencyAdminServiceClient {
	return &keyTransparencyAdminServiceClient{cc}
}

func (c *keyTransparencyAdminServiceClient) BatchUpdateEntries(ctx context.Context, in *keytransparency_v1_proto1.BatchUpdateEntriesRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.BatchUpdateEntriesResponse, error) {
	out := new(keytransparency_v1_proto1.BatchUpdateEntriesResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/BatchUpdateEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminServiceClient) ListDomains(ctx context.Context, in *keytransparency_v1_proto1.ListDomainsRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.ListDomainsResponse, error) {
	out := new(keytransparency_v1_proto1.ListDomainsResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/ListDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminServiceClient) GetDomain(ctx context.Context, in *keytransparency_v1_proto1.GetDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.GetDomainResponse, error) {
	out := new(keytransparency_v1_proto1.GetDomainResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminServiceClient) CreateDomain(ctx context.Context, in *keytransparency_v1_proto1.CreateDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.CreateDomainResponse, error) {
	out := new(keytransparency_v1_proto1.CreateDomainResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/CreateDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminServiceClient) DeleteDomain(ctx context.Context, in *keytransparency_v1_proto1.DeleteDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.DeleteDomainResponse, error) {
	out := new(keytransparency_v1_proto1.DeleteDomainResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/DeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminServiceClient) UndeleteDomain(ctx context.Context, in *keytransparency_v1_proto1.UndeleteDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.UndeleteDomainResponse, error) {
	out := new(keytransparency_v1_proto1.UndeleteDomainResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/UndeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyTransparencyAdminService service

type KeyTransparencyAdminServiceServer interface {
	// BatchSetEntries uses an authorized_public key to perform a set request on multiple entries at once.
	BatchUpdateEntries(context.Context, *keytransparency_v1_proto1.BatchUpdateEntriesRequest) (*keytransparency_v1_proto1.BatchUpdateEntriesResponse, error)
	ListDomains(context.Context, *keytransparency_v1_proto1.ListDomainsRequest) (*keytransparency_v1_proto1.ListDomainsResponse, error)
	// GetDomain returns the confiuration information for a given domain.
	GetDomain(context.Context, *keytransparency_v1_proto1.GetDomainRequest) (*keytransparency_v1_proto1.GetDomainResponse, error)
	CreateDomain(context.Context, *keytransparency_v1_proto1.CreateDomainRequest) (*keytransparency_v1_proto1.CreateDomainResponse, error)
	DeleteDomain(context.Context, *keytransparency_v1_proto1.DeleteDomainRequest) (*keytransparency_v1_proto1.DeleteDomainResponse, error)
	// Undeletes a soft-deleted a tree.
	// A soft-deleted tree may be undeleted for a certain period, after which
	// it'll be permanently deleted.
	UndeleteDomain(context.Context, *keytransparency_v1_proto1.UndeleteDomainRequest) (*keytransparency_v1_proto1.UndeleteDomainResponse, error)
}

func RegisterKeyTransparencyAdminServiceServer(s *grpc.Server, srv KeyTransparencyAdminServiceServer) {
	s.RegisterService(&_KeyTransparencyAdminService_serviceDesc, srv)
}

func _KeyTransparencyAdminService_BatchUpdateEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.BatchUpdateEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).BatchUpdateEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/BatchUpdateEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).BatchUpdateEntries(ctx, req.(*keytransparency_v1_proto1.BatchUpdateEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdminService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).ListDomains(ctx, req.(*keytransparency_v1_proto1.ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdminService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).GetDomain(ctx, req.(*keytransparency_v1_proto1.GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdminService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).CreateDomain(ctx, req.(*keytransparency_v1_proto1.CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdminService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).DeleteDomain(ctx, req.(*keytransparency_v1_proto1.DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdminService_UndeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.UndeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).UndeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/UndeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).UndeleteDomain(ctx, req.(*keytransparency_v1_proto1.UndeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencyAdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keytransparency.v1.grpc.KeyTransparencyAdminService",
	HandlerType: (*KeyTransparencyAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchUpdateEntries",
			Handler:    _KeyTransparencyAdminService_BatchUpdateEntries_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _KeyTransparencyAdminService_ListDomains_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _KeyTransparencyAdminService_GetDomain_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _KeyTransparencyAdminService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _KeyTransparencyAdminService_DeleteDomain_Handler,
		},
		{
			MethodName: "UndeleteDomain",
			Handler:    _KeyTransparencyAdminService_UndeleteDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/keytransparency_v1_grpc/keytransparency_v1_admin_grpc.proto",
}

func init() {
	proto.RegisterFile("proto/keytransparency_v1_grpc/keytransparency_v1_admin_grpc.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xbd, 0x4e, 0xeb, 0x30,
	0x18, 0x86, 0x4f, 0xce, 0x50, 0xe9, 0xa4, 0xd5, 0xf9, 0xf1, 0x70, 0x2a, 0x0a, 0x12, 0x28, 0x13,
	0x0a, 0x10, 0x53, 0xca, 0xd4, 0xad, 0x3f, 0xc0, 0x00, 0x13, 0xd0, 0x85, 0xa5, 0x72, 0x93, 0x4f,
	0xa9, 0x45, 0x6b, 0x07, 0xdb, 0x89, 0x54, 0x21, 0x16, 0x24, 0x56, 0x16, 0x16, 0x16, 0xae, 0x8a,
	0x5b, 0x40, 0xe2, 0x36, 0x50, 0x12, 0x07, 0xa5, 0xa5, 0xa9, 0xc2, 0x16, 0xe5, 0x7d, 0xbe, 0xf7,
	0x7b, 0x6c, 0x29, 0x31, 0x3b, 0x81, 0xe0, 0x8a, 0xe3, 0x6b, 0x98, 0x29, 0x41, 0x98, 0x0c, 0x88,
	0x00, 0xe6, 0xce, 0x86, 0x51, 0x73, 0xe8, 0x8b, 0xc0, 0x5d, 0xf6, 0x9e, 0x78, 0x53, 0xca, 0x92,
	0xd4, 0x49, 0x66, 0x51, 0x7d, 0x01, 0x72, 0xa2, 0xa6, 0x13, 0xc7, 0x8d, 0x5e, 0x61, 0x77, 0x61,
	0x90, 0x96, 0x27, 0x71, 0xda, 0xde, 0xd8, 0xf0, 0x39, 0xf7, 0x27, 0x80, 0x49, 0x40, 0x31, 0x61,
	0x8c, 0x2b, 0xa2, 0x28, 0x67, 0x32, 0x4d, 0x0f, 0xde, 0x2b, 0xe6, 0xfa, 0x29, 0xcc, 0x2e, 0x73,
	0x35, 0x9d, 0xb8, 0xe2, 0x02, 0x44, 0x44, 0x5d, 0x40, 0xcf, 0x86, 0x89, 0xba, 0x44, 0xb9, 0xe3,
	0x41, 0xe0, 0x11, 0x05, 0x47, 0x4c, 0x09, 0x0a, 0x12, 0xb5, 0x9c, 0x25, 0xce, 0xe9, 0xd6, 0xaf,
	0xf4, 0x39, 0xdc, 0x84, 0x20, 0x55, 0xe3, 0xf0, 0x7b, 0x43, 0x32, 0xe0, 0x4c, 0x82, 0x55, 0xbf,
	0x7f, 0x7d, 0x7b, 0xfa, 0xf9, 0xcf, 0xfa, 0x83, 0xa3, 0x26, 0x0e, 0x25, 0x08, 0xd9, 0x1e, 0xc5,
	0x34, 0x9a, 0x98, 0xd5, 0x33, 0x2a, 0x55, 0x9f, 0x4f, 0x09, 0x65, 0x12, 0xed, 0x16, 0xb7, 0xe7,
	0xb0, 0xcc, 0x65, 0xaf, 0x24, 0xad, 0x25, 0x7e, 0xa0, 0x07, 0xc3, 0xfc, 0x75, 0x02, 0x3a, 0x40,
	0x76, 0xf1, 0xf8, 0x27, 0x94, 0xad, 0xda, 0x29, 0xc5, 0xea, 0x45, 0x9b, 0xc9, 0x69, 0xd7, 0x50,
	0x3d, 0x3e, 0xad, 0x97, 0x5a, 0xe0, 0xdb, 0xf4, 0x61, 0x48, 0xbd, 0xbb, 0xd8, 0xa3, 0xd6, 0x13,
	0x40, 0x14, 0x68, 0x95, 0x15, 0x27, 0xc9, 0x73, 0x99, 0x8d, 0x53, 0x16, 0xd7, 0x42, 0xff, 0x13,
	0xa1, 0xbf, 0x56, 0x35, 0x27, 0xd4, 0x36, 0x6c, 0xf4, 0x68, 0x98, 0xb5, 0x3e, 0x4c, 0xa0, 0x8c,
	0x47, 0x9e, 0x2b, 0xe1, 0x31, 0x8f, 0xcf, 0x5f, 0x8c, 0x5d, 0x78, 0x31, 0x2f, 0x86, 0xf9, 0x7b,
	0xc0, 0xbc, 0xbc, 0x12, 0x2e, 0xde, 0x31, 0x4f, 0x66, 0x52, 0xfb, 0xe5, 0x07, 0xb4, 0xd6, 0x76,
	0xa2, 0x65, 0xd9, 0x5b, 0x05, 0x5a, 0xed, 0x50, 0xcf, 0x75, 0x8f, 0xaf, 0xfa, 0x3e, 0x55, 0xe3,
	0x70, 0xe4, 0xb8, 0x7c, 0x8a, 0xf5, 0x47, 0xb9, 0xb0, 0x0e, 0xbb, 0x5c, 0x00, 0x5e, 0xf9, 0x47,
	0x19, 0x55, 0x92, 0xb8, 0xf5, 0x11, 0x00, 0x00, 0xff, 0xff, 0x81, 0x95, 0xae, 0x3a, 0x79, 0x04,
	0x00, 0x00,
}
