// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/keytransparency_v1_grpc/keytransparency_v1_admin_grpc.proto

package keytransparency_v1_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf4 "github.com/golang/protobuf/ptypes/empty"
import keytransparency_v1_proto1 "github.com/google/keytransparency/core/proto/keytransparency_v1_proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KeyTransparencyAdminService service

type KeyTransparencyAdminServiceClient interface {
	// BatchUpdateEntries uses an authorized_public key to perform a set request on multiple entries at once.
	BatchUpdateEntries(ctx context.Context, in *keytransparency_v1_proto1.BatchUpdateEntriesRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.BatchUpdateEntriesResponse, error)
	// ListDomains returns a list of all domains this Key Transparency server
	// operates on.
	ListDomains(ctx context.Context, in *keytransparency_v1_proto1.ListDomainsRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.ListDomainsResponse, error)
	// GetDomain returns the confiuration information for a given domain.
	GetDomain(ctx context.Context, in *keytransparency_v1_proto1.GetDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.GetDomainResponse, error)
	// CreateDomain creates a new Trillian log/map pair.  A unique domainId must
	// be provided.  To create a new domain with the same name as a previously
	// deleted domain, a user must wait X days until the domain is garbage
	// collected.
	CreateDomain(ctx context.Context, in *keytransparency_v1_proto1.CreateDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.CreateDomainResponse, error)
	// DeleteDomain marks a domain as deleted.  Domains will be garbage collected
	// after X days.
	DeleteDomain(ctx context.Context, in *keytransparency_v1_proto1.DeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf4.Empty, error)
	// UndeleteDomain marks a previously deleted domain as active if it has not
	// already been garbage collected.
	UndeleteDomain(ctx context.Context, in *keytransparency_v1_proto1.UndeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf4.Empty, error)
}

type keyTransparencyAdminServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyAdminServiceClient(cc *grpc.ClientConn) KeyTransparencyAdminServiceClient {
	return &keyTransparencyAdminServiceClient{cc}
}

func (c *keyTransparencyAdminServiceClient) BatchUpdateEntries(ctx context.Context, in *keytransparency_v1_proto1.BatchUpdateEntriesRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.BatchUpdateEntriesResponse, error) {
	out := new(keytransparency_v1_proto1.BatchUpdateEntriesResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/BatchUpdateEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminServiceClient) ListDomains(ctx context.Context, in *keytransparency_v1_proto1.ListDomainsRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.ListDomainsResponse, error) {
	out := new(keytransparency_v1_proto1.ListDomainsResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/ListDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminServiceClient) GetDomain(ctx context.Context, in *keytransparency_v1_proto1.GetDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.GetDomainResponse, error) {
	out := new(keytransparency_v1_proto1.GetDomainResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminServiceClient) CreateDomain(ctx context.Context, in *keytransparency_v1_proto1.CreateDomainRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto1.CreateDomainResponse, error) {
	out := new(keytransparency_v1_proto1.CreateDomainResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/CreateDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminServiceClient) DeleteDomain(ctx context.Context, in *keytransparency_v1_proto1.DeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf4.Empty, error) {
	out := new(google_protobuf4.Empty)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/DeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyAdminServiceClient) UndeleteDomain(ctx context.Context, in *keytransparency_v1_proto1.UndeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf4.Empty, error) {
	out := new(google_protobuf4.Empty)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/UndeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyTransparencyAdminService service

type KeyTransparencyAdminServiceServer interface {
	// BatchUpdateEntries uses an authorized_public key to perform a set request on multiple entries at once.
	BatchUpdateEntries(context.Context, *keytransparency_v1_proto1.BatchUpdateEntriesRequest) (*keytransparency_v1_proto1.BatchUpdateEntriesResponse, error)
	// ListDomains returns a list of all domains this Key Transparency server
	// operates on.
	ListDomains(context.Context, *keytransparency_v1_proto1.ListDomainsRequest) (*keytransparency_v1_proto1.ListDomainsResponse, error)
	// GetDomain returns the confiuration information for a given domain.
	GetDomain(context.Context, *keytransparency_v1_proto1.GetDomainRequest) (*keytransparency_v1_proto1.GetDomainResponse, error)
	// CreateDomain creates a new Trillian log/map pair.  A unique domainId must
	// be provided.  To create a new domain with the same name as a previously
	// deleted domain, a user must wait X days until the domain is garbage
	// collected.
	CreateDomain(context.Context, *keytransparency_v1_proto1.CreateDomainRequest) (*keytransparency_v1_proto1.CreateDomainResponse, error)
	// DeleteDomain marks a domain as deleted.  Domains will be garbage collected
	// after X days.
	DeleteDomain(context.Context, *keytransparency_v1_proto1.DeleteDomainRequest) (*google_protobuf4.Empty, error)
	// UndeleteDomain marks a previously deleted domain as active if it has not
	// already been garbage collected.
	UndeleteDomain(context.Context, *keytransparency_v1_proto1.UndeleteDomainRequest) (*google_protobuf4.Empty, error)
}

func RegisterKeyTransparencyAdminServiceServer(s *grpc.Server, srv KeyTransparencyAdminServiceServer) {
	s.RegisterService(&_KeyTransparencyAdminService_serviceDesc, srv)
}

func _KeyTransparencyAdminService_BatchUpdateEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.BatchUpdateEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).BatchUpdateEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/BatchUpdateEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).BatchUpdateEntries(ctx, req.(*keytransparency_v1_proto1.BatchUpdateEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdminService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).ListDomains(ctx, req.(*keytransparency_v1_proto1.ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdminService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).GetDomain(ctx, req.(*keytransparency_v1_proto1.GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdminService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).CreateDomain(ctx, req.(*keytransparency_v1_proto1.CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdminService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).DeleteDomain(ctx, req.(*keytransparency_v1_proto1.DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyAdminService_UndeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto1.UndeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).UndeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/UndeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).UndeleteDomain(ctx, req.(*keytransparency_v1_proto1.UndeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencyAdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keytransparency.v1.grpc.KeyTransparencyAdminService",
	HandlerType: (*KeyTransparencyAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchUpdateEntries",
			Handler:    _KeyTransparencyAdminService_BatchUpdateEntries_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _KeyTransparencyAdminService_ListDomains_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _KeyTransparencyAdminService_GetDomain_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _KeyTransparencyAdminService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _KeyTransparencyAdminService_DeleteDomain_Handler,
		},
		{
			MethodName: "UndeleteDomain",
			Handler:    _KeyTransparencyAdminService_UndeleteDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/keytransparency_v1_grpc/keytransparency_v1_admin_grpc.proto",
}

func init() {
	proto.RegisterFile("proto/keytransparency_v1_grpc/keytransparency_v1_admin_grpc.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xbd, 0xae, 0xd3, 0x30,
	0x18, 0x86, 0x15, 0x86, 0x23, 0x91, 0x53, 0xfe, 0x8c, 0xd4, 0x8a, 0x16, 0x09, 0x94, 0x09, 0x05,
	0xb0, 0x55, 0xca, 0xd4, 0xad, 0x7f, 0x30, 0xc0, 0x04, 0x74, 0x61, 0xa9, 0x9c, 0xe4, 0x23, 0xb5,
	0x68, 0xec, 0x60, 0x3b, 0x91, 0x22, 0x84, 0x90, 0x40, 0x5c, 0x01, 0x0b, 0x77, 0xc4, 0x05, 0x70,
	0x0b, 0x5c, 0x08, 0x8a, 0xe3, 0xa0, 0x50, 0x6a, 0xc8, 0xd9, 0xda, 0xbe, 0x8f, 0xbf, 0xf7, 0xf9,
	0x2a, 0x27, 0xfe, 0x22, 0x97, 0x42, 0x0b, 0xf2, 0x16, 0x2a, 0x2d, 0x29, 0x57, 0x39, 0x95, 0xc0,
	0xe3, 0x6a, 0x57, 0x4e, 0x77, 0xa9, 0xcc, 0xe3, 0x53, 0xbf, 0xd3, 0x24, 0x63, 0xdc, 0xa4, 0xd8,
	0x9c, 0x45, 0xa3, 0x23, 0x08, 0x97, 0x53, 0x5c, 0xc7, 0xe3, 0xdb, 0xa9, 0x10, 0xe9, 0x01, 0x08,
	0xcd, 0x19, 0xa1, 0x9c, 0x0b, 0x4d, 0x35, 0x13, 0x5c, 0x35, 0xc7, 0xc6, 0x13, 0x9b, 0x9a, 0x6f,
	0x51, 0xf1, 0x86, 0x40, 0x96, 0xeb, 0xca, 0x86, 0x2b, 0xa7, 0x96, 0x33, 0x68, 0xbc, 0x4c, 0xdc,
	0x0c, 0x79, 0xf4, 0xfd, 0xcc, 0x9f, 0x3c, 0x83, 0xea, 0x55, 0x07, 0x5c, 0xd4, 0xd0, 0x4b, 0x90,
	0x25, 0x8b, 0x01, 0x7d, 0xf3, 0x7c, 0xb4, 0xa4, 0x3a, 0xde, 0x6f, 0xf3, 0x84, 0x6a, 0xd8, 0x70,
	0x2d, 0x19, 0x28, 0x34, 0xc3, 0x27, 0x16, 0x6a, 0xe6, 0xfe, 0x4d, 0xbf, 0x80, 0x77, 0x05, 0x28,
	0x3d, 0x7e, 0x7c, 0xb1, 0x43, 0x2a, 0x17, 0x5c, 0x41, 0x30, 0xfa, 0xf4, 0xe3, 0xe7, 0xd7, 0x4b,
	0x37, 0x82, 0x6b, 0xa4, 0x9c, 0x92, 0x42, 0x81, 0x54, 0xf3, 0xa8, 0xa6, 0xd1, 0x47, 0xff, 0xfc,
	0x39, 0x53, 0x7a, 0x2d, 0x32, 0xca, 0xb8, 0x42, 0x0f, 0xdc, 0xd3, 0x3b, 0x58, 0xeb, 0xf2, 0xb0,
	0x27, 0x6d, 0x25, 0x6e, 0x1a, 0x89, 0x2b, 0xe8, 0xbc, 0x96, 0x48, 0x6c, 0xe3, 0x17, 0xcf, 0xbf,
	0xfc, 0x14, 0x2c, 0x8b, 0x42, 0xf7, 0xc4, 0xdf, 0x50, 0xdb, 0x7e, 0xbf, 0x17, 0x6b, 0xbb, 0xef,
	0x98, 0xee, 0x5b, 0x68, 0xd4, 0xe9, 0x26, 0xef, 0x9b, 0x0f, 0x3b, 0x96, 0x7c, 0xa8, 0x3d, 0x06,
	0x2b, 0x09, 0x54, 0x83, 0x55, 0xf9, 0xc7, 0x72, 0x5d, 0xae, 0xb5, 0xc1, 0x7d, 0x71, 0x2b, 0x34,
	0x34, 0x42, 0xd7, 0x83, 0xee, 0x9f, 0x31, 0xf7, 0x42, 0x54, 0xfa, 0x83, 0x35, 0x1c, 0xa0, 0x8f,
	0x46, 0x97, 0x6b, 0x35, 0x86, 0xb8, 0xb9, 0xed, 0xb8, 0xbd, 0xed, 0x78, 0x53, 0xdf, 0xf6, 0x76,
	0xff, 0xd0, 0xb9, 0xff, 0x67, 0xcf, 0xbf, 0xba, 0xe5, 0x49, 0xb7, 0x9a, 0xb8, 0xab, 0xff, 0x24,
	0xff, 0x57, 0x7e, 0xcf, 0x94, 0x07, 0xe1, 0x5d, 0x47, 0xf9, 0xbc, 0xb0, 0xe3, 0x96, 0x4f, 0x5e,
	0xaf, 0x53, 0xa6, 0xf7, 0x45, 0x84, 0x63, 0x91, 0x11, 0xfb, 0xe0, 0x1e, 0x59, 0x90, 0x58, 0x48,
	0xfb, 0x34, 0xbb, 0x5e, 0x27, 0xd1, 0x99, 0x89, 0x67, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x30,
	0x60, 0x52, 0x1c, 0x76, 0x04, 0x00, 0x00,
}
