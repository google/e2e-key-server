// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/keytransparency_v1_grpc/keytransparency_v1_grpc.proto

/*
Package keytransparency_v1_grpc is a generated protocol buffer package.

Key Transparency Service

The Key Transparency Service API consists of a map of user names to public
keys. Each user name also has a history of public keys that have been
associated with it.

It is generated from these files:
	proto/keytransparency_v1_grpc/keytransparency_v1_grpc.proto

It has these top-level messages:
*/
package keytransparency_v1_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import keytransparency_v1_proto "github.com/google/keytransparency/core/proto/keytransparency_v1_proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KeyTransparencyService service

type KeyTransparencyServiceClient interface {
	// GetEntry returns a user's entry in the Merkle Tree.
	//
	// Entries contain signed commitments to a profile, which is also returned.
	GetEntry(ctx context.Context, in *keytransparency_v1_proto.GetEntryRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.GetEntryResponse, error)
	// ListEntryHistory returns a list of historic GetEntry values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(ctx context.Context, in *keytransparency_v1_proto.ListEntryHistoryRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.ListEntryHistoryResponse, error)
	// UpdateEntry updates a user's profile.
	//
	// Returns the current user profile.
	// Clients must retry until this function returns a proof containing the desired value.
	UpdateEntry(ctx context.Context, in *keytransparency_v1_proto.UpdateEntryRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.UpdateEntryResponse, error)
	// GetDomainInfo returns all info tied to the specified domain.
	//
	// This API to get all necessary data needed to verify a particular
	// key-server. Data contains for instance the tree-info, like for instance the
	// log-/map-id and the corresponding public-keys.
	GetDomainInfo(ctx context.Context, in *keytransparency_v1_proto.GetDomainInfoRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.GetDomainInfoResponse, error)
}

type keyTransparencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyServiceClient(cc *grpc.ClientConn) KeyTransparencyServiceClient {
	return &keyTransparencyServiceClient{cc}
}

func (c *keyTransparencyServiceClient) GetEntry(ctx context.Context, in *keytransparency_v1_proto.GetEntryRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.GetEntryResponse, error) {
	out := new(keytransparency_v1_proto.GetEntryResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyService/GetEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) ListEntryHistory(ctx context.Context, in *keytransparency_v1_proto.ListEntryHistoryRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.ListEntryHistoryResponse, error) {
	out := new(keytransparency_v1_proto.ListEntryHistoryResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyService/ListEntryHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) UpdateEntry(ctx context.Context, in *keytransparency_v1_proto.UpdateEntryRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.UpdateEntryResponse, error) {
	out := new(keytransparency_v1_proto.UpdateEntryResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyService/UpdateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) GetDomainInfo(ctx context.Context, in *keytransparency_v1_proto.GetDomainInfoRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.GetDomainInfoResponse, error) {
	out := new(keytransparency_v1_proto.GetDomainInfoResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyService/GetDomainInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyTransparencyService service

type KeyTransparencyServiceServer interface {
	// GetEntry returns a user's entry in the Merkle Tree.
	//
	// Entries contain signed commitments to a profile, which is also returned.
	GetEntry(context.Context, *keytransparency_v1_proto.GetEntryRequest) (*keytransparency_v1_proto.GetEntryResponse, error)
	// ListEntryHistory returns a list of historic GetEntry values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(context.Context, *keytransparency_v1_proto.ListEntryHistoryRequest) (*keytransparency_v1_proto.ListEntryHistoryResponse, error)
	// UpdateEntry updates a user's profile.
	//
	// Returns the current user profile.
	// Clients must retry until this function returns a proof containing the desired value.
	UpdateEntry(context.Context, *keytransparency_v1_proto.UpdateEntryRequest) (*keytransparency_v1_proto.UpdateEntryResponse, error)
	// GetDomainInfo returns all info tied to the specified domain.
	//
	// This API to get all necessary data needed to verify a particular
	// key-server. Data contains for instance the tree-info, like for instance the
	// log-/map-id and the corresponding public-keys.
	GetDomainInfo(context.Context, *keytransparency_v1_proto.GetDomainInfoRequest) (*keytransparency_v1_proto.GetDomainInfoResponse, error)
}

func RegisterKeyTransparencyServiceServer(s *grpc.Server, srv KeyTransparencyServiceServer) {
	s.RegisterService(&_KeyTransparencyService_serviceDesc, srv)
}

func _KeyTransparencyService_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto.GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyService/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).GetEntry(ctx, req.(*keytransparency_v1_proto.GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_ListEntryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto.ListEntryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).ListEntryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyService/ListEntryHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).ListEntryHistory(ctx, req.(*keytransparency_v1_proto.ListEntryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto.UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyService/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).UpdateEntry(ctx, req.(*keytransparency_v1_proto.UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_GetDomainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto.GetDomainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).GetDomainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyService/GetDomainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).GetDomainInfo(ctx, req.(*keytransparency_v1_proto.GetDomainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keytransparency.v1.grpc.KeyTransparencyService",
	HandlerType: (*KeyTransparencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntry",
			Handler:    _KeyTransparencyService_GetEntry_Handler,
		},
		{
			MethodName: "ListEntryHistory",
			Handler:    _KeyTransparencyService_ListEntryHistory_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _KeyTransparencyService_UpdateEntry_Handler,
		},
		{
			MethodName: "GetDomainInfo",
			Handler:    _KeyTransparencyService_GetDomainInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/keytransparency_v1_grpc/keytransparency_v1_grpc.proto",
}

// Client API for KeyTransparencyAdminService service

type KeyTransparencyAdminServiceClient interface {
	// BatchSetEntries uses an authorized_public key to perform a set request on multiple entries at once.
	BatchUpdateEntries(ctx context.Context, in *keytransparency_v1_proto.BatchUpdateEntriesRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.BatchUpdateEntriesResponse, error)
}

type keyTransparencyAdminServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyAdminServiceClient(cc *grpc.ClientConn) KeyTransparencyAdminServiceClient {
	return &keyTransparencyAdminServiceClient{cc}
}

func (c *keyTransparencyAdminServiceClient) BatchUpdateEntries(ctx context.Context, in *keytransparency_v1_proto.BatchUpdateEntriesRequest, opts ...grpc.CallOption) (*keytransparency_v1_proto.BatchUpdateEntriesResponse, error) {
	out := new(keytransparency_v1_proto.BatchUpdateEntriesResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.grpc.KeyTransparencyAdminService/BatchUpdateEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyTransparencyAdminService service

type KeyTransparencyAdminServiceServer interface {
	// BatchSetEntries uses an authorized_public key to perform a set request on multiple entries at once.
	BatchUpdateEntries(context.Context, *keytransparency_v1_proto.BatchUpdateEntriesRequest) (*keytransparency_v1_proto.BatchUpdateEntriesResponse, error)
}

func RegisterKeyTransparencyAdminServiceServer(s *grpc.Server, srv KeyTransparencyAdminServiceServer) {
	s.RegisterService(&_KeyTransparencyAdminService_serviceDesc, srv)
}

func _KeyTransparencyAdminService_BatchUpdateEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_proto.BatchUpdateEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyAdminServiceServer).BatchUpdateEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.grpc.KeyTransparencyAdminService/BatchUpdateEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyAdminServiceServer).BatchUpdateEntries(ctx, req.(*keytransparency_v1_proto.BatchUpdateEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencyAdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keytransparency.v1.grpc.KeyTransparencyAdminService",
	HandlerType: (*KeyTransparencyAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchUpdateEntries",
			Handler:    _KeyTransparencyAdminService_BatchUpdateEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/keytransparency_v1_grpc/keytransparency_v1_grpc.proto",
}

func init() {
	proto.RegisterFile("proto/keytransparency_v1_grpc/keytransparency_v1_grpc.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x3d, 0x6b, 0xdb, 0x40,
	0x18, 0xc7, 0x51, 0x29, 0xa5, 0x5c, 0x5b, 0xdc, 0x5e, 0x69, 0x0d, 0x72, 0xbb, 0xd8, 0x93, 0x4b,
	0xab, 0x43, 0x76, 0x27, 0x97, 0x0e, 0x35, 0x6e, 0xdd, 0x90, 0x4c, 0x79, 0x59, 0xb2, 0x88, 0xb3,
	0xf4, 0x58, 0x3e, 0x12, 0xdf, 0x29, 0x77, 0x27, 0x81, 0x08, 0xc9, 0x90, 0x2d, 0x73, 0x08, 0x64,
	0xca, 0xe7, 0xc8, 0xf7, 0xc8, 0x9c, 0x2d, 0x1f, 0x24, 0xe8, 0x2d, 0x76, 0x14, 0xcb, 0xd8, 0x93,
	0x40, 0xff, 0xdf, 0xff, 0xee, 0xa7, 0x47, 0x77, 0xe8, 0x57, 0x20, 0x85, 0x16, 0xe4, 0x00, 0x62,
	0x2d, 0x29, 0x57, 0x01, 0x95, 0xc0, 0xdd, 0xd8, 0x89, 0x6c, 0xc7, 0x97, 0x81, 0x5b, 0xf5, 0xde,
	0x4a, 0x5b, 0xb8, 0x5e, 0x8a, 0xad, 0xc8, 0xb6, 0x92, 0xd8, 0xfc, 0xe2, 0x0b, 0xe1, 0x1f, 0x02,
	0xa1, 0x01, 0x23, 0x94, 0x73, 0xa1, 0xa9, 0x66, 0x82, 0xab, 0xac, 0x66, 0xfe, 0xae, 0xdc, 0x73,
	0x79, 0x90, 0xd5, 0x3b, 0x77, 0x2f, 0xd1, 0xe7, 0x4d, 0x88, 0x77, 0xe7, 0x90, 0x1d, 0x90, 0x11,
	0x73, 0x01, 0x9f, 0xa2, 0xd7, 0x43, 0xd0, 0x7f, 0xb9, 0x96, 0x31, 0x6e, 0x5b, 0x0b, 0xec, 0xb2,
	0x75, 0x0a, 0x66, 0x1b, 0x8e, 0x42, 0x50, 0xda, 0xfc, 0xb6, 0x0a, 0xaa, 0x02, 0xc1, 0x15, 0x34,
	0x1b, 0x67, 0xb7, 0xf7, 0x17, 0x2f, 0x3e, 0xe1, 0x8f, 0x24, 0xb2, 0x49, 0xa8, 0x40, 0x2a, 0x72,
	0x9c, 0x3c, 0x1c, 0xe6, 0x9d, 0xe0, 0x6b, 0x03, 0xbd, 0xdf, 0x62, 0x2a, 0xab, 0xfc, 0x67, 0x4a,
	0x0b, 0x19, 0x63, 0xbb, 0x7a, 0xf5, 0x32, 0x5b, 0x08, 0x75, 0xd6, 0xa9, 0xe4, 0x62, 0xad, 0x54,
	0xec, 0x2b, 0x6e, 0x2c, 0x10, 0x23, 0x93, 0xdc, 0xe5, 0xd2, 0x40, 0x6f, 0xf6, 0x02, 0x8f, 0x6a,
	0xc8, 0x86, 0xf4, 0xbd, 0x7a, 0xa3, 0x39, 0xac, 0xd0, 0xfa, 0xb1, 0x22, 0x9d, 0x1b, 0xb5, 0x53,
	0xa3, 0x96, 0xb9, 0x68, 0x54, 0xbd, 0xb7, 0x90, 0xb0, 0x4e, 0x98, 0xf6, 0xf0, 0xb9, 0x81, 0xde,
	0x0d, 0x41, 0x0f, 0xc4, 0x94, 0x32, 0xbe, 0xc1, 0xc7, 0x02, 0x5b, 0x4b, 0xff, 0xc9, 0x0c, 0x2c,
	0xdc, 0xc8, 0xca, 0x7c, 0x6e, 0x57, 0x4f, 0xed, 0x3e, 0xe0, 0x5a, 0x62, 0xe7, 0xa5, 0x39, 0x61,
	0x7c, 0x2c, 0x3a, 0x37, 0x06, 0x6a, 0x94, 0xce, 0xd7, 0x1f, 0x6f, 0xca, 0x78, 0x71, 0xc8, 0xae,
	0x0c, 0x84, 0xfb, 0x54, 0xbb, 0x93, 0xd9, 0x37, 0x33, 0x50, 0xb8, 0x5b, 0x2d, 0xf0, 0x9c, 0x2e,
	0xac, 0x7f, 0xae, 0x57, 0x7a, 0xaa, 0xde, 0xac, 0x3d, 0x0e, 0xb6, 0x37, 0x4a, 0xe8, 0xfe, 0xbf,
	0xfd, 0x81, 0xcf, 0xf4, 0x24, 0x1c, 0x59, 0xae, 0x98, 0x92, 0xfc, 0x12, 0x96, 0x76, 0x20, 0xae,
	0x90, 0x40, 0x96, 0x5e, 0xfb, 0xd1, 0xab, 0x34, 0xee, 0x3e, 0x04, 0x00, 0x00, 0xff, 0xff, 0x31,
	0xc8, 0x2f, 0x77, 0x1e, 0x04, 0x00, 0x00,
}
