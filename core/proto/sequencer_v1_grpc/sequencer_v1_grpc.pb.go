// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/sequencer_v1_grpc/sequencer_v1_grpc.proto

/*
Package sequencer_v1_grpc is a generated protocol buffer package.

It is generated from these files:
	proto/sequencer_v1_grpc/sequencer_v1_grpc.proto

It has these top-level messages:
*/
package sequencer_v1_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import keytransparency_v1_proto "github.com/google/keytransparency/core/proto/keytransparency_v1_proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SequencerService service

type SequencerServiceClient interface {
	// GetEpochs is a streaming API that sends epoch mutations upon creation.
	//
	// Returns the mutations of a newly created epoch.
	GetEpochs(ctx context.Context, in *keytransparency_v1_proto.GetEpochsRequest, opts ...grpc.CallOption) (SequencerService_GetEpochsClient, error)
}

type sequencerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSequencerServiceClient(cc *grpc.ClientConn) SequencerServiceClient {
	return &sequencerServiceClient{cc}
}

func (c *sequencerServiceClient) GetEpochs(ctx context.Context, in *keytransparency_v1_proto.GetEpochsRequest, opts ...grpc.CallOption) (SequencerService_GetEpochsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SequencerService_serviceDesc.Streams[0], c.cc, "/sequencer.v1.grpc.SequencerService/GetEpochs", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequencerServiceGetEpochsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SequencerService_GetEpochsClient interface {
	Recv() (*keytransparency_v1_proto.GetEpochsResponse, error)
	grpc.ClientStream
}

type sequencerServiceGetEpochsClient struct {
	grpc.ClientStream
}

func (x *sequencerServiceGetEpochsClient) Recv() (*keytransparency_v1_proto.GetEpochsResponse, error) {
	m := new(keytransparency_v1_proto.GetEpochsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SequencerService service

type SequencerServiceServer interface {
	// GetEpochs is a streaming API that sends epoch mutations upon creation.
	//
	// Returns the mutations of a newly created epoch.
	GetEpochs(*keytransparency_v1_proto.GetEpochsRequest, SequencerService_GetEpochsServer) error
}

func RegisterSequencerServiceServer(s *grpc.Server, srv SequencerServiceServer) {
	s.RegisterService(&_SequencerService_serviceDesc, srv)
}

func _SequencerService_GetEpochs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(keytransparency_v1_proto.GetEpochsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequencerServiceServer).GetEpochs(m, &sequencerServiceGetEpochsServer{stream})
}

type SequencerService_GetEpochsServer interface {
	Send(*keytransparency_v1_proto.GetEpochsResponse) error
	grpc.ServerStream
}

type sequencerServiceGetEpochsServer struct {
	grpc.ServerStream
}

func (x *sequencerServiceGetEpochsServer) Send(m *keytransparency_v1_proto.GetEpochsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SequencerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sequencer.v1.grpc.SequencerService",
	HandlerType: (*SequencerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEpochs",
			Handler:       _SequencerService_GetEpochs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/sequencer_v1_grpc/sequencer_v1_grpc.proto",
}

func init() { proto.RegisterFile("proto/sequencer_v1_grpc/sequencer_v1_grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2c, 0x4d, 0xcd, 0x4b, 0x4e, 0x2d, 0x8a, 0x2f, 0x33, 0x8c, 0x4f,
	0x2f, 0x2a, 0x48, 0xc6, 0x14, 0xd1, 0x03, 0xab, 0x14, 0x12, 0x84, 0x4b, 0xe8, 0x95, 0x19, 0xea,
	0x81, 0x24, 0xa4, 0x64, 0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13,
	0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0x1a, 0xa4, 0x6c, 0x21, 0x36,
	0x64, 0xa7, 0x56, 0x96, 0x14, 0x25, 0xe6, 0x15, 0x17, 0x24, 0x16, 0xa5, 0xe6, 0x25, 0x57, 0x82,
	0x4c, 0xc5, 0x2f, 0x01, 0xd1, 0x6e, 0x34, 0x8d, 0x91, 0x4b, 0x20, 0x18, 0x66, 0x65, 0x70, 0x6a,
	0x51, 0x59, 0x66, 0x72, 0xaa, 0x50, 0x23, 0x23, 0x17, 0xa7, 0x7b, 0x6a, 0x89, 0x6b, 0x41, 0x7e,
	0x72, 0x46, 0xb1, 0x90, 0x96, 0x1e, 0x9a, 0x19, 0x20, 0x97, 0x41, 0xcc, 0x80, 0x2b, 0x0a, 0x02,
	0x19, 0x51, 0x5c, 0x22, 0xa5, 0x4d, 0x94, 0xda, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x25, 0xc9,
	0xa6, 0xcb, 0x4f, 0x26, 0x33, 0x09, 0x0b, 0x09, 0xea, 0x97, 0x19, 0xea, 0xa7, 0x82, 0xe5, 0xac,
	0x8a, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x0d, 0x18, 0x9d, 0x1c, 0xa2, 0xec, 0xd2, 0x33, 0x4b, 0x32,
	0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xa1, 0x41, 0x80, 0x66, 0xb8, 0x7e, 0x72, 0x7e, 0x51,
	0x2a, 0xae, 0x20, 0x4e, 0x62, 0x03, 0x4b, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x44,
	0x64, 0xfe, 0x84, 0x01, 0x00, 0x00,
}
