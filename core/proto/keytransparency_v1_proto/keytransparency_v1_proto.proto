// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/google/keytransparency/core/proto/keytransparency_v1_proto";

// Key Transparency Service
//
// The Key Transparency Service API consists of a map of user names to public
// keys. Each user name also has a history of public keys that have been
// associated with it.
package keytransparency.v1.proto;

import "crypto/keyspb/keyspb.proto";
import "crypto/sigpb/sigpb.proto";
import "trillian.proto";
import "trillian_map_api.proto";

//
// Data types.
//

// Committed represents the data committed to in a cryptographic commitment.
// commitment = HMAC_SHA512_256(key, data)
message Committed {
  // key is the 16 byte random commitment key.
  bytes key = 1;
  // data is the data being committed to.
  bytes data = 2;
}

// EntryUpdate contains the user entry update(s).
message EntryUpdate {
  // mutation authorizes the change to entry.
  Entry mutation = 2;
  // commitment contains the data committed to in update.commitment.
  Committed committed = 3;
}

//
// Verifiable Map Leaf Data and Mutation Data.
//

// Entry is a signed change to a map entry.
// Entry contains a commitment to profile and a set of authorized update keys.
// Entry is placed in the verifiable map as leaf data.
message Entry {
  // index is the location of this leaf in the sparse merkle tree.
  bytes index = 3;
  // commitment is a cryptographic commitment to arbitrary data.
  bytes commitment = 6;
  // authorized_keys is the set of keys allowed to sign updates for this entry.
  repeated keyspb.PublicKey authorized_keys = 7;
  // previous contains the hash of the previous entry that this mutation is
  // modifying creating a hash chain of all mutations. The hash used is
  // CommonJSON in "github.com/benlaurie/objecthash/go/objecthash".
  bytes previous = 8;

  // signatures on key_value. Must be signed by keys from both previous and
  // current epochs. The first proves ownership of new epoch key, and the
  // second proves that the correct owner is making this change.
  map<string, sigpb.DigitallySigned> signatures = 2;
}

// MutationProof contains the information necessary to compute the new leaf value.
// It contains a) the old leaf value with it's inclusion proof and b) the mutation.
// The new leaf value is computed via:
//       Mutate(leaf_value, mutation)
message MutationProof {
  // mutation contains the information needed to modify the old leaf.
  // The format of a mutation is specific to the particular Mutate function being used.
  Entry mutation = 1;
  // leaf_proof contains the leaf and its inclusion proof for a particular map revision.
  trillian.MapLeafInclusion leaf_proof = 2;
}

// MapperMetadata tracks the mutations that have been mapped so far. It is
// embedded in the Trillian SignedMapHead.
message MapperMetadata {
  int64 highest_fully_completed_seq = 1;
}

//
// RPC request/response messages.
//

// GetEntryRequest for a user object.
message GetEntryRequest {
  // user_id is the user identifier. Most commonly an email address.
  string user_id = 1;
  // app_id is the identifier for the application.
  string app_id = 2;
  // first_tree_size is the tree_size of the currently trusted log root.
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 3;
}

// GetEntryResponse returns a requested user entry.
message GetEntryResponse {
  //
  // Privacy layer hides user_id and profile data until requested.
  //

  // vrf_proof is the proof for VRF on user_id.
  bytes vrf_proof = 1;

  // committed contains the profile for this account and connects the data
  // in profile to the commitment in leaf_proof.
  Committed committed = 2;

  //
  // Trillian map layer proves that the response is consistent.
  //

  // leaf_proof contains an Entry and an inclusion proof in the sparse Merkle
  // Tree.
  trillian.MapLeafInclusion leaf_proof = 3;
  // smr contains the signed map head for the sparse Merkle Tree.
  // smr is also stored in the append only log.
  trillian.SignedMapRoot smr = 4;

  //
  // Trillian log layer proves that smr is part of a globally consistent, append only log.
  //

  // log_root is the latest globally consistent log root.
  // TODO: gossip the log root to verify global consistency.
  trillian.SignedLogRoot log_root = 5;
  // log_consistency proves that log_root is consistent with previously seen roots.
  repeated bytes log_consistency = 6;
  // log_inclusion proves that smr is part of log_root at index=srm.MapRevision.
  repeated bytes log_inclusion = 7;
}

// ListEntryHistoryRequest gets a list of historical keys for a user.
message ListEntryHistoryRequest {
  // user_id is the user identifier.
  string user_id = 1;
  // start is the starting epoch.
  int64 start = 2;
  // page_size is the maximum number of entries to return.
  int32 page_size = 3;
  // app_id is the identifier for the application.
  string app_id = 4;
  // first_tree_size is the tree_size of the currently trusted log root.
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 5;
}

// ListEntryHistoryResponse requests a paginated history of keys for a user.
message ListEntryHistoryResponse {
  // values represents the list of keys this user_id has contained over time.
  repeated GetEntryResponse values = 1;
  // next_start is the next page token to query for pagination.
  // next_start is 0 when there are no more results to fetch.
  int64 next_start = 2;
}

// UpdateEntryRequest updates a user's profile.
message UpdateEntryRequest {
  // user_id specifies the id for the user who's profile is being updated.
  string user_id = 1;
  // app_id is the identifier for the application.
  string app_id = 2;
  // first_tree_size is the tree_size of the currently trusted log root.
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 3;
  // entry_update contains the user submitted update.
  EntryUpdate entry_update = 4;
}

// UpdateEntryResponse contains a proof once the update has been included in
// the Merkle Tree.
message UpdateEntryResponse {
  // proof contains a proof that the update has been included in the tree.
  GetEntryResponse proof = 1;
}

// GetMutationsRequest contains the input parameters of the GetMutation APIs.
message GetMutationsRequest {
  // epoch specifies the epoch number in which mutations will be returned.
  int64 epoch = 1;
  // first_tree_size is the tree_size of the currently trusted log root.
  // Omitting this field will omit the log consistency proof from the response.
  int64 first_tree_size = 2;
  // page_token defines the starting point for pagination. An empty
  // value means start from the beginning. A non-empty value requests the next
  // page of values.
  string page_token = 3;
  // page_size is the maximum number of epochs to return.
  int32 page_size = 4;
}

// GetMutationsResponse contains the results of GetMutation APIs.
message GetMutationsResponse {
  // epoch specifies the epoch number of the returned mutations.
  int64 epoch = 1;
  // smr contains the signed map root for the sparse Merkle Tree.
  trillian.SignedMapRoot smr = 2;
  // log_root is the latest globally consistent log root.
  trillian.SignedLogRoot log_root = 3;
  // log_consistency proves that log_root is consistent with previously seen roots.
  repeated bytes log_consistency = 4;
  // log_inclusion proves that smr is part of log_root at index=srm.MapRevision.
  repeated bytes log_inclusion = 5;
  // mutation contains mutation information.
  repeated MutationProof mutations = 6;
  // next_page_token is the next page token to query for pagination.
  // An empty value means there are no more results to fetch.
  // A non-zero value may be used by the client to fetch the next page of
  // results.
  string next_page_token = 7;
}

// GetDomainInfoRequest contains an empty request to query the GetDomainInfo
// APIs.
message GetDomainInfoRequest {}

// GetDomainInfoResponse contains the results of GetDomainInfo APIs.
message GetDomainInfoResponse {
  // Log contains the Log-Tree's info.
  trillian.Tree log = 1;
  // Map contains the Map-Tree's info.
  trillian.Tree map = 2;
  // Vrf contains the VRF public key.
  keyspb.PublicKey vrf = 3;
}

// UserProfile is the data that a client would like to store on the server.
message UserProfile {
  // data is the public key data for the user.
  bytes data = 1;
}

// SetEntriesRequest will update the accounts of the given user_ids to be set to
// user data if those accounts have key_id in their set of authorized_keys.
message BatchUpdateEntriesRequest {
  // users is a map from user_ids to user data.
  map<string,UserProfile> users = 1;

  // app_id is the application to make this change for.
  string app_id = 2;

  // key_id is the id of the authorized_public key to use when updating accounts.
  // This must be a key that this server has the private key for.
  string key_id = 3;
}

// BatchUpdateEntriesResponse returns a list of users for which the set operation
// was unsuccessful.
message BatchUpdateEntriesResponse {
  // errors is a map from user_ids to errors, if there was an error for that user.
  map<string, string> errors = 1;
}

// GetEpochsRequest is an empty proto message used as input to GetEpochs API.
message GetEpochsRequest {}

// GetEpochsResponse contains mutations of a newly created epoch.
message GetEpochsResponse {
  // mutations contains all mutations information of a newly created epoch.
  GetMutationsResponse mutations = 1;
}
