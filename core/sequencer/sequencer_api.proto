// Copyright 2018 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/google/keytransparency/core/sequencer/sequencer_go_proto";

// Key Transparency Sequencer
//
// The Key Transparency Sequencer API supplies an api for applying mutations to the current
// state of the map.
package google.keytransparency.sequencer;

import "google/protobuf/empty.proto";
import "v1/keytransparency.proto";

// CreateEpochRequest contains information needed to create a new epoch.
message CreateEpochRequest {
   // domain_id is the domain to apply the mutations to.
   string domain_id = 1;
   // messages is the list of mutations that should be applied to the current epoch.
   repeated v1.EntryUpdate messages = 2;
   // revision is the expected revision of the new epoch.
   int64 revision = 3;
}

// RunBatchRequest triggers the sequencing of a batch of mutations for a
// domain, with the batch size governed by the request parameters.
message RunBatchRequest{
   // domain_id is the domain to run for.
   string domain_id = 1;
   // min_batch is the minimum number of items in a batch.
   // If less than min_batch items are available, nothing happens.
   // TODO(gbelvin): Add a timeout so items in the queue get processed eventually.
   int32 min_batch = 2;
   // max_batch is the maximum number of items in a batch.
   int32 max_batch = 3;
}


// PublishBatchRequest copies all SignedMapHeads into the Log of SignedMapHeads.
message PublishBatchRequest {
   string domain_id = 1;
}

// The KeyTransparency Sequencer API.
service KeyTransparencySequencer {
  // RunBatch reads outstanding mutations and calls CreateEpoch.
  rpc RunBatch(RunBatchRequest) returns (google.protobuf.Empty) {}
  // CreateEpoch applies the contained mutations to the current map root.
  // If this method fails, it must be retried with the same arguments.
  rpc CreateEpoch(CreateEpochRequest) returns (google.protobuf.Empty) {}
  // PublishBatch copies the MapRoots of all known map revisions into the Log
  // of MapRoots.
  rpc PublishBatch(PublishBatchRequest) returns (google.protobuf.Empty) {}
}

