// Copyright 2018 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.1
// source: sequencer_api.proto

// Key Transparency Sequencer
//
// The Key Transparency Sequencer API supplies an api for applying mutations to the current
// state of the map.

package sequencer_go_proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MapMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sources is a list of log sources that were used to construct this map revision.
	Sources []*MapMetadata_SourceSlice `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *MapMetadata) Reset() {
	*x = MapMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMetadata) ProtoMessage() {}

func (x *MapMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMetadata.ProtoReflect.Descriptor instead.
func (*MapMetadata) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{0}
}

func (x *MapMetadata) GetSources() []*MapMetadata_SourceSlice {
	if x != nil {
		return x.Sources
	}
	return nil
}

// DefineRevisionsRequest contains information needed to define new revisions.
type DefineRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id is the directory to examine the outstanding mutations for.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// min_batch is the minimum number of items in a batch.
	// If less than min_batch items are available, nothing happens.
	// TODO(#1047): Replace with timeout so items in the log get processed
	// eventually.
	MinBatch int32 `protobuf:"varint,2,opt,name=min_batch,json=minBatch,proto3" json:"min_batch,omitempty"`
	// max_batch is the maximum number of items in a batch.
	MaxBatch int32 `protobuf:"varint,3,opt,name=max_batch,json=maxBatch,proto3" json:"max_batch,omitempty"`
	// max_unapplied is the maximum number of revisions that can be defined ahead
	// of applied revisions.
	MaxUnapplied int32 `protobuf:"varint,4,opt,name=max_unapplied,json=maxUnapplied,proto3" json:"max_unapplied,omitempty"`
}

func (x *DefineRevisionsRequest) Reset() {
	*x = DefineRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineRevisionsRequest) ProtoMessage() {}

func (x *DefineRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineRevisionsRequest.ProtoReflect.Descriptor instead.
func (*DefineRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{1}
}

func (x *DefineRevisionsRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *DefineRevisionsRequest) GetMinBatch() int32 {
	if x != nil {
		return x.MinBatch
	}
	return 0
}

func (x *DefineRevisionsRequest) GetMaxBatch() int32 {
	if x != nil {
		return x.MaxBatch
	}
	return 0
}

func (x *DefineRevisionsRequest) GetMaxUnapplied() int32 {
	if x != nil {
		return x.MaxUnapplied
	}
	return 0
}

// DefineRevisionsResponse contains information about defined/applied revisions.
type DefineRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// highest_applied is the current map revision, which is also the highest map
	// revision that has been applied.
	HighestApplied int64 `protobuf:"varint,2,opt,name=highest_applied,json=highestApplied,proto3" json:"highest_applied,omitempty"`
	// highest_defined is the highest defined revision after this call.
	HighestDefined int64 `protobuf:"varint,3,opt,name=highest_defined,json=highestDefined,proto3" json:"highest_defined,omitempty"`
}

func (x *DefineRevisionsResponse) Reset() {
	*x = DefineRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineRevisionsResponse) ProtoMessage() {}

func (x *DefineRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineRevisionsResponse.ProtoReflect.Descriptor instead.
func (*DefineRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{2}
}

func (x *DefineRevisionsResponse) GetHighestApplied() int64 {
	if x != nil {
		return x.HighestApplied
	}
	return 0
}

func (x *DefineRevisionsResponse) GetHighestDefined() int64 {
	if x != nil {
		return x.HighestDefined
	}
	return 0
}

// GetDefinedRevisionsRequest contains information needed to request the set of
// defined/applied revisions.
type GetDefinedRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id is the directory to examine the revisions for.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
}

func (x *GetDefinedRevisionsRequest) Reset() {
	*x = GetDefinedRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefinedRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefinedRevisionsRequest) ProtoMessage() {}

func (x *GetDefinedRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefinedRevisionsRequest.ProtoReflect.Descriptor instead.
func (*GetDefinedRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetDefinedRevisionsRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

// GetDefinedRevisionResponse contains info about defined/applied revisions.
type GetDefinedRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// highest_applied is the current map revision, which is also the highest map
	// revision that has been applied.
	HighestApplied int64 `protobuf:"varint,1,opt,name=highest_applied,json=highestApplied,proto3" json:"highest_applied,omitempty"`
	// highest_defined is the highest defined revision after this call.
	HighestDefined int64 `protobuf:"varint,2,opt,name=highest_defined,json=highestDefined,proto3" json:"highest_defined,omitempty"`
}

func (x *GetDefinedRevisionsResponse) Reset() {
	*x = GetDefinedRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefinedRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefinedRevisionsResponse) ProtoMessage() {}

func (x *GetDefinedRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefinedRevisionsResponse.ProtoReflect.Descriptor instead.
func (*GetDefinedRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetDefinedRevisionsResponse) GetHighestApplied() int64 {
	if x != nil {
		return x.HighestApplied
	}
	return 0
}

func (x *GetDefinedRevisionsResponse) GetHighestDefined() int64 {
	if x != nil {
		return x.HighestDefined
	}
	return 0
}

// ApplyRevisionsRequest triggers applying revisions to the directory's map.
type ApplyRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id is the directory to apply revisions for.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
}

func (x *ApplyRevisionsRequest) Reset() {
	*x = ApplyRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRevisionsRequest) ProtoMessage() {}

func (x *ApplyRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRevisionsRequest.ProtoReflect.Descriptor instead.
func (*ApplyRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{5}
}

func (x *ApplyRevisionsRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

// ApplyRevisionRequest contains information needed to create a new revision.
type ApplyRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// directory_id is the directory to apply the mutations to.
	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// revision is the expected revision of the new revision.
	Revision int64 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *ApplyRevisionRequest) Reset() {
	*x = ApplyRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRevisionRequest) ProtoMessage() {}

func (x *ApplyRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRevisionRequest.ProtoReflect.Descriptor instead.
func (*ApplyRevisionRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{6}
}

func (x *ApplyRevisionRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *ApplyRevisionRequest) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

// ApplyRevisionResponse contains stats about the created revision.
type ApplyRevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// The revision this is for.
	Revision int64 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	// mutations processed.
	Mutations int64 `protobuf:"varint,3,opt,name=mutations,proto3" json:"mutations,omitempty"`
	// map_leaves written.
	MapLeaves int64 `protobuf:"varint,4,opt,name=map_leaves,json=mapLeaves,proto3" json:"map_leaves,omitempty"`
}

func (x *ApplyRevisionResponse) Reset() {
	*x = ApplyRevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRevisionResponse) ProtoMessage() {}

func (x *ApplyRevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRevisionResponse.ProtoReflect.Descriptor instead.
func (*ApplyRevisionResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{7}
}

func (x *ApplyRevisionResponse) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *ApplyRevisionResponse) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *ApplyRevisionResponse) GetMutations() int64 {
	if x != nil {
		return x.Mutations
	}
	return 0
}

func (x *ApplyRevisionResponse) GetMapLeaves() int64 {
	if x != nil {
		return x.MapLeaves
	}
	return 0
}

// PublishRevisionsRequest copies all available SignedMapRoots into the Log of SignedMapRoots.
type PublishRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectoryId string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	// block until a Signed Log Root has been published which encompases all map roots.
	Block bool `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *PublishRevisionsRequest) Reset() {
	*x = PublishRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRevisionsRequest) ProtoMessage() {}

func (x *PublishRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRevisionsRequest.ProtoReflect.Descriptor instead.
func (*PublishRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{8}
}

func (x *PublishRevisionsRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *PublishRevisionsRequest) GetBlock() bool {
	if x != nil {
		return x.Block
	}
	return false
}

// PublishRevisionsResponse contains metrics about the publishing operation.
type PublishRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// revisions published to the log of signed map roots.
	Revisions []int64 `protobuf:"varint,1,rep,packed,name=revisions,proto3" json:"revisions,omitempty"`
}

func (x *PublishRevisionsResponse) Reset() {
	*x = PublishRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRevisionsResponse) ProtoMessage() {}

func (x *PublishRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRevisionsResponse.ProtoReflect.Descriptor instead.
func (*PublishRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{9}
}

func (x *PublishRevisionsResponse) GetRevisions() []int64 {
	if x != nil {
		return x.Revisions
	}
	return nil
}

type EstimateBacklogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectoryId       string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	MaxUnappliedCount int32  `protobuf:"varint,2,opt,name=max_unapplied_count,json=maxUnappliedCount,proto3" json:"max_unapplied_count,omitempty"`
}

func (x *EstimateBacklogRequest) Reset() {
	*x = EstimateBacklogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateBacklogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateBacklogRequest) ProtoMessage() {}

func (x *EstimateBacklogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateBacklogRequest.ProtoReflect.Descriptor instead.
func (*EstimateBacklogRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{10}
}

func (x *EstimateBacklogRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *EstimateBacklogRequest) GetMaxUnappliedCount() int32 {
	if x != nil {
		return x.MaxUnappliedCount
	}
	return 0
}

type EstimateBacklogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectoryId    string `protobuf:"bytes,1,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	UnappliedCount int32  `protobuf:"varint,2,opt,name=unapplied_count,json=unappliedCount,proto3" json:"unapplied_count,omitempty"`
}

func (x *EstimateBacklogResponse) Reset() {
	*x = EstimateBacklogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateBacklogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateBacklogResponse) ProtoMessage() {}

func (x *EstimateBacklogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateBacklogResponse.ProtoReflect.Descriptor instead.
func (*EstimateBacklogResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{11}
}

func (x *EstimateBacklogResponse) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *EstimateBacklogResponse) GetUnappliedCount() int32 {
	if x != nil {
		return x.UnappliedCount
	}
	return 0
}

// SourceSlice is the range of inputs that have been included in a map
// revision.
type MapMetadata_SourceSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// lowest_inclusive is the lowest primary key (inclusive) of the source
	// log that has been incorporated into this map revision. The primary
	// keys of logged items MUST be monotonically increasing.
	// Defined in terms of microseconds from the Unix epoch.
	LowestInclusive int64 `protobuf:"varint,1,opt,name=lowest_inclusive,json=lowestInclusive,proto3" json:"lowest_inclusive,omitempty"`
	// highest_exclusive is the highest primary key (exclusive) of the source
	// log that has been incorporated into this map revision. The primary keys
	// of logged items MUST be monotonically increasing.
	// Defined in terms of microseconds from the Unix epoch.
	HighestExclusive int64 `protobuf:"varint,2,opt,name=highest_exclusive,json=highestExclusive,proto3" json:"highest_exclusive,omitempty"`
	// log_id is the ID of the source log.
	LogId int64 `protobuf:"varint,3,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
}

func (x *MapMetadata_SourceSlice) Reset() {
	*x = MapMetadata_SourceSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMetadata_SourceSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMetadata_SourceSlice) ProtoMessage() {}

func (x *MapMetadata_SourceSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMetadata_SourceSlice.ProtoReflect.Descriptor instead.
func (*MapMetadata_SourceSlice) Descriptor() ([]byte, []int) {
	return file_sequencer_api_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MapMetadata_SourceSlice) GetLowestInclusive() int64 {
	if x != nil {
		return x.LowestInclusive
	}
	return 0
}

func (x *MapMetadata_SourceSlice) GetHighestExclusive() int64 {
	if x != nil {
		return x.HighestExclusive
	}
	return 0
}

func (x *MapMetadata_SourceSlice) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

var File_sequencer_api_proto protoreflect.FileDescriptor

var file_sequencer_api_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65,
	0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b,
	0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x7c, 0x0a, 0x0b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x77, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x9a, 0x01,
	0x0a, 0x16, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x55, 0x6e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0x71, 0x0a, 0x17, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x3f, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x6f,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22,
	0x3a, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x14, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70,
	0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x38, 0x0a, 0x18,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x6e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xb3, 0x06, 0x0a, 0x18, 0x4b,
	0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b,
	0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x92, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x10,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x12, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6b,
	0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x67,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sequencer_api_proto_rawDescOnce sync.Once
	file_sequencer_api_proto_rawDescData = file_sequencer_api_proto_rawDesc
)

func file_sequencer_api_proto_rawDescGZIP() []byte {
	file_sequencer_api_proto_rawDescOnce.Do(func() {
		file_sequencer_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_sequencer_api_proto_rawDescData)
	})
	return file_sequencer_api_proto_rawDescData
}

var file_sequencer_api_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_sequencer_api_proto_goTypes = []interface{}{
	(*MapMetadata)(nil),                 // 0: google.keytransparency.sequencer.MapMetadata
	(*DefineRevisionsRequest)(nil),      // 1: google.keytransparency.sequencer.DefineRevisionsRequest
	(*DefineRevisionsResponse)(nil),     // 2: google.keytransparency.sequencer.DefineRevisionsResponse
	(*GetDefinedRevisionsRequest)(nil),  // 3: google.keytransparency.sequencer.GetDefinedRevisionsRequest
	(*GetDefinedRevisionsResponse)(nil), // 4: google.keytransparency.sequencer.GetDefinedRevisionsResponse
	(*ApplyRevisionsRequest)(nil),       // 5: google.keytransparency.sequencer.ApplyRevisionsRequest
	(*ApplyRevisionRequest)(nil),        // 6: google.keytransparency.sequencer.ApplyRevisionRequest
	(*ApplyRevisionResponse)(nil),       // 7: google.keytransparency.sequencer.ApplyRevisionResponse
	(*PublishRevisionsRequest)(nil),     // 8: google.keytransparency.sequencer.PublishRevisionsRequest
	(*PublishRevisionsResponse)(nil),    // 9: google.keytransparency.sequencer.PublishRevisionsResponse
	(*EstimateBacklogRequest)(nil),      // 10: google.keytransparency.sequencer.EstimateBacklogRequest
	(*EstimateBacklogResponse)(nil),     // 11: google.keytransparency.sequencer.EstimateBacklogResponse
	(*MapMetadata_SourceSlice)(nil),     // 12: google.keytransparency.sequencer.MapMetadata.SourceSlice
	(*empty.Empty)(nil),                 // 13: google.protobuf.Empty
}
var file_sequencer_api_proto_depIdxs = []int32{
	12, // 0: google.keytransparency.sequencer.MapMetadata.sources:type_name -> google.keytransparency.sequencer.MapMetadata.SourceSlice
	1,  // 1: google.keytransparency.sequencer.KeyTransparencySequencer.DefineRevisions:input_type -> google.keytransparency.sequencer.DefineRevisionsRequest
	3,  // 2: google.keytransparency.sequencer.KeyTransparencySequencer.GetDefinedRevisions:input_type -> google.keytransparency.sequencer.GetDefinedRevisionsRequest
	5,  // 3: google.keytransparency.sequencer.KeyTransparencySequencer.ApplyRevisions:input_type -> google.keytransparency.sequencer.ApplyRevisionsRequest
	6,  // 4: google.keytransparency.sequencer.KeyTransparencySequencer.ApplyRevision:input_type -> google.keytransparency.sequencer.ApplyRevisionRequest
	8,  // 5: google.keytransparency.sequencer.KeyTransparencySequencer.PublishRevisions:input_type -> google.keytransparency.sequencer.PublishRevisionsRequest
	10, // 6: google.keytransparency.sequencer.KeyTransparencySequencer.EstimateBacklog:input_type -> google.keytransparency.sequencer.EstimateBacklogRequest
	2,  // 7: google.keytransparency.sequencer.KeyTransparencySequencer.DefineRevisions:output_type -> google.keytransparency.sequencer.DefineRevisionsResponse
	4,  // 8: google.keytransparency.sequencer.KeyTransparencySequencer.GetDefinedRevisions:output_type -> google.keytransparency.sequencer.GetDefinedRevisionsResponse
	13, // 9: google.keytransparency.sequencer.KeyTransparencySequencer.ApplyRevisions:output_type -> google.protobuf.Empty
	7,  // 10: google.keytransparency.sequencer.KeyTransparencySequencer.ApplyRevision:output_type -> google.keytransparency.sequencer.ApplyRevisionResponse
	9,  // 11: google.keytransparency.sequencer.KeyTransparencySequencer.PublishRevisions:output_type -> google.keytransparency.sequencer.PublishRevisionsResponse
	11, // 12: google.keytransparency.sequencer.KeyTransparencySequencer.EstimateBacklog:output_type -> google.keytransparency.sequencer.EstimateBacklogResponse
	7,  // [7:13] is the sub-list for method output_type
	1,  // [1:7] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_sequencer_api_proto_init() }
func file_sequencer_api_proto_init() {
	if File_sequencer_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sequencer_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefinedRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefinedRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateBacklogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateBacklogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMetadata_SourceSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sequencer_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sequencer_api_proto_goTypes,
		DependencyIndexes: file_sequencer_api_proto_depIdxs,
		MessageInfos:      file_sequencer_api_proto_msgTypes,
	}.Build()
	File_sequencer_api_proto = out.File
	file_sequencer_api_proto_rawDesc = nil
	file_sequencer_api_proto_goTypes = nil
	file_sequencer_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KeyTransparencySequencerClient is the client API for KeyTransparencySequencer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyTransparencySequencerClient interface {
	// DefineRevisions returns the info on defined/applied revisions, after
	// optionally defining a new revision of outstanding mutations.
	DefineRevisions(ctx context.Context, in *DefineRevisionsRequest, opts ...grpc.CallOption) (*DefineRevisionsResponse, error)
	// GetDefinedRevisions returns the range of defined and unapplied revisions.
	GetDefinedRevisions(ctx context.Context, in *GetDefinedRevisionsRequest, opts ...grpc.CallOption) (*GetDefinedRevisionsResponse, error)
	// ApplyRevisions figures out the outstanding revisions, and applies the
	// corresponding mutations the to the map.
	ApplyRevisions(ctx context.Context, in *ApplyRevisionsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ApplyRevision applies the mutations for the supplied revision.
	// If the revision does not exist, this must return `NotFound`.
	ApplyRevision(ctx context.Context, in *ApplyRevisionRequest, opts ...grpc.CallOption) (*ApplyRevisionResponse, error)
	// PublishRevisions copies the MapRoots of all known map revisions into the Log
	// of MapRoots.
	PublishRevisions(ctx context.Context, in *PublishRevisionsRequest, opts ...grpc.CallOption) (*PublishRevisionsResponse, error)
	// EstimateBacklog will update various counters on the server. Call periodically.
	EstimateBacklog(ctx context.Context, in *EstimateBacklogRequest, opts ...grpc.CallOption) (*EstimateBacklogResponse, error)
}

type keyTransparencySequencerClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyTransparencySequencerClient(cc grpc.ClientConnInterface) KeyTransparencySequencerClient {
	return &keyTransparencySequencerClient{cc}
}

func (c *keyTransparencySequencerClient) DefineRevisions(ctx context.Context, in *DefineRevisionsRequest, opts ...grpc.CallOption) (*DefineRevisionsResponse, error) {
	out := new(DefineRevisionsResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.sequencer.KeyTransparencySequencer/DefineRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencySequencerClient) GetDefinedRevisions(ctx context.Context, in *GetDefinedRevisionsRequest, opts ...grpc.CallOption) (*GetDefinedRevisionsResponse, error) {
	out := new(GetDefinedRevisionsResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.sequencer.KeyTransparencySequencer/GetDefinedRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencySequencerClient) ApplyRevisions(ctx context.Context, in *ApplyRevisionsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.sequencer.KeyTransparencySequencer/ApplyRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencySequencerClient) ApplyRevision(ctx context.Context, in *ApplyRevisionRequest, opts ...grpc.CallOption) (*ApplyRevisionResponse, error) {
	out := new(ApplyRevisionResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.sequencer.KeyTransparencySequencer/ApplyRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencySequencerClient) PublishRevisions(ctx context.Context, in *PublishRevisionsRequest, opts ...grpc.CallOption) (*PublishRevisionsResponse, error) {
	out := new(PublishRevisionsResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.sequencer.KeyTransparencySequencer/PublishRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencySequencerClient) EstimateBacklog(ctx context.Context, in *EstimateBacklogRequest, opts ...grpc.CallOption) (*EstimateBacklogResponse, error) {
	out := new(EstimateBacklogResponse)
	err := c.cc.Invoke(ctx, "/google.keytransparency.sequencer.KeyTransparencySequencer/EstimateBacklog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyTransparencySequencerServer is the server API for KeyTransparencySequencer service.
type KeyTransparencySequencerServer interface {
	// DefineRevisions returns the info on defined/applied revisions, after
	// optionally defining a new revision of outstanding mutations.
	DefineRevisions(context.Context, *DefineRevisionsRequest) (*DefineRevisionsResponse, error)
	// GetDefinedRevisions returns the range of defined and unapplied revisions.
	GetDefinedRevisions(context.Context, *GetDefinedRevisionsRequest) (*GetDefinedRevisionsResponse, error)
	// ApplyRevisions figures out the outstanding revisions, and applies the
	// corresponding mutations the to the map.
	ApplyRevisions(context.Context, *ApplyRevisionsRequest) (*empty.Empty, error)
	// ApplyRevision applies the mutations for the supplied revision.
	// If the revision does not exist, this must return `NotFound`.
	ApplyRevision(context.Context, *ApplyRevisionRequest) (*ApplyRevisionResponse, error)
	// PublishRevisions copies the MapRoots of all known map revisions into the Log
	// of MapRoots.
	PublishRevisions(context.Context, *PublishRevisionsRequest) (*PublishRevisionsResponse, error)
	// EstimateBacklog will update various counters on the server. Call periodically.
	EstimateBacklog(context.Context, *EstimateBacklogRequest) (*EstimateBacklogResponse, error)
}

// UnimplementedKeyTransparencySequencerServer can be embedded to have forward compatible implementations.
type UnimplementedKeyTransparencySequencerServer struct {
}

func (*UnimplementedKeyTransparencySequencerServer) DefineRevisions(context.Context, *DefineRevisionsRequest) (*DefineRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineRevisions not implemented")
}
func (*UnimplementedKeyTransparencySequencerServer) GetDefinedRevisions(context.Context, *GetDefinedRevisionsRequest) (*GetDefinedRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefinedRevisions not implemented")
}
func (*UnimplementedKeyTransparencySequencerServer) ApplyRevisions(context.Context, *ApplyRevisionsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyRevisions not implemented")
}
func (*UnimplementedKeyTransparencySequencerServer) ApplyRevision(context.Context, *ApplyRevisionRequest) (*ApplyRevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyRevision not implemented")
}
func (*UnimplementedKeyTransparencySequencerServer) PublishRevisions(context.Context, *PublishRevisionsRequest) (*PublishRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishRevisions not implemented")
}
func (*UnimplementedKeyTransparencySequencerServer) EstimateBacklog(context.Context, *EstimateBacklogRequest) (*EstimateBacklogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateBacklog not implemented")
}

func RegisterKeyTransparencySequencerServer(s *grpc.Server, srv KeyTransparencySequencerServer) {
	s.RegisterService(&_KeyTransparencySequencer_serviceDesc, srv)
}

func _KeyTransparencySequencer_DefineRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefineRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencySequencerServer).DefineRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.sequencer.KeyTransparencySequencer/DefineRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencySequencerServer).DefineRevisions(ctx, req.(*DefineRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencySequencer_GetDefinedRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefinedRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencySequencerServer).GetDefinedRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.sequencer.KeyTransparencySequencer/GetDefinedRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencySequencerServer).GetDefinedRevisions(ctx, req.(*GetDefinedRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencySequencer_ApplyRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencySequencerServer).ApplyRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.sequencer.KeyTransparencySequencer/ApplyRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencySequencerServer).ApplyRevisions(ctx, req.(*ApplyRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencySequencer_ApplyRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencySequencerServer).ApplyRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.sequencer.KeyTransparencySequencer/ApplyRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencySequencerServer).ApplyRevision(ctx, req.(*ApplyRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencySequencer_PublishRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencySequencerServer).PublishRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.sequencer.KeyTransparencySequencer/PublishRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencySequencerServer).PublishRevisions(ctx, req.(*PublishRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencySequencer_EstimateBacklog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateBacklogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencySequencerServer).EstimateBacklog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.sequencer.KeyTransparencySequencer/EstimateBacklog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencySequencerServer).EstimateBacklog(ctx, req.(*EstimateBacklogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencySequencer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.sequencer.KeyTransparencySequencer",
	HandlerType: (*KeyTransparencySequencerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DefineRevisions",
			Handler:    _KeyTransparencySequencer_DefineRevisions_Handler,
		},
		{
			MethodName: "GetDefinedRevisions",
			Handler:    _KeyTransparencySequencer_GetDefinedRevisions_Handler,
		},
		{
			MethodName: "ApplyRevisions",
			Handler:    _KeyTransparencySequencer_ApplyRevisions_Handler,
		},
		{
			MethodName: "ApplyRevision",
			Handler:    _KeyTransparencySequencer_ApplyRevision_Handler,
		},
		{
			MethodName: "PublishRevisions",
			Handler:    _KeyTransparencySequencer_PublishRevisions_Handler,
		},
		{
			MethodName: "EstimateBacklog",
			Handler:    _KeyTransparencySequencer_EstimateBacklog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequencer_api.proto",
}
