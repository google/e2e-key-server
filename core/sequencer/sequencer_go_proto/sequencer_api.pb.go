// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sequencer_api.proto

// Key Transparency Sequencer
//
// The Key Transparency Sequencer API supplies an api for applying mutations to the current
// state of the map.

package sequencer_go_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MapMetadata struct {
	// source defines the range of inputs used for this map revision.
	Source               *MapMetadata_SourceSlice `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MapMetadata) Reset()         { *m = MapMetadata{} }
func (m *MapMetadata) String() string { return proto.CompactTextString(m) }
func (*MapMetadata) ProtoMessage()    {}
func (*MapMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a5d61b2e27141ee, []int{0}
}

func (m *MapMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapMetadata.Unmarshal(m, b)
}
func (m *MapMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapMetadata.Marshal(b, m, deterministic)
}
func (m *MapMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapMetadata.Merge(m, src)
}
func (m *MapMetadata) XXX_Size() int {
	return xxx_messageInfo_MapMetadata.Size(m)
}
func (m *MapMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MapMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MapMetadata proto.InternalMessageInfo

func (m *MapMetadata) GetSource() *MapMetadata_SourceSlice {
	if m != nil {
		return m.Source
	}
	return nil
}

// MapSourceSlice is the range of inputs that have been included in a map revision.
type MapMetadata_SourceSlice struct {
	// lowest_timestamp is the lowest timestamp (exclusive) in nanoseconds
	// since January 1, 1970 UTC of the source log that has been incorporated
	// into this map revision. The timestamps of logged items MUST be
	// monotonically increasing.
	LowestTimestamp int64 `protobuf:"varint,1,opt,name=lowest_timestamp,json=lowestTimestamp,proto3" json:"lowest_timestamp,omitempty"`
	// highest_timestamp is the highest timestamp (inclusive) in nanoseconds
	// since January 1, 1970 UTC of the source log that has been incorporated
	// into this map revision. The timestamps of logged items MUST be
	// monotonically increasing.
	HighestTimestamp     int64    `protobuf:"varint,2,opt,name=highest_timestamp,json=highestTimestamp,proto3" json:"highest_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapMetadata_SourceSlice) Reset()         { *m = MapMetadata_SourceSlice{} }
func (m *MapMetadata_SourceSlice) String() string { return proto.CompactTextString(m) }
func (*MapMetadata_SourceSlice) ProtoMessage()    {}
func (*MapMetadata_SourceSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a5d61b2e27141ee, []int{0, 0}
}

func (m *MapMetadata_SourceSlice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapMetadata_SourceSlice.Unmarshal(m, b)
}
func (m *MapMetadata_SourceSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapMetadata_SourceSlice.Marshal(b, m, deterministic)
}
func (m *MapMetadata_SourceSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapMetadata_SourceSlice.Merge(m, src)
}
func (m *MapMetadata_SourceSlice) XXX_Size() int {
	return xxx_messageInfo_MapMetadata_SourceSlice.Size(m)
}
func (m *MapMetadata_SourceSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_MapMetadata_SourceSlice.DiscardUnknown(m)
}

var xxx_messageInfo_MapMetadata_SourceSlice proto.InternalMessageInfo

func (m *MapMetadata_SourceSlice) GetLowestTimestamp() int64 {
	if m != nil {
		return m.LowestTimestamp
	}
	return 0
}

func (m *MapMetadata_SourceSlice) GetHighestTimestamp() int64 {
	if m != nil {
		return m.HighestTimestamp
	}
	return 0
}

// CreateEpochRequest contains information needed to create a new epoch.
type CreateEpochRequest struct {
	// domain_id is the domain to apply the mutations to.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// revision is the expected revision of the new epoch.
	Revision int64 `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// sources defines the inputs used for this map revision.
	MapMetadata          *MapMetadata `protobuf:"bytes,4,opt,name=map_metadata,json=mapMetadata,proto3" json:"map_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateEpochRequest) Reset()         { *m = CreateEpochRequest{} }
func (m *CreateEpochRequest) String() string { return proto.CompactTextString(m) }
func (*CreateEpochRequest) ProtoMessage()    {}
func (*CreateEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a5d61b2e27141ee, []int{1}
}

func (m *CreateEpochRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateEpochRequest.Unmarshal(m, b)
}
func (m *CreateEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateEpochRequest.Marshal(b, m, deterministic)
}
func (m *CreateEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEpochRequest.Merge(m, src)
}
func (m *CreateEpochRequest) XXX_Size() int {
	return xxx_messageInfo_CreateEpochRequest.Size(m)
}
func (m *CreateEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEpochRequest proto.InternalMessageInfo

func (m *CreateEpochRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *CreateEpochRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *CreateEpochRequest) GetMapMetadata() *MapMetadata {
	if m != nil {
		return m.MapMetadata
	}
	return nil
}

// RunBatchRequest triggers the sequencing of a batch of mutations for a
// domain, with the batch size governed by the request parameters.
type RunBatchRequest struct {
	// domain_id is the domain to run for.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// min_batch is the minimum number of items in a batch.
	// If less than min_batch items are available, nothing happens.
	// TODO(#1047): Replace with timeout so items in the queue get processed eventually.
	MinBatch int32 `protobuf:"varint,2,opt,name=min_batch,json=minBatch,proto3" json:"min_batch,omitempty"`
	// max_batch is the maximum number of items in a batch.
	MaxBatch             int32    `protobuf:"varint,3,opt,name=max_batch,json=maxBatch,proto3" json:"max_batch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunBatchRequest) Reset()         { *m = RunBatchRequest{} }
func (m *RunBatchRequest) String() string { return proto.CompactTextString(m) }
func (*RunBatchRequest) ProtoMessage()    {}
func (*RunBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a5d61b2e27141ee, []int{2}
}

func (m *RunBatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunBatchRequest.Unmarshal(m, b)
}
func (m *RunBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunBatchRequest.Marshal(b, m, deterministic)
}
func (m *RunBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunBatchRequest.Merge(m, src)
}
func (m *RunBatchRequest) XXX_Size() int {
	return xxx_messageInfo_RunBatchRequest.Size(m)
}
func (m *RunBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunBatchRequest proto.InternalMessageInfo

func (m *RunBatchRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *RunBatchRequest) GetMinBatch() int32 {
	if m != nil {
		return m.MinBatch
	}
	return 0
}

func (m *RunBatchRequest) GetMaxBatch() int32 {
	if m != nil {
		return m.MaxBatch
	}
	return 0
}

// PublishBatchRequest copies all SignedMapHeads into the Log of SignedMapHeads.
type PublishBatchRequest struct {
	DomainId             string   `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishBatchRequest) Reset()         { *m = PublishBatchRequest{} }
func (m *PublishBatchRequest) String() string { return proto.CompactTextString(m) }
func (*PublishBatchRequest) ProtoMessage()    {}
func (*PublishBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a5d61b2e27141ee, []int{3}
}

func (m *PublishBatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishBatchRequest.Unmarshal(m, b)
}
func (m *PublishBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishBatchRequest.Marshal(b, m, deterministic)
}
func (m *PublishBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishBatchRequest.Merge(m, src)
}
func (m *PublishBatchRequest) XXX_Size() int {
	return xxx_messageInfo_PublishBatchRequest.Size(m)
}
func (m *PublishBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishBatchRequest proto.InternalMessageInfo

func (m *PublishBatchRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func init() {
	proto.RegisterType((*MapMetadata)(nil), "google.keytransparency.sequencer.MapMetadata")
	proto.RegisterType((*MapMetadata_SourceSlice)(nil), "google.keytransparency.sequencer.MapMetadata.SourceSlice")
	proto.RegisterType((*CreateEpochRequest)(nil), "google.keytransparency.sequencer.CreateEpochRequest")
	proto.RegisterType((*RunBatchRequest)(nil), "google.keytransparency.sequencer.RunBatchRequest")
	proto.RegisterType((*PublishBatchRequest)(nil), "google.keytransparency.sequencer.PublishBatchRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyTransparencySequencerClient is the client API for KeyTransparencySequencer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyTransparencySequencerClient interface {
	// RunBatch reads outstanding mutations and calls CreateEpoch.
	RunBatch(ctx context.Context, in *RunBatchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateEpoch applies the contained mutations to the current map root.
	// If this method fails, it must be retried with the same arguments.
	CreateEpoch(ctx context.Context, in *CreateEpochRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// PublishBatch copies the MapRoots of all known map revisions into the Log
	// of MapRoots.
	PublishBatch(ctx context.Context, in *PublishBatchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyTransparencySequencerClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencySequencerClient(cc *grpc.ClientConn) KeyTransparencySequencerClient {
	return &keyTransparencySequencerClient{cc}
}

func (c *keyTransparencySequencerClient) RunBatch(ctx context.Context, in *RunBatchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.sequencer.KeyTransparencySequencer/RunBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencySequencerClient) CreateEpoch(ctx context.Context, in *CreateEpochRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.sequencer.KeyTransparencySequencer/CreateEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencySequencerClient) PublishBatch(ctx context.Context, in *PublishBatchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.sequencer.KeyTransparencySequencer/PublishBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyTransparencySequencerServer is the server API for KeyTransparencySequencer service.
type KeyTransparencySequencerServer interface {
	// RunBatch reads outstanding mutations and calls CreateEpoch.
	RunBatch(context.Context, *RunBatchRequest) (*empty.Empty, error)
	// CreateEpoch applies the contained mutations to the current map root.
	// If this method fails, it must be retried with the same arguments.
	CreateEpoch(context.Context, *CreateEpochRequest) (*empty.Empty, error)
	// PublishBatch copies the MapRoots of all known map revisions into the Log
	// of MapRoots.
	PublishBatch(context.Context, *PublishBatchRequest) (*empty.Empty, error)
}

func RegisterKeyTransparencySequencerServer(s *grpc.Server, srv KeyTransparencySequencerServer) {
	s.RegisterService(&_KeyTransparencySequencer_serviceDesc, srv)
}

func _KeyTransparencySequencer_RunBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencySequencerServer).RunBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.sequencer.KeyTransparencySequencer/RunBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencySequencerServer).RunBatch(ctx, req.(*RunBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencySequencer_CreateEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencySequencerServer).CreateEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.sequencer.KeyTransparencySequencer/CreateEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencySequencerServer).CreateEpoch(ctx, req.(*CreateEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencySequencer_PublishBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencySequencerServer).PublishBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.sequencer.KeyTransparencySequencer/PublishBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencySequencerServer).PublishBatch(ctx, req.(*PublishBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencySequencer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.sequencer.KeyTransparencySequencer",
	HandlerType: (*KeyTransparencySequencerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunBatch",
			Handler:    _KeyTransparencySequencer_RunBatch_Handler,
		},
		{
			MethodName: "CreateEpoch",
			Handler:    _KeyTransparencySequencer_CreateEpoch_Handler,
		},
		{
			MethodName: "PublishBatch",
			Handler:    _KeyTransparencySequencer_PublishBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequencer_api.proto",
}

func init() { proto.RegisterFile("sequencer_api.proto", fileDescriptor_0a5d61b2e27141ee) }

var fileDescriptor_0a5d61b2e27141ee = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0xa5, 0xed, 0x98, 0xd2, 0x9b, 0x49, 0x2b, 0x9e, 0x84, 0xaa, 0xf6, 0x65, 0xca, 0x13, 0x08,
	0xe1, 0x88, 0x02, 0x0f, 0xbc, 0x6e, 0xea, 0x03, 0xa0, 0x49, 0x23, 0x9d, 0x84, 0x84, 0x84, 0x2c,
	0x37, 0xbd, 0x24, 0x16, 0x75, 0x6c, 0x6c, 0x07, 0xd6, 0x1f, 0xc4, 0x2f, 0xe0, 0x47, 0xf0, 0xb7,
	0x50, 0x9d, 0xa4, 0x0b, 0xe3, 0x23, 0xdd, 0x53, 0xeb, 0x7b, 0xcf, 0x3d, 0xe7, 0x9e, 0x63, 0x07,
	0x4e, 0x2c, 0x7e, 0x29, 0xb1, 0x48, 0xd1, 0x30, 0xae, 0x05, 0xd5, 0x46, 0x39, 0x45, 0x4e, 0x33,
	0xa5, 0xb2, 0x35, 0xd2, 0xcf, 0xb8, 0x71, 0x86, 0x17, 0x56, 0x73, 0x83, 0x45, 0xba, 0xa1, 0x3b,
	0xec, 0x64, 0x5a, 0x21, 0x62, 0x8f, 0x5f, 0x96, 0x9f, 0x62, 0x94, 0xda, 0x6d, 0xaa, 0xf1, 0xe8,
	0x67, 0x0f, 0xc2, 0x0b, 0xae, 0x2f, 0xd0, 0xf1, 0x15, 0x77, 0x9c, 0xbc, 0x83, 0x43, 0xab, 0x4a,
	0x93, 0xe2, 0xb8, 0x77, 0xda, 0x7b, 0x14, 0xce, 0x5e, 0xd1, 0x2e, 0x7e, 0xda, 0x1a, 0xa7, 0x0b,
	0x3f, 0xbb, 0x58, 0x8b, 0x14, 0x93, 0x9a, 0x68, 0x82, 0x10, 0xb6, 0xca, 0xe4, 0x31, 0x8c, 0xd6,
	0xea, 0x1b, 0x5a, 0xc7, 0x9c, 0x90, 0x68, 0x1d, 0x97, 0xda, 0x6b, 0x0d, 0x92, 0xe3, 0xaa, 0x7e,
	0xd5, 0x94, 0xc9, 0x13, 0x78, 0x90, 0x8b, 0x2c, 0xff, 0x1d, 0xdb, 0xf7, 0xd8, 0x51, 0xdd, 0xd8,
	0x81, 0xa3, 0xef, 0x3d, 0x20, 0xe7, 0x06, 0xb9, 0xc3, 0xb9, 0x56, 0x69, 0x9e, 0x6c, 0xf7, 0xb3,
	0x8e, 0x4c, 0x61, 0xb8, 0x52, 0x92, 0x8b, 0x82, 0x89, 0x95, 0xd7, 0x19, 0x26, 0x41, 0x55, 0x78,
	0xbd, 0x22, 0x13, 0x08, 0x0c, 0x7e, 0x15, 0x56, 0xa8, 0x62, 0x3c, 0xf0, 0xbc, 0xbb, 0x33, 0xb9,
	0x84, 0x23, 0xc9, 0x35, 0x93, 0xb5, 0xb5, 0xf1, 0x81, 0xcf, 0xe3, 0xe9, 0x9d, 0xf2, 0x48, 0x42,
	0x79, 0x73, 0x78, 0x73, 0x10, 0xf4, 0x47, 0x83, 0x28, 0x87, 0xe3, 0xa4, 0x2c, 0xce, 0xb8, 0xdb,
	0x73, 0xc7, 0x29, 0x0c, 0xa5, 0x28, 0xd8, 0x72, 0x3b, 0xe0, 0xcd, 0xdf, 0x4f, 0x02, 0x29, 0x2a,
	0x02, 0xdf, 0xe4, 0xd7, 0x75, 0x73, 0x50, 0x37, 0xf9, 0xb5, 0x6f, 0x46, 0x33, 0x38, 0xb9, 0x2c,
	0x97, 0x6b, 0x61, 0xf3, 0xbd, 0xd5, 0x66, 0x3f, 0xfa, 0x30, 0x7e, 0x8b, 0x9b, 0xab, 0x96, 0xb5,
	0x45, 0xe3, 0x8c, 0xbc, 0x87, 0xa0, 0x59, 0x9d, 0x3c, 0xeb, 0x0e, 0xe2, 0x96, 0xcd, 0xc9, 0xc3,
	0x66, 0xa4, 0x79, 0x89, 0x74, 0xbe, 0x7d, 0x89, 0xd1, 0x3d, 0xf2, 0x11, 0xc2, 0xd6, 0xd5, 0x91,
	0x17, 0xdd, 0xdc, 0x7f, 0xde, 0xf4, 0x7f, 0xe8, 0x19, 0x1c, 0xb5, 0x83, 0x20, 0x2f, 0xbb, 0xf9,
	0xff, 0x12, 0xdc, 0xbf, 0x05, 0xce, 0xe6, 0x1f, 0xce, 0x33, 0xe1, 0xf2, 0x72, 0x49, 0x53, 0x25,
	0xe3, 0xfa, 0x7b, 0xbb, 0x45, 0x1e, 0xa7, 0xca, 0x60, 0xbc, 0x53, 0xb8, 0xf9, 0xc7, 0x32, 0xc5,
	0x2a, 0xc6, 0x43, 0xff, 0xf3, 0xfc, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0x17, 0xf1, 0x5a,
	0xe9, 0x03, 0x00, 0x00,
}
