// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sequencer_api.proto

package sequencer_go_proto // import "github.com/google/keytransparency/core/sequencer/sequencer_go_proto"

/*
Key Transparency Sequencer

The Key Transparency Sequencer API supplies an api for applying mutations to the current
state of the map.
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import keytransparency_go_proto "github.com/google/keytransparency/core/api/v1/keytransparency_go_proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CreateEpochRequest contains information needed to create a new epoch.
type CreateEpochRequest struct {
	// domain_id is the domain to apply the mutations to.
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// messages is the list of mutations that should be applied to the current epoch.
	Messages []*keytransparency_go_proto.EntryUpdate `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
	// revision is the expected revision of the new epoch.
	Revision             int64    `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateEpochRequest) Reset()         { *m = CreateEpochRequest{} }
func (m *CreateEpochRequest) String() string { return proto.CompactTextString(m) }
func (*CreateEpochRequest) ProtoMessage()    {}
func (*CreateEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_sequencer_api_327ff544def86630, []int{0}
}
func (m *CreateEpochRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateEpochRequest.Unmarshal(m, b)
}
func (m *CreateEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateEpochRequest.Marshal(b, m, deterministic)
}
func (dst *CreateEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEpochRequest.Merge(dst, src)
}
func (m *CreateEpochRequest) XXX_Size() int {
	return xxx_messageInfo_CreateEpochRequest.Size(m)
}
func (m *CreateEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEpochRequest proto.InternalMessageInfo

func (m *CreateEpochRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *CreateEpochRequest) GetMessages() []*keytransparency_go_proto.EntryUpdate {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *CreateEpochRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateEpochRequest)(nil), "google.keytransparency.sequencer.CreateEpochRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyTransparencySequencerClient is the client API for KeyTransparencySequencer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyTransparencySequencerClient interface {
	// CreateEpoch applies the contained mutations to the current map root.
	// If this method fails, it must be retried with the same arguments.
	CreateEpoch(ctx context.Context, in *CreateEpochRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyTransparencySequencerClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencySequencerClient(cc *grpc.ClientConn) KeyTransparencySequencerClient {
	return &keyTransparencySequencerClient{cc}
}

func (c *keyTransparencySequencerClient) CreateEpoch(ctx context.Context, in *CreateEpochRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.keytransparency.sequencer.KeyTransparencySequencer/CreateEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyTransparencySequencer service

type KeyTransparencySequencerServer interface {
	// CreateEpoch applies the contained mutations to the current map root.
	// If this method fails, it must be retried with the same arguments.
	CreateEpoch(context.Context, *CreateEpochRequest) (*empty.Empty, error)
}

func RegisterKeyTransparencySequencerServer(s *grpc.Server, srv KeyTransparencySequencerServer) {
	s.RegisterService(&_KeyTransparencySequencer_serviceDesc, srv)
}

func _KeyTransparencySequencer_CreateEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencySequencerServer).CreateEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.keytransparency.sequencer.KeyTransparencySequencer/CreateEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencySequencerServer).CreateEpoch(ctx, req.(*CreateEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencySequencer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.keytransparency.sequencer.KeyTransparencySequencer",
	HandlerType: (*KeyTransparencySequencerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEpoch",
			Handler:    _KeyTransparencySequencer_CreateEpoch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequencer_api.proto",
}

func init() { proto.RegisterFile("sequencer_api.proto", fileDescriptor_sequencer_api_327ff544def86630) }

var fileDescriptor_sequencer_api_327ff544def86630 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xad, 0x05, 0xe9, 0xb2, 0x5b, 0x04, 0x29, 0xdd, 0xa5, 0xec, 0x20, 0x3d, 0x25, 0x6c,
	0xfa, 0x09, 0x36, 0x7a, 0x10, 0x6f, 0x55, 0x2f, 0x82, 0x94, 0xac, 0x7d, 0xcd, 0x82, 0x36, 0x89,
	0x49, 0x5a, 0xc8, 0xc7, 0xf0, 0x1b, 0xcb, 0x5a, 0x5b, 0xc7, 0x44, 0x3c, 0xe5, 0xdf, 0xf3, 0x3c,
	0x79, 0x9f, 0x1f, 0xba, 0xb4, 0xf0, 0xd1, 0x82, 0xac, 0xc0, 0x94, 0x4c, 0x0b, 0xa2, 0x8d, 0x72,
	0x0a, 0xa7, 0x5c, 0x29, 0xfe, 0x0e, 0xe4, 0x0d, 0xbc, 0x33, 0x4c, 0x5a, 0xcd, 0x0c, 0xc8, 0xca,
	0x93, 0x49, 0x9b, 0x2c, 0x06, 0x05, 0xed, 0xf5, 0xbb, 0xf6, 0x95, 0x42, 0xa3, 0x9d, 0x1f, 0xec,
	0x49, 0xdc, 0xad, 0xe8, 0xa9, 0xb5, 0x7f, 0x59, 0x7e, 0x06, 0x08, 0x6f, 0x0d, 0x30, 0x07, 0xb9,
	0x56, 0xd5, 0xbe, 0x38, 0xe4, 0x59, 0x87, 0x17, 0x68, 0x56, 0xab, 0x86, 0x09, 0x59, 0x8a, 0x3a,
	0x0e, 0xd2, 0x20, 0x9b, 0x15, 0xd1, 0x70, 0x71, 0x57, 0xe3, 0x0d, 0x8a, 0x1a, 0xb0, 0x96, 0x71,
	0xb0, 0xf1, 0x79, 0x1a, 0x66, 0xf3, 0xf5, 0x35, 0xf9, 0x63, 0xbe, 0x6e, 0x45, 0x72, 0xe9, 0x8c,
	0x7f, 0xd2, 0x35, 0x73, 0x50, 0x4c, 0x3e, 0x9c, 0xa0, 0xc8, 0x40, 0x27, 0xac, 0x50, 0x32, 0x0e,
	0xd3, 0x20, 0x0b, 0x8b, 0xe9, 0xbc, 0xf6, 0x28, 0xbe, 0x07, 0xff, 0x78, 0x94, 0xf3, 0x30, 0xd6,
	0xc4, 0x2f, 0x68, 0x7e, 0x34, 0x2e, 0xbe, 0x25, 0xff, 0x81, 0x21, 0xbf, 0xdb, 0x25, 0x57, 0xa3,
	0x6b, 0x84, 0x45, 0xf2, 0x03, 0xac, 0xe5, 0xd9, 0x26, 0x7f, 0xde, 0x72, 0xe1, 0xf6, 0xed, 0x8e,
	0x54, 0xaa, 0xa1, 0xdf, 0x48, 0x4f, 0xb2, 0x69, 0xa5, 0x0c, 0xd0, 0xe9, 0x83, 0x9f, 0x5d, 0xc9,
	0x55, 0x39, 0x24, 0x5e, 0xf4, 0xcb, 0xcd, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0xa0, 0x1f,
	0x95, 0xcc, 0x01, 0x00, 0x00,
}
