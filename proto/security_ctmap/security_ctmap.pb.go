// Code generated by protoc-gen-go.
// source: proto/security_ctmap/security_ctmap.proto
// DO NOT EDIT!

/*
Package security_ctmap is a generated protocol buffer package.

It is generated from these files:
	proto/security_ctmap/security_ctmap.proto

It has these top-level messages:
	EpochHead
	SignedEpochHead
	GetLeafRequest
	GetLeafResponse
	GetConsistencyProofRequest
	GetConsistencyProofResponse
	GetSTHRequest
	GetSTHResponse
	UpdateLeafRequest
	UpdateLeafResponse
	GetMutationsRequest
	GetMutationsResponse
*/
package security_ctmap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import security_protobuf "github.com/google/e2e-key-server/proto/security_protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// EpochHead is the head node of the Merkle Tree as well as additional metadata
// for the tree.
type EpochHead struct {
	// Realm is the domain identifier for the transparent map.
	Realm string `protobuf:"bytes,1,opt,name=realm" json:"realm,omitempty"`
	// Epoch number
	Epoch int64 `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	// Root is the value of the root node of the merkle tree.
	Root []byte `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	// IssueTime is the time when this epoch was released. All epochs for the
	// same keyserver MUST have non-decreasing IssueTimes.
	IssueTime *security_protobuf.Timestamp `protobuf:"bytes,4,opt,name=issue_time" json:"issue_time,omitempty"`
}

func (m *EpochHead) Reset()                    { *m = EpochHead{} }
func (m *EpochHead) String() string            { return proto.CompactTextString(m) }
func (*EpochHead) ProtoMessage()               {}
func (*EpochHead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EpochHead) GetIssueTime() *security_protobuf.Timestamp {
	if m != nil {
		return m.IssueTime
	}
	return nil
}

// SignedEpochHead represents a signed state of the Merkel tree.
type SignedEpochHead struct {
	// Serialized EpochHead.
	EpochHead []byte `protobuf:"bytes,1,opt,name=epoch_head,proto3" json:"epoch_head,omitempty"`
	// Signature of head, using the signature type of the key.
	// keyed by the first 64 bits bytes of the hash of the key.
	Signatures map[uint64][]byte `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SignedEpochHead) Reset()                    { *m = SignedEpochHead{} }
func (m *SignedEpochHead) String() string            { return proto.CompactTextString(m) }
func (*SignedEpochHead) ProtoMessage()               {}
func (*SignedEpochHead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignedEpochHead) GetSignatures() map[uint64][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// GetLeafRequest for a verifiable map leaf.
type GetLeafRequest struct {
	Index []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Epoch uint64 `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
}

func (m *GetLeafRequest) Reset()                    { *m = GetLeafRequest{} }
func (m *GetLeafRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLeafRequest) ProtoMessage()               {}
func (*GetLeafRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// GetLeafResponse for a verifiable map leaf.
type GetLeafResponse struct {
	LeafData []byte `protobuf:"bytes,1,opt,name=leaf_data,proto3" json:"leaf_data,omitempty"`
	// neighbors is a list of all the adjacent nodes along the path
	// from the bottommost node to the head.
	Neighbors [][]byte `protobuf:"bytes,2,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (m *GetLeafResponse) Reset()                    { *m = GetLeafResponse{} }
func (m *GetLeafResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLeafResponse) ProtoMessage()               {}
func (*GetLeafResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// GetConsistencyProofRequest for a consistency proof between two epochs.
type GetConsistencyProofRequest struct {
	First  uint64 `protobuf:"varint,1,opt,name=first" json:"first,omitempty"`
	Second uint64 `protobuf:"varint,2,opt,name=second" json:"second,omitempty"`
}

func (m *GetConsistencyProofRequest) Reset()                    { *m = GetConsistencyProofRequest{} }
func (m *GetConsistencyProofRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConsistencyProofRequest) ProtoMessage()               {}
func (*GetConsistencyProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// GetConsistencyProofResponse includes enough information to move trust from
// epoch first to second.
type GetConsistencyProofResponse struct {
	Nodes [][]byte `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *GetConsistencyProofResponse) Reset()                    { *m = GetConsistencyProofResponse{} }
func (m *GetConsistencyProofResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConsistencyProofResponse) ProtoMessage()               {}
func (*GetConsistencyProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// GetSTHRequest for the current STH.
type GetSTHRequest struct {
}

func (m *GetSTHRequest) Reset()                    { *m = GetSTHRequest{} }
func (m *GetSTHRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSTHRequest) ProtoMessage()               {}
func (*GetSTHRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// GetSTHResponse returns the current STH.
type GetSTHResponse struct {
	Sth *SignedEpochHead `protobuf:"bytes,1,opt,name=sth" json:"sth,omitempty"`
}

func (m *GetSTHResponse) Reset()                    { *m = GetSTHResponse{} }
func (m *GetSTHResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSTHResponse) ProtoMessage()               {}
func (*GetSTHResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetSTHResponse) GetSth() *SignedEpochHead {
	if m != nil {
		return m.Sth
	}
	return nil
}

// UpdateLeafRequest submits a change for the value at index.
type UpdateLeafRequest struct {
	Index    []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Mutation []byte `protobuf:"bytes,2,opt,name=mutation,proto3" json:"mutation,omitempty"`
}

func (m *UpdateLeafRequest) Reset()                    { *m = UpdateLeafRequest{} }
func (m *UpdateLeafRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateLeafRequest) ProtoMessage()               {}
func (*UpdateLeafRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// UpdateLeafResponse returns the current value of index.
type UpdateLeafResponse struct {
	Proof *GetLeafResponse `protobuf:"bytes,1,opt,name=proof" json:"proof,omitempty"`
}

func (m *UpdateLeafResponse) Reset()                    { *m = UpdateLeafResponse{} }
func (m *UpdateLeafResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateLeafResponse) ProtoMessage()               {}
func (*UpdateLeafResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateLeafResponse) GetProof() *GetLeafResponse {
	if m != nil {
		return m.Proof
	}
	return nil
}

// GetMutationsRequest requests the numbered mutations within a range.
type GetMutationsRequest struct {
	Start    int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size" json:"page_size,omitempty"`
}

func (m *GetMutationsRequest) Reset()                    { *m = GetMutationsRequest{} }
func (m *GetMutationsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMutationsRequest) ProtoMessage()               {}
func (*GetMutationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// GetMutationsResponse contains a list of mutations and epoch advancements.
type GetMutationsResponse struct {
	// Types that are valid to be assigned to Type:
	//	*GetMutationsResponse_Update
	//	*GetMutationsResponse_AdvanceEpoch
	Type isGetMutationsResponse_Type `protobuf_oneof:"type"`
	Next int64                       `protobuf:"varint,3,opt,name=next" json:"next,omitempty"`
}

func (m *GetMutationsResponse) Reset()                    { *m = GetMutationsResponse{} }
func (m *GetMutationsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMutationsResponse) ProtoMessage()               {}
func (*GetMutationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isGetMutationsResponse_Type interface {
	isGetMutationsResponse_Type()
}

type GetMutationsResponse_Update struct {
	Update *UpdateLeafRequest `protobuf:"bytes,1,opt,name=update,oneof"`
}
type GetMutationsResponse_AdvanceEpoch struct {
	AdvanceEpoch bool `protobuf:"varint,2,opt,name=advance_epoch,oneof"`
}

func (*GetMutationsResponse_Update) isGetMutationsResponse_Type()       {}
func (*GetMutationsResponse_AdvanceEpoch) isGetMutationsResponse_Type() {}

func (m *GetMutationsResponse) GetType() isGetMutationsResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *GetMutationsResponse) GetUpdate() *UpdateLeafRequest {
	if x, ok := m.GetType().(*GetMutationsResponse_Update); ok {
		return x.Update
	}
	return nil
}

func (m *GetMutationsResponse) GetAdvanceEpoch() bool {
	if x, ok := m.GetType().(*GetMutationsResponse_AdvanceEpoch); ok {
		return x.AdvanceEpoch
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetMutationsResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetMutationsResponse_OneofMarshaler, _GetMutationsResponse_OneofUnmarshaler, _GetMutationsResponse_OneofSizer, []interface{}{
		(*GetMutationsResponse_Update)(nil),
		(*GetMutationsResponse_AdvanceEpoch)(nil),
	}
}

func _GetMutationsResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetMutationsResponse)
	// type
	switch x := m.Type.(type) {
	case *GetMutationsResponse_Update:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Update); err != nil {
			return err
		}
	case *GetMutationsResponse_AdvanceEpoch:
		t := uint64(0)
		if x.AdvanceEpoch {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("GetMutationsResponse.Type has unexpected type %T", x)
	}
	return nil
}

func _GetMutationsResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetMutationsResponse)
	switch tag {
	case 1: // type.update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateLeafRequest)
		err := b.DecodeMessage(msg)
		m.Type = &GetMutationsResponse_Update{msg}
		return true, err
	case 2: // type.advance_epoch
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &GetMutationsResponse_AdvanceEpoch{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _GetMutationsResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetMutationsResponse)
	// type
	switch x := m.Type.(type) {
	case *GetMutationsResponse_Update:
		s := proto.Size(x.Update)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetMutationsResponse_AdvanceEpoch:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*EpochHead)(nil), "security_ctmap.EpochHead")
	proto.RegisterType((*SignedEpochHead)(nil), "security_ctmap.SignedEpochHead")
	proto.RegisterType((*GetLeafRequest)(nil), "security_ctmap.GetLeafRequest")
	proto.RegisterType((*GetLeafResponse)(nil), "security_ctmap.GetLeafResponse")
	proto.RegisterType((*GetConsistencyProofRequest)(nil), "security_ctmap.GetConsistencyProofRequest")
	proto.RegisterType((*GetConsistencyProofResponse)(nil), "security_ctmap.GetConsistencyProofResponse")
	proto.RegisterType((*GetSTHRequest)(nil), "security_ctmap.GetSTHRequest")
	proto.RegisterType((*GetSTHResponse)(nil), "security_ctmap.GetSTHResponse")
	proto.RegisterType((*UpdateLeafRequest)(nil), "security_ctmap.UpdateLeafRequest")
	proto.RegisterType((*UpdateLeafResponse)(nil), "security_ctmap.UpdateLeafResponse")
	proto.RegisterType((*GetMutationsRequest)(nil), "security_ctmap.GetMutationsRequest")
	proto.RegisterType((*GetMutationsResponse)(nil), "security_ctmap.GetMutationsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for VerifiableMapService service

type VerifiableMapServiceClient interface {
	// GetLeaf retrieves the value stored at a particular index.
	GetLeaf(ctx context.Context, in *GetLeafRequest, opts ...grpc.CallOption) (*GetLeafResponse, error)
	// GetConsistencyProof returns consistency proof between two epochs.
	GetConsistencyProof(ctx context.Context, in *GetConsistencyProofRequest, opts ...grpc.CallOption) (*GetConsistencyProofResponse, error)
	// GetSTH returns the current signed tree head.
	GetSTH(ctx context.Context, in *GetSTHRequest, opts ...grpc.CallOption) (*GetSTHResponse, error)
	// UpdateLeaf submits a change to the value at index. Clients retry until
	// change is visble in GetLeafResponse.
	UpdateLeaf(ctx context.Context, in *UpdateLeafRequest, opts ...grpc.CallOption) (*GetLeafResponse, error)
	//  Mutation list returns the list of mutations and epoch advancements.
	GetMutations(ctx context.Context, in *GetMutationsRequest, opts ...grpc.CallOption) (*GetMutationsResponse, error)
}

type verifiableMapServiceClient struct {
	cc *grpc.ClientConn
}

func NewVerifiableMapServiceClient(cc *grpc.ClientConn) VerifiableMapServiceClient {
	return &verifiableMapServiceClient{cc}
}

func (c *verifiableMapServiceClient) GetLeaf(ctx context.Context, in *GetLeafRequest, opts ...grpc.CallOption) (*GetLeafResponse, error) {
	out := new(GetLeafResponse)
	err := grpc.Invoke(ctx, "/security_ctmap.VerifiableMapService/GetLeaf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableMapServiceClient) GetConsistencyProof(ctx context.Context, in *GetConsistencyProofRequest, opts ...grpc.CallOption) (*GetConsistencyProofResponse, error) {
	out := new(GetConsistencyProofResponse)
	err := grpc.Invoke(ctx, "/security_ctmap.VerifiableMapService/GetConsistencyProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableMapServiceClient) GetSTH(ctx context.Context, in *GetSTHRequest, opts ...grpc.CallOption) (*GetSTHResponse, error) {
	out := new(GetSTHResponse)
	err := grpc.Invoke(ctx, "/security_ctmap.VerifiableMapService/GetSTH", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableMapServiceClient) UpdateLeaf(ctx context.Context, in *UpdateLeafRequest, opts ...grpc.CallOption) (*GetLeafResponse, error) {
	out := new(GetLeafResponse)
	err := grpc.Invoke(ctx, "/security_ctmap.VerifiableMapService/UpdateLeaf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableMapServiceClient) GetMutations(ctx context.Context, in *GetMutationsRequest, opts ...grpc.CallOption) (*GetMutationsResponse, error) {
	out := new(GetMutationsResponse)
	err := grpc.Invoke(ctx, "/security_ctmap.VerifiableMapService/GetMutations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VerifiableMapService service

type VerifiableMapServiceServer interface {
	// GetLeaf retrieves the value stored at a particular index.
	GetLeaf(context.Context, *GetLeafRequest) (*GetLeafResponse, error)
	// GetConsistencyProof returns consistency proof between two epochs.
	GetConsistencyProof(context.Context, *GetConsistencyProofRequest) (*GetConsistencyProofResponse, error)
	// GetSTH returns the current signed tree head.
	GetSTH(context.Context, *GetSTHRequest) (*GetSTHResponse, error)
	// UpdateLeaf submits a change to the value at index. Clients retry until
	// change is visble in GetLeafResponse.
	UpdateLeaf(context.Context, *UpdateLeafRequest) (*GetLeafResponse, error)
	//  Mutation list returns the list of mutations and epoch advancements.
	GetMutations(context.Context, *GetMutationsRequest) (*GetMutationsResponse, error)
}

func RegisterVerifiableMapServiceServer(s *grpc.Server, srv VerifiableMapServiceServer) {
	s.RegisterService(&_VerifiableMapService_serviceDesc, srv)
}

func _VerifiableMapService_GetLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableMapServiceServer).GetLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security_ctmap.VerifiableMapService/GetLeaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableMapServiceServer).GetLeaf(ctx, req.(*GetLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableMapService_GetConsistencyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsistencyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableMapServiceServer).GetConsistencyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security_ctmap.VerifiableMapService/GetConsistencyProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableMapServiceServer).GetConsistencyProof(ctx, req.(*GetConsistencyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableMapService_GetSTH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSTHRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableMapServiceServer).GetSTH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security_ctmap.VerifiableMapService/GetSTH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableMapServiceServer).GetSTH(ctx, req.(*GetSTHRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableMapService_UpdateLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableMapServiceServer).UpdateLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security_ctmap.VerifiableMapService/UpdateLeaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableMapServiceServer).UpdateLeaf(ctx, req.(*UpdateLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableMapService_GetMutations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMutationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableMapServiceServer).GetMutations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security_ctmap.VerifiableMapService/GetMutations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableMapServiceServer).GetMutations(ctx, req.(*GetMutationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VerifiableMapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "security_ctmap.VerifiableMapService",
	HandlerType: (*VerifiableMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeaf",
			Handler:    _VerifiableMapService_GetLeaf_Handler,
		},
		{
			MethodName: "GetConsistencyProof",
			Handler:    _VerifiableMapService_GetConsistencyProof_Handler,
		},
		{
			MethodName: "GetSTH",
			Handler:    _VerifiableMapService_GetSTH_Handler,
		},
		{
			MethodName: "UpdateLeaf",
			Handler:    _VerifiableMapService_UpdateLeaf_Handler,
		},
		{
			MethodName: "GetMutations",
			Handler:    _VerifiableMapService_GetMutations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x6e, 0xd3, 0x4a,
	0x10, 0xc6, 0x4f, 0xea, 0x34, 0xa7, 0x9d, 0xa6, 0x2d, 0x5d, 0x2a, 0x11, 0x19, 0x28, 0x60, 0xb8,
	0xe0, 0x4f, 0xeb, 0x40, 0x8a, 0x04, 0x02, 0x89, 0x0b, 0x4a, 0xd5, 0x08, 0x51, 0xa9, 0xa2, 0x05,
	0x89, 0xab, 0x68, 0x63, 0x4f, 0x92, 0x15, 0xb1, 0xd7, 0x78, 0xd7, 0x55, 0xd3, 0x77, 0xe1, 0x7d,
	0x78, 0x2c, 0xc6, 0xeb, 0x2d, 0x49, 0x4c, 0xd2, 0x70, 0x39, 0xe3, 0xf9, 0xe6, 0x37, 0xf3, 0x65,
	0x36, 0xf0, 0x24, 0x49, 0xa5, 0x96, 0x4d, 0x85, 0x41, 0x96, 0x0a, 0x3d, 0xea, 0x04, 0x3a, 0xe2,
	0x49, 0x29, 0xf4, 0x4d, 0x0d, 0xdb, 0x98, 0xce, 0xba, 0xed, 0xbe, 0xd0, 0x83, 0xac, 0xeb, 0x07,
	0x32, 0x6a, 0xf6, 0xa5, 0xec, 0x0f, 0xb1, 0x89, 0x2d, 0xdc, 0xfb, 0x8e, 0xa3, 0x3d, 0x85, 0xe9,
	0x39, 0xa6, 0xcd, 0x52, 0x6f, 0x13, 0x76, 0xb3, 0x5e, 0x53, 0x8b, 0x08, 0x95, 0xe6, 0x91, 0xed,
	0xec, 0x09, 0x58, 0x3d, 0x4c, 0x64, 0x30, 0x68, 0x23, 0x0f, 0xd9, 0x3a, 0x2c, 0xa7, 0xc8, 0x87,
	0x51, 0xa3, 0x72, 0xbf, 0xf2, 0x78, 0x35, 0x0f, 0x31, 0xff, 0xd6, 0x58, 0xa2, 0xd0, 0x61, 0x75,
	0xa8, 0xa6, 0x52, 0xea, 0x86, 0x43, 0x51, 0x9d, 0x3d, 0x07, 0x10, 0x4a, 0x65, 0xd8, 0xc9, 0x3b,
	0x36, 0xaa, 0x94, 0x5b, 0x6b, 0xdd, 0xf1, 0xaf, 0x80, 0xfe, 0x15, 0xd0, 0x3f, 0xbb, 0x02, 0x7a,
	0x3f, 0x2b, 0xb0, 0x79, 0x2a, 0xfa, 0x31, 0x86, 0x63, 0x22, 0x03, 0x30, 0x88, 0xce, 0x80, 0x22,
	0x83, 0xad, 0xb3, 0x03, 0x00, 0x45, 0x65, 0x5c, 0x67, 0x29, 0x2a, 0x62, 0x3b, 0xd4, 0xb9, 0xe9,
	0x97, 0x7c, 0x29, 0x35, 0x32, 0x71, 0xa1, 0x38, 0x8c, 0x75, 0x3a, 0x72, 0x5f, 0x14, 0xac, 0x89,
	0x14, 0x5b, 0x03, 0x87, 0x0c, 0x32, 0x90, 0x5a, 0xbe, 0xdb, 0x39, 0x1f, 0x66, 0x68, 0x76, 0xab,
	0xbf, 0x59, 0x7a, 0x5d, 0xf1, 0x7c, 0xd8, 0x38, 0x42, 0xfd, 0x09, 0x79, 0xef, 0x33, 0xfe, 0xc8,
	0x68, 0xe8, 0xbc, 0x48, 0xc4, 0x21, 0x5e, 0xd8, 0xc1, 0xa6, 0xfc, 0xa8, 0x7a, 0xaf, 0x60, 0xf3,
	0x4f, 0xbd, 0x4a, 0x64, 0xac, 0x90, 0x6d, 0xc1, 0xea, 0x90, 0xe2, 0x4e, 0xc8, 0x35, 0xb7, 0x22,
	0x4a, 0xc5, 0x28, 0xfa, 0x83, 0xae, 0x4c, 0x8b, 0x65, 0xea, 0xde, 0x5b, 0x70, 0x49, 0x78, 0x40,
	0x0a, 0xa1, 0x34, 0xc6, 0xc1, 0xe8, 0x84, 0x7c, 0x9d, 0x84, 0xf6, 0x44, 0xaa, 0xb4, 0xd1, 0x57,
	0xd9, 0x06, 0xd4, 0x68, 0x75, 0x19, 0x87, 0x96, 0xba, 0x0b, 0xb7, 0x67, 0x8a, 0xed, 0x04, 0xa4,
	0x8e, 0x65, 0x48, 0xbe, 0x55, 0x0c, 0x6a, 0x13, 0xd6, 0xa9, 0xfa, 0xf4, 0xac, 0x6d, 0xbb, 0x7b,
	0xef, 0xcc, 0x92, 0x26, 0x61, 0x15, 0xbb, 0xe0, 0x28, 0x3d, 0x30, 0xb4, 0xb5, 0xd6, 0xbd, 0x05,
	0x3e, 0x7b, 0x2f, 0x61, 0xeb, 0x4b, 0x42, 0xeb, 0xe1, 0x35, 0x3e, 0xdd, 0x80, 0x95, 0x28, 0xd3,
	0x5c, 0x0b, 0x19, 0x17, 0xf6, 0x7a, 0x1f, 0x80, 0x4d, 0xaa, 0x2c, 0xd9, 0x87, 0xe5, 0x24, 0x1f,
	0x7e, 0x1e, 0xbb, 0xe4, 0x2e, 0x19, 0x7e, 0x93, 0x52, 0xc7, 0xb6, 0xb5, 0x9a, 0xa0, 0xd3, 0x81,
	0xa5, 0x85, 0x61, 0x4e, 0x6e, 0x78, 0xc2, 0xfb, 0xd8, 0x51, 0xe2, 0xb2, 0xf8, 0x75, 0x1d, 0xef,
	0x12, 0xb6, 0xa7, 0x85, 0x76, 0x80, 0x7d, 0xa8, 0x65, 0x66, 0x2c, 0x3b, 0xc1, 0x83, 0xf2, 0x04,
	0x7f, 0xad, 0xda, 0xfe, 0x8f, 0xdd, 0x82, 0x75, 0x1e, 0x9e, 0xf3, 0x38, 0xc0, 0xce, 0xf8, 0x1a,
	0x56, 0xe8, 0x03, 0xbd, 0x8f, 0x18, 0x2f, 0x8a, 0xf7, 0xe1, 0xbc, 0xaf, 0x41, 0x55, 0x8f, 0x12,
	0x6c, 0xfd, 0x72, 0x60, 0xfb, 0x2b, 0xa6, 0xa2, 0x27, 0x78, 0x77, 0x88, 0xc7, 0x3c, 0x39, 0xa5,
	0x07, 0x2a, 0x02, 0x64, 0x1f, 0xe1, 0x7f, 0xbb, 0x20, 0xdb, 0x99, 0xbb, 0xb9, 0x81, 0xba, 0x8b,
	0x9c, 0x61, 0xb1, 0x71, 0xa6, 0x7c, 0x14, 0xec, 0xe9, 0x0c, 0xdd, 0x9c, 0xb3, 0x73, 0x9f, 0xfd,
	0x53, 0xad, 0xe5, 0x1d, 0x41, 0xad, 0xb8, 0x22, 0x76, 0x77, 0x86, 0x6c, 0x7c, 0x6e, 0xee, 0xce,
	0xbc, 0xcf, 0xb6, 0xd1, 0x09, 0xc0, 0xd8, 0x63, 0xb6, 0xd8, 0xff, 0xc5, 0x56, 0x7c, 0x83, 0xfa,
	0xe4, 0x6f, 0xcd, 0x1e, 0xce, 0x10, 0x94, 0x4f, 0xc8, 0x7d, 0x74, 0x7d, 0x51, 0xd1, 0xba, 0x5b,
	0x33, 0x7f, 0x6a, 0xfb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x64, 0x38, 0x2a, 0xb9, 0x05,
	0x00, 0x00,
}
