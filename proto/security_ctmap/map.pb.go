// Code generated by protoc-gen-go.
// source: proto/security_ctmap/map.proto
// DO NOT EDIT!

/*
Package security_ctmap is a generated protocol buffer package.

It is generated from these files:
	proto/security_ctmap/map.proto

It has these top-level messages:
	EpochHead
	Step
	Entry
	PublicKey
	SignedEpochHead
	SignedEntryUpdate
*/
package security_ctmap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import security_protobuf "github.com/gdbelvin/e2e-key-server/proto/security_protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// EpochHead is the head node of the Merkle Tree as well as additional metadata
// for the tree.
type EpochHead struct {
	// Realm is the domain...
	Realm string `protobuf:"bytes,1,opt,name=realm" json:"realm,omitempty"`
	// Epoch number
	Epoch int64 `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	// Root is the value of the root node of the merkle tree.
	Root []byte `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	// IssueTime is the time when this epoch was released. All epochs for the
	// same keyserver MUST have non-decreasing IssueTimes.
	IssueTime *security_protobuf.Timestamp `protobuf:"bytes,4,opt,name=issue_time,json=issueTime" json:"issue_time,omitempty"`
	// Hash of previous SEH. SHA512_256.
	PreviousHash []byte `protobuf:"bytes,5,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
}

func (m *EpochHead) Reset()                    { *m = EpochHead{} }
func (m *EpochHead) String() string            { return proto.CompactTextString(m) }
func (*EpochHead) ProtoMessage()               {}
func (*EpochHead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EpochHead) GetIssueTime() *security_protobuf.Timestamp {
	if m != nil {
		return m.IssueTime
	}
	return nil
}

// Step is a combined, ordered list of SignedEntryUpdates and SignedEpochHeads
// which are made available to verifiers.
type Step struct {
	// Types that are valid to be assigned to Type:
	//	*Step_EntryChanged
	//	*Step_SignedEpochHead
	Type isStep_Type `protobuf_oneof:"type"`
	// epoch of this udpate.
	Epoch int64 `protobuf:"varint,3,opt,name=epoch" json:"epoch,omitempty"`
	// commitment_timestamp is the ordered commitment_timestamp of this step.
	CommitmentTimestamp int64 `protobuf:"varint,4,opt,name=commitment_timestamp,json=commitmentTimestamp" json:"commitment_timestamp,omitempty"`
}

func (m *Step) Reset()                    { *m = Step{} }
func (m *Step) String() string            { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()               {}
func (*Step) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isStep_Type interface {
	isStep_Type()
}

type Step_EntryChanged struct {
	EntryChanged []byte `protobuf:"bytes,1,opt,name=entry_changed,json=entryChanged,proto3,oneof"`
}
type Step_SignedEpochHead struct {
	SignedEpochHead *SignedEpochHead `protobuf:"bytes,2,opt,name=signed_epoch_head,json=signedEpochHead,oneof"`
}

func (*Step_EntryChanged) isStep_Type()    {}
func (*Step_SignedEpochHead) isStep_Type() {}

func (m *Step) GetType() isStep_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Step) GetEntryChanged() []byte {
	if x, ok := m.GetType().(*Step_EntryChanged); ok {
		return x.EntryChanged
	}
	return nil
}

func (m *Step) GetSignedEpochHead() *SignedEpochHead {
	if x, ok := m.GetType().(*Step_SignedEpochHead); ok {
		return x.SignedEpochHead
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Step) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Step_OneofMarshaler, _Step_OneofUnmarshaler, _Step_OneofSizer, []interface{}{
		(*Step_EntryChanged)(nil),
		(*Step_SignedEpochHead)(nil),
	}
}

func _Step_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Step)
	// type
	switch x := m.Type.(type) {
	case *Step_EntryChanged:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.EntryChanged)
	case *Step_SignedEpochHead:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SignedEpochHead); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Step.Type has unexpected type %T", x)
	}
	return nil
}

func _Step_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Step)
	switch tag {
	case 1: // type.entry_changed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Type = &Step_EntryChanged{x}
		return true, err
	case 2: // type.signed_epoch_head
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignedEpochHead)
		err := b.DecodeMessage(msg)
		m.Type = &Step_SignedEpochHead{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Step_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Step)
	// type
	switch x := m.Type.(type) {
	case *Step_EntryChanged:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EntryChanged)))
		n += len(x.EntryChanged)
	case *Step_SignedEpochHead:
		s := proto.Size(x.SignedEpochHead)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Entry is the leaf node object for the Merkle Tree. Its unique index in the
// tree is identified by a hash of an verifiable unpredictable function on the
// user_id.
type Entry struct {
	// Index is the location in the merkle tree for this entry.
	// If signing keys are not unique per user, we need to tie updates to a
	// particular profile.
	Index []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// UpdateCount prevents replaying old signed EntryUpdates.
	// not nessesarilly incremented by only one each update.
	UpdateCount uint64 `protobuf:"varint,2,opt,name=update_count,json=updateCount" json:"update_count,omitempty"`
	// EntryKey allows verifiers to validate updates to Entry.
	EntryKey []*PublicKey `protobuf:"bytes,3,rep,name=entry_key,json=entryKey" json:"entry_key,omitempty"`
	// profile_commitment is a cryptographic commitment to the Profile of the form
	// HMAC(profile_commitment_key, serialized_profile)
	ProfileCommitment []byte `protobuf:"bytes,4,opt,name=profile_commitment,json=profileCommitment,proto3" json:"profile_commitment,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Entry) GetEntryKey() []*PublicKey {
	if m != nil {
		return m.EntryKey
	}
	return nil
}

// PublicKey defines a key this domain uses to sign EpochHeads with.
type PublicKey struct {
	// KeyFormats from Keyczar.
	//
	// Types that are valid to be assigned to KeyType:
	//	*PublicKey_Ed25519
	//	*PublicKey_RsaVerifyingSha256_2048
	//	*PublicKey_EcdsaVerifyingP256
	KeyType isPublicKey_KeyType `protobuf_oneof:"key_type"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isPublicKey_KeyType interface {
	isPublicKey_KeyType()
}

type PublicKey_Ed25519 struct {
	Ed25519 []byte `protobuf:"bytes,1,opt,name=ed25519,proto3,oneof"`
}
type PublicKey_RsaVerifyingSha256_2048 struct {
	RsaVerifyingSha256_2048 []byte `protobuf:"bytes,2,opt,name=rsa_verifying_sha256_2048,json=rsaVerifyingSha2562048,proto3,oneof"`
}
type PublicKey_EcdsaVerifyingP256 struct {
	EcdsaVerifyingP256 []byte `protobuf:"bytes,3,opt,name=ecdsa_verifying_p256,json=ecdsaVerifyingP256,proto3,oneof"`
}

func (*PublicKey_Ed25519) isPublicKey_KeyType()                 {}
func (*PublicKey_RsaVerifyingSha256_2048) isPublicKey_KeyType() {}
func (*PublicKey_EcdsaVerifyingP256) isPublicKey_KeyType()      {}

func (m *PublicKey) GetKeyType() isPublicKey_KeyType {
	if m != nil {
		return m.KeyType
	}
	return nil
}

func (m *PublicKey) GetEd25519() []byte {
	if x, ok := m.GetKeyType().(*PublicKey_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

func (m *PublicKey) GetRsaVerifyingSha256_2048() []byte {
	if x, ok := m.GetKeyType().(*PublicKey_RsaVerifyingSha256_2048); ok {
		return x.RsaVerifyingSha256_2048
	}
	return nil
}

func (m *PublicKey) GetEcdsaVerifyingP256() []byte {
	if x, ok := m.GetKeyType().(*PublicKey_EcdsaVerifyingP256); ok {
		return x.EcdsaVerifyingP256
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PublicKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PublicKey_OneofMarshaler, _PublicKey_OneofUnmarshaler, _PublicKey_OneofSizer, []interface{}{
		(*PublicKey_Ed25519)(nil),
		(*PublicKey_RsaVerifyingSha256_2048)(nil),
		(*PublicKey_EcdsaVerifyingP256)(nil),
	}
}

func _PublicKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PublicKey)
	// key_type
	switch x := m.KeyType.(type) {
	case *PublicKey_Ed25519:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Ed25519)
	case *PublicKey_RsaVerifyingSha256_2048:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.RsaVerifyingSha256_2048)
	case *PublicKey_EcdsaVerifyingP256:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.EcdsaVerifyingP256)
	case nil:
	default:
		return fmt.Errorf("PublicKey.KeyType has unexpected type %T", x)
	}
	return nil
}

func _PublicKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PublicKey)
	switch tag {
	case 1: // key_type.ed25519
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.KeyType = &PublicKey_Ed25519{x}
		return true, err
	case 2: // key_type.rsa_verifying_sha256_2048
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.KeyType = &PublicKey_RsaVerifyingSha256_2048{x}
		return true, err
	case 3: // key_type.ecdsa_verifying_p256
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.KeyType = &PublicKey_EcdsaVerifyingP256{x}
		return true, err
	default:
		return false, nil
	}
}

func _PublicKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PublicKey)
	// key_type
	switch x := m.KeyType.(type) {
	case *PublicKey_Ed25519:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Ed25519)))
		n += len(x.Ed25519)
	case *PublicKey_RsaVerifyingSha256_2048:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RsaVerifyingSha256_2048)))
		n += len(x.RsaVerifyingSha256_2048)
	case *PublicKey_EcdsaVerifyingP256:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EcdsaVerifyingP256)))
		n += len(x.EcdsaVerifyingP256)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SignedEpochHead represents a signed state of the Merkel tree.
type SignedEpochHead struct {
	// Serialized EpochHead.
	EpochHead []byte `protobuf:"bytes,1,opt,name=epoch_head,json=epochHead,proto3" json:"epoch_head,omitempty"`
	// Signature of head, using the signature type of the key.
	// keyed by the first 64 bits bytes of the hash of the key.
	Signatures map[uint64][]byte `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SignedEpochHead) Reset()                    { *m = SignedEpochHead{} }
func (m *SignedEpochHead) String() string            { return proto.CompactTextString(m) }
func (*SignedEpochHead) ProtoMessage()               {}
func (*SignedEpochHead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SignedEpochHead) GetSignatures() map[uint64][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// SignedEntryUpdate is what users provide to update their profiles.
// A serialized SignedEntryUpdate is used as the leaf value in the MerkleTree.
type SignedEntryUpdate struct {
	// NewEntry is the serialized protobuf Entry.
	NewEntry []byte `protobuf:"bytes,1,opt,name=new_entry,json=newEntry,proto3" json:"new_entry,omitempty"`
	// Signature of entry, by the entry_key inside entry AND the old key from the
	// previous epoch. The first proves ownership of new epoch key, and the
	// second proves the the correct owner is making this change.
	Signatures map[uint64][]byte `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SignedEntryUpdate) Reset()                    { *m = SignedEntryUpdate{} }
func (m *SignedEntryUpdate) String() string            { return proto.CompactTextString(m) }
func (*SignedEntryUpdate) ProtoMessage()               {}
func (*SignedEntryUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SignedEntryUpdate) GetSignatures() map[uint64][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func init() {
	proto.RegisterType((*EpochHead)(nil), "security_ctmap.EpochHead")
	proto.RegisterType((*Step)(nil), "security_ctmap.Step")
	proto.RegisterType((*Entry)(nil), "security_ctmap.Entry")
	proto.RegisterType((*PublicKey)(nil), "security_ctmap.PublicKey")
	proto.RegisterType((*SignedEpochHead)(nil), "security_ctmap.SignedEpochHead")
	proto.RegisterType((*SignedEntryUpdate)(nil), "security_ctmap.SignedEntryUpdate")
}

var fileDescriptor0 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x4d, 0x5a, 0x9a, 0x69, 0x4a, 0xe9, 0x52, 0xa1, 0xb4, 0x7c, 0x07, 0x21, 0x71, 0xa9,
	0x4d, 0x0d, 0xad, 0x0a, 0x88, 0x4b, 0xab, 0x4a, 0x91, 0x10, 0xa2, 0x6c, 0x81, 0xab, 0xe5, 0xd8,
	0xd3, 0x78, 0x45, 0xfc, 0x21, 0xef, 0xba, 0x90, 0xff, 0x83, 0xc4, 0x89, 0xff, 0x80, 0xb8, 0xf3,
	0x9f, 0x98, 0xdd, 0x8d, 0xdd, 0x24, 0x02, 0x71, 0xe2, 0x10, 0xc9, 0xf3, 0xde, 0xec, 0xec, 0x7b,
	0x6f, 0x36, 0x70, 0xb7, 0x28, 0x73, 0x95, 0x7b, 0x12, 0xa3, 0xaa, 0x14, 0x6a, 0x12, 0x44, 0x2a,
	0x0d, 0x0b, 0x8f, 0x7e, 0xae, 0x21, 0xd8, 0xb5, 0x79, 0x66, 0x67, 0x30, 0x12, 0x2a, 0xa9, 0x86,
	0x6e, 0x94, 0xa7, 0xde, 0x28, 0xcf, 0x47, 0x63, 0xf4, 0xd0, 0xc7, 0xdd, 0x4f, 0x38, 0xd9, 0x95,
	0x58, 0x5e, 0x60, 0xe9, 0x2d, 0x0c, 0x34, 0xe5, 0xb0, 0x3a, 0xf7, 0x94, 0x48, 0x51, 0xaa, 0x30,
	0x9d, 0x4e, 0xee, 0x7f, 0x77, 0xa0, 0x73, 0x52, 0xe4, 0x51, 0x32, 0xc0, 0x30, 0x66, 0x5b, 0xb0,
	0x5c, 0x62, 0x38, 0x4e, 0x7b, 0xce, 0x7d, 0xe7, 0x71, 0x87, 0xdb, 0x42, 0xa3, 0xa8, 0x5b, 0x7a,
	0x4b, 0x84, 0xb6, 0xb8, 0x2d, 0x18, 0x83, 0x76, 0x99, 0xe7, 0xaa, 0xd7, 0x22, 0xb0, 0xcb, 0xcd,
	0x37, 0x7b, 0x09, 0x20, 0xa4, 0xac, 0x30, 0xd0, 0xd7, 0xf4, 0xda, 0xc4, 0xac, 0xf9, 0xb7, 0xdd,
	0x5a, 0x85, 0x5b, 0xab, 0x70, 0xdf, 0xd7, 0x2a, 0x78, 0xc7, 0xf4, 0xeb, 0x9a, 0x3d, 0x84, 0xf5,
	0xa2, 0xc4, 0x0b, 0x91, 0x57, 0x32, 0x48, 0x42, 0x99, 0xf4, 0x96, 0xcd, 0xe4, 0x6e, 0x0d, 0x0e,
	0x08, 0xeb, 0xff, 0x72, 0xa0, 0x7d, 0xa6, 0xb0, 0x60, 0x8f, 0x60, 0x1d, 0x33, 0x55, 0x52, 0x22,
	0x49, 0x98, 0x8d, 0x30, 0x36, 0x92, 0xbb, 0x83, 0x2b, 0xbc, 0x6b, 0xe0, 0x63, 0x8b, 0xb2, 0x37,
	0xb0, 0x29, 0xc5, 0x28, 0xc3, 0x38, 0x30, 0xaa, 0x83, 0x84, 0x6c, 0x1a, 0x1f, 0x6b, 0xfe, 0x3d,
	0x77, 0x3e, 0x55, 0xf7, 0xcc, 0x34, 0x36, 0x69, 0xd0, 0xac, 0x0d, 0x39, 0x0f, 0x5d, 0x46, 0xd1,
	0x9a, 0x8d, 0x62, 0x0f, 0xb6, 0x68, 0x13, 0xa9, 0x50, 0x29, 0xdd, 0x1d, 0x34, 0x11, 0x9b, 0x00,
	0x5a, 0xfc, 0xc6, 0x25, 0xd7, 0xf8, 0x3e, 0x5a, 0x81, 0xb6, 0x9a, 0x14, 0xd8, 0xff, 0xe6, 0xc0,
	0xf2, 0x89, 0x16, 0xac, 0x47, 0x8b, 0x2c, 0xc6, 0x2f, 0xd6, 0x08, 0xb7, 0x05, 0x7b, 0x00, 0xdd,
	0xaa, 0x88, 0x43, 0x85, 0x41, 0x94, 0x57, 0x99, 0x32, 0xd2, 0xdb, 0x7c, 0xcd, 0x62, 0xc7, 0x1a,
	0x62, 0x07, 0xd0, 0xb1, 0x49, 0xd0, 0xfa, 0x49, 0x57, 0x8b, 0xac, 0x6d, 0x2f, 0x5a, 0x3b, 0xad,
	0x86, 0x63, 0x11, 0xbd, 0xc6, 0x09, 0x5f, 0x35, 0xbd, 0xf4, 0xc5, 0x76, 0x81, 0xd1, 0x42, 0xce,
	0xc5, 0x58, 0xcf, 0xae, 0x15, 0x1a, 0xcd, 0x5d, 0xbe, 0x39, 0x65, 0x8e, 0x1b, 0xa2, 0xff, 0x95,
	0x5e, 0x4a, 0x33, 0x86, 0xed, 0xc0, 0x55, 0x8c, 0xfd, 0xfd, 0xfd, 0xbd, 0xe7, 0x4d, 0xf0, 0x35,
	0x40, 0xaf, 0x60, 0xbb, 0x94, 0x61, 0x40, 0xcf, 0x50, 0x9c, 0x4f, 0x44, 0x36, 0x0a, 0x64, 0x12,
	0xfa, 0xfb, 0x07, 0x81, 0xff, 0xe4, 0xd9, 0xa1, 0x31, 0xa0, 0xbb, 0x6f, 0x52, 0xcb, 0xc7, 0xba,
	0xe3, 0xcc, 0x34, 0x68, 0x9e, 0xf9, 0xb0, 0x85, 0x51, 0x3c, 0x77, 0xbc, 0x20, 0xce, 0x3e, 0x33,
	0x3a, 0xc7, 0x0c, 0xdb, 0x9c, 0x3c, 0x25, 0xee, 0x08, 0x60, 0x95, 0xbc, 0x07, 0x26, 0xd0, 0x1f,
	0x0e, 0x6c, 0x2c, 0x2c, 0x92, 0xdd, 0x01, 0x98, 0xd9, 0xbe, 0xcd, 0xb7, 0x83, 0x0d, 0xfd, 0x16,
	0x40, 0xef, 0x39, 0x54, 0x55, 0x89, 0x92, 0x04, 0xea, 0x04, 0xbd, 0x7f, 0x3c, 0x0e, 0x53, 0xdb,
	0x13, 0x66, 0x7d, 0x7c, 0x66, 0xc4, 0xce, 0x2b, 0x2b, 0x61, 0x86, 0x66, 0xd7, 0xa1, 0xa5, 0xd7,
	0xa3, 0xef, 0x5e, 0xe1, 0xfa, 0x53, 0xef, 0xfb, 0x22, 0x1c, 0x57, 0x68, 0x13, 0xe1, 0xb6, 0x78,
	0xb1, 0x74, 0xe8, 0xf4, 0x7f, 0x3a, 0xb0, 0x39, 0xbd, 0x4e, 0x9f, 0xfd, 0x60, 0x76, 0xcd, 0x6e,
	0x41, 0x27, 0xc3, 0xcf, 0x81, 0x59, 0xdf, 0xd4, 0xc3, 0x2a, 0x01, 0x76, 0xfc, 0xbb, 0x3f, 0x58,
	0xd8, 0xfb, 0x8b, 0x85, 0xcb, 0x99, 0xff, 0xd1, 0xc4, 0x70, 0xc5, 0xfc, 0xd9, 0x9f, 0xfe, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0xcf, 0xc8, 0xc3, 0x2e, 0xdb, 0x04, 0x00, 0x00,
}
