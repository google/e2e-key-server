// Code generated by protoc-gen-go.
// source: proto/security_e2ekeys_v1/e2ekeys.proto
// DO NOT EDIT!

/*
Package security_e2ekeys_v1 is a generated protocol buffer package.

It is generated from these files:
	proto/security_e2ekeys_v1/e2ekeys.proto

It has these top-level messages:
	HkpLookupRequest
	HttpResponse
*/
package security_e2ekeys_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import security_e2ekeys "github.com/google/e2e-key-server/proto/security_e2ekeys"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// HkpLookupRequest contains query parameters for retrieving PGP keys.
type HkpLookupRequest struct {
	// Op specifies the operation to be performed on the keyserver.
	// - "get" returns the pgp key specified in the search parameter.
	// - "index" returns 501 (not implemented).
	// - "vindex" returns 501 (not implemented).
	Op string `protobuf:"bytes,1,opt,name=op" json:"op,omitempty"`
	// Search specifies the email address or key id being queried.
	Search string `protobuf:"bytes,2,opt,name=search" json:"search,omitempty"`
	// Options specifies what output format to use.
	// - "mr" machine readable will set the content type to "application/pgp-keys"
	// - other options will be ignored.
	Options string `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
	// Exact specifies an exact match on search. Always on. If specified in the
	// URL, its value will be ignored.
	Exact string `protobuf:"bytes,4,opt,name=exact" json:"exact,omitempty"`
	// fingerprint is ignored.
	Fingerprint string `protobuf:"bytes,5,opt,name=fingerprint" json:"fingerprint,omitempty"`
}

func (m *HkpLookupRequest) Reset()                    { *m = HkpLookupRequest{} }
func (m *HkpLookupRequest) String() string            { return proto.CompactTextString(m) }
func (*HkpLookupRequest) ProtoMessage()               {}
func (*HkpLookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// HttpBody represents an http body.
type HttpResponse struct {
	// Header content type.
	ContentType string `protobuf:"bytes,1,opt,name=content_type" json:"content_type,omitempty"`
	// The http body itself.
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *HttpResponse) Reset()                    { *m = HttpResponse{} }
func (m *HttpResponse) String() string            { return proto.CompactTextString(m) }
func (*HttpResponse) ProtoMessage()               {}
func (*HttpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*HkpLookupRequest)(nil), "security.e2ekeys.v1.HkpLookupRequest")
	proto.RegisterType((*HttpResponse)(nil), "security.e2ekeys.v1.HttpResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for E2EKeyProxy service

type E2EKeyProxyClient interface {
	// GetEntry returns a user's current profile.
	GetEntry(ctx context.Context, in *security_e2ekeys.GetEntryRequest, opts ...grpc.CallOption) (*security_e2ekeys.Profile, error)
	HkpLookup(ctx context.Context, in *HkpLookupRequest, opts ...grpc.CallOption) (*HttpResponse, error)
}

type e2EKeyProxyClient struct {
	cc *grpc.ClientConn
}

func NewE2EKeyProxyClient(cc *grpc.ClientConn) E2EKeyProxyClient {
	return &e2EKeyProxyClient{cc}
}

func (c *e2EKeyProxyClient) GetEntry(ctx context.Context, in *security_e2ekeys.GetEntryRequest, opts ...grpc.CallOption) (*security_e2ekeys.Profile, error) {
	out := new(security_e2ekeys.Profile)
	err := grpc.Invoke(ctx, "/security.e2ekeys.v1.E2EKeyProxy/GetEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2EKeyProxyClient) HkpLookup(ctx context.Context, in *HkpLookupRequest, opts ...grpc.CallOption) (*HttpResponse, error) {
	out := new(HttpResponse)
	err := grpc.Invoke(ctx, "/security.e2ekeys.v1.E2EKeyProxy/HkpLookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for E2EKeyProxy service

type E2EKeyProxyServer interface {
	// GetEntry returns a user's current profile.
	GetEntry(context.Context, *security_e2ekeys.GetEntryRequest) (*security_e2ekeys.Profile, error)
	HkpLookup(context.Context, *HkpLookupRequest) (*HttpResponse, error)
}

func RegisterE2EKeyProxyServer(s *grpc.Server, srv E2EKeyProxyServer) {
	s.RegisterService(&_E2EKeyProxy_serviceDesc, srv)
}

func _E2EKeyProxy_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(security_e2ekeys.GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2EKeyProxyServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.e2ekeys.v1.E2EKeyProxy/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2EKeyProxyServer).GetEntry(ctx, req.(*security_e2ekeys.GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2EKeyProxy_HkpLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HkpLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2EKeyProxyServer).HkpLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.e2ekeys.v1.E2EKeyProxy/HkpLookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2EKeyProxyServer).HkpLookup(ctx, req.(*HkpLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _E2EKeyProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "security.e2ekeys.v1.E2EKeyProxy",
	HandlerType: (*E2EKeyProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntry",
			Handler:    _E2EKeyProxy_GetEntry_Handler,
		},
		{
			MethodName: "HkpLookup",
			Handler:    _E2EKeyProxy_HkpLookup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x51, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0x03, 0x17, 0xb8, 0x97, 0xa1, 0x17, 0xc9, 0xa0, 0xa6, 0x56, 0x1f, 0xa4, 0x89, 0xd1,
	0x17, 0x3a, 0xa1, 0xae, 0x81, 0x88, 0xd1, 0x07, 0xe3, 0x06, 0x9a, 0x52, 0x0e, 0x65, 0x52, 0x98,
	0x19, 0xa7, 0xa7, 0x84, 0xc6, 0xf8, 0xe2, 0x16, 0x5c, 0x9a, 0x4b, 0xd0, 0x85, 0xd8, 0x4e, 0x8a,
	0x31, 0xc2, 0x53, 0x3b, 0xe7, 0xfc, 0xe7, 0xfb, 0x67, 0xfe, 0x43, 0x2e, 0x95, 0x96, 0x28, 0x59,
	0x0a, 0x51, 0xa6, 0x39, 0xe6, 0x01, 0xf8, 0x90, 0x40, 0x9e, 0x06, 0xeb, 0x11, 0xab, 0x7e, 0x3d,
	0xa3, 0xa0, 0xfd, 0xad, 0xc4, 0xdb, 0xd6, 0xd7, 0x23, 0xe7, 0x36, 0xe6, 0xb8, 0xc8, 0xa6, 0x5e,
	0x24, 0x57, 0x2c, 0x96, 0x32, 0x5e, 0x42, 0x39, 0x35, 0x2c, 0xda, 0xc3, 0x14, 0xf4, 0x1a, 0x34,
	0xdb, 0x8f, 0xaf, 0xd8, 0x98, 0x2b, 0xa8, 0xf8, 0xce, 0x59, 0x35, 0x1f, 0x2a, 0xce, 0x42, 0x21,
	0x24, 0x86, 0xc8, 0xa5, 0xa8, 0xba, 0x6e, 0x44, 0x7a, 0x93, 0x44, 0xdd, 0x4b, 0x99, 0x64, 0xea,
	0x11, 0x9e, 0x32, 0x48, 0x91, 0x12, 0x52, 0x97, 0xca, 0xae, 0x9d, 0xd7, 0xae, 0xda, 0xb4, 0x4b,
	0x5a, 0x29, 0x84, 0x3a, 0x5a, 0xd8, 0x75, 0x73, 0x3e, 0x20, 0x7f, 0xa5, 0x32, 0x00, 0xfb, 0x8f,
	0x29, 0xfc, 0x27, 0x4d, 0xd8, 0x84, 0x11, 0xda, 0x0d, 0x73, 0xec, 0x93, 0xce, 0x9c, 0x8b, 0x18,
	0xb4, 0xd2, 0x5c, 0xa0, 0xdd, 0x2c, 0x8b, 0xae, 0x4f, 0xac, 0x09, 0x62, 0xc1, 0x4f, 0x55, 0x31,
	0x08, 0xf4, 0x90, 0x58, 0x91, 0x14, 0x08, 0x02, 0x83, 0xf2, 0xa6, 0x95, 0x95, 0x45, 0x1a, 0x53,
	0x39, 0xcb, 0x8d, 0x91, 0xe5, 0x7f, 0xd4, 0x48, 0x67, 0xec, 0x8f, 0xef, 0x20, 0x7f, 0xd0, 0x72,
	0x93, 0x53, 0x20, 0xff, 0x6e, 0x00, 0xc7, 0x02, 0x75, 0x4e, 0x07, 0xde, 0x4e, 0x66, 0xdb, 0x5e,
	0xf5, 0x06, 0xe7, 0x64, 0x57, 0x52, 0x70, 0xe6, 0x7c, 0x09, 0xee, 0xe9, 0xeb, 0xfb, 0xe7, 0x5b,
	0xfd, 0x88, 0xf6, 0x59, 0xb1, 0x8b, 0xac, 0x88, 0x33, 0x65, 0xcf, 0xe5, 0x27, 0xe0, 0xb3, 0x17,
	0xba, 0x22, 0xed, 0xef, 0x3c, 0xe8, 0x85, 0xb7, 0x67, 0x37, 0xde, 0xef, 0xbc, 0x9c, 0xc1, 0x7e,
	0xd9, 0x8f, 0x17, 0xbb, 0xc7, 0xc6, 0xb3, 0x47, 0xbb, 0xa5, 0xe7, 0x22, 0x51, 0x6c, 0x69, 0x08,
	0xd3, 0x96, 0xd9, 0xc2, 0xf5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x4c, 0xa7, 0x2d, 0x2e,
	0x02, 0x00, 0x00,
}
