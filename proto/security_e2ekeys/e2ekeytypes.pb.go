// Code generated by protoc-gen-go.
// source: proto/security_e2ekeys/e2ekeytypes.proto
// DO NOT EDIT!

/*
Package security_e2ekeys is a generated protocol buffer package.

It is generated from these files:
	proto/security_e2ekeys/e2ekeytypes.proto

It has these top-level messages:
	GetEntryResponse
	Profile
	Entry
	PublicKey
	KeyValue
	SignedKV
	GetEntryRequest
	ListEntryHistoryRequest
	ListEntryHistoryResponse
	EntryUpdate
	UpdateEntryRequest
	UpdateEntryResponse
*/
package security_e2ekeys

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import security_ctmap "github.com/google/e2e-key-server/proto/security_ctmap"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// GetEntryResponse
type GetEntryResponse struct {
	// vrf is the output of VRF on user_id.
	Vrf []byte `protobuf:"bytes,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// vrf_proof is the proof for VRF on user_id.
	VrfProof []byte `protobuf:"bytes,2,opt,name=vrf_proof,proto3" json:"vrf_proof,omitempty"`
	// commitment_key connects the profile data to the commitment in leaf_proof.
	CommitmentKey []byte `protobuf:"bytes,3,opt,name=commitment_key,proto3" json:"commitment_key,omitempty"`
	// profile contains the public key data for this account.
	Profile []byte `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	// leaf_proof contains an Entry and a verifiable map inclusion proof
	LeafProof *security_ctmap.GetLeafResponse `protobuf:"bytes,5,opt,name=leaf_proof" json:"leaf_proof,omitempty"`
	// seh contains the signed epoch head for the sparse merkle tree.
	// seh is also stored in the append only log.
	Seh *security_ctmap.SignedEpochHead `protobuf:"bytes,6,opt,name=seh" json:"seh,omitempty"`
	// consistency_proof ties the sth to the sth in start.
	ConsistencyProof *security_ctmap.GetConsistencyProofResponse `protobuf:"bytes,7,opt,name=consistency_proof" json:"consistency_proof,omitempty"`
	// sth is the latest STH.
	Sth *security_ctmap.GetSTHResponse `protobuf:"bytes,8,opt,name=sth" json:"sth,omitempty"`
}

func (m *GetEntryResponse) Reset()                    { *m = GetEntryResponse{} }
func (m *GetEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEntryResponse) ProtoMessage()               {}
func (*GetEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetEntryResponse) GetLeafProof() *security_ctmap.GetLeafResponse {
	if m != nil {
		return m.LeafProof
	}
	return nil
}

func (m *GetEntryResponse) GetSeh() *security_ctmap.SignedEpochHead {
	if m != nil {
		return m.Seh
	}
	return nil
}

func (m *GetEntryResponse) GetConsistencyProof() *security_ctmap.GetConsistencyProofResponse {
	if m != nil {
		return m.ConsistencyProof
	}
	return nil
}

func (m *GetEntryResponse) GetSth() *security_ctmap.GetSTHResponse {
	if m != nil {
		return m.Sth
	}
	return nil
}

// Profile contains data hidden behind the crypto comitment.
type Profile struct {
	// Keys is a map of appIds to keys.
	Keys map[string][]byte `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Profile) GetKeys() map[string][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

// Entry contains a commitment to profile and a set of authorized update keys.
// Entry is placed in the verifiable map as leaf data.
type Entry struct {
	// commitment is a cryptographic commitment to arbitrary data.
	Commitment []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// authorized_keys is the set of keys allowed to sign updates for this entry.
	AuthorizedKeys []*PublicKey `protobuf:"bytes,2,rep,name=authorized_keys" json:"authorized_keys,omitempty"`
	// update_count prevents replay attacks. Monotonically increasing.
	UpdateCount uint64 `protobuf:"varint,3,opt,name=update_count" json:"update_count,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Entry) GetAuthorizedKeys() []*PublicKey {
	if m != nil {
		return m.AuthorizedKeys
	}
	return nil
}

// PublicKey defines a key this domain uses to sign EpochHeads with.
type PublicKey struct {
	// KeyFormats from Keyczar.
	//
	// Types that are valid to be assigned to KeyType:
	//	*PublicKey_Ed25519
	//	*PublicKey_RsaVerifyingSha256_2048
	//	*PublicKey_EcdsaVerifyingP256
	KeyType isPublicKey_KeyType `protobuf_oneof:"key_type"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isPublicKey_KeyType interface {
	isPublicKey_KeyType()
}

type PublicKey_Ed25519 struct {
	Ed25519 []byte `protobuf:"bytes,1,opt,name=ed25519,proto3,oneof"`
}
type PublicKey_RsaVerifyingSha256_2048 struct {
	RsaVerifyingSha256_2048 []byte `protobuf:"bytes,2,opt,name=rsa_verifying_sha256_2048,proto3,oneof"`
}
type PublicKey_EcdsaVerifyingP256 struct {
	EcdsaVerifyingP256 []byte `protobuf:"bytes,3,opt,name=ecdsa_verifying_p256,proto3,oneof"`
}

func (*PublicKey_Ed25519) isPublicKey_KeyType()                 {}
func (*PublicKey_RsaVerifyingSha256_2048) isPublicKey_KeyType() {}
func (*PublicKey_EcdsaVerifyingP256) isPublicKey_KeyType()      {}

func (m *PublicKey) GetKeyType() isPublicKey_KeyType {
	if m != nil {
		return m.KeyType
	}
	return nil
}

func (m *PublicKey) GetEd25519() []byte {
	if x, ok := m.GetKeyType().(*PublicKey_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

func (m *PublicKey) GetRsaVerifyingSha256_2048() []byte {
	if x, ok := m.GetKeyType().(*PublicKey_RsaVerifyingSha256_2048); ok {
		return x.RsaVerifyingSha256_2048
	}
	return nil
}

func (m *PublicKey) GetEcdsaVerifyingP256() []byte {
	if x, ok := m.GetKeyType().(*PublicKey_EcdsaVerifyingP256); ok {
		return x.EcdsaVerifyingP256
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PublicKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PublicKey_OneofMarshaler, _PublicKey_OneofUnmarshaler, _PublicKey_OneofSizer, []interface{}{
		(*PublicKey_Ed25519)(nil),
		(*PublicKey_RsaVerifyingSha256_2048)(nil),
		(*PublicKey_EcdsaVerifyingP256)(nil),
	}
}

func _PublicKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PublicKey)
	// key_type
	switch x := m.KeyType.(type) {
	case *PublicKey_Ed25519:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Ed25519)
	case *PublicKey_RsaVerifyingSha256_2048:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.RsaVerifyingSha256_2048)
	case *PublicKey_EcdsaVerifyingP256:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.EcdsaVerifyingP256)
	case nil:
	default:
		return fmt.Errorf("PublicKey.KeyType has unexpected type %T", x)
	}
	return nil
}

func _PublicKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PublicKey)
	switch tag {
	case 1: // key_type.ed25519
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.KeyType = &PublicKey_Ed25519{x}
		return true, err
	case 2: // key_type.rsa_verifying_sha256_2048
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.KeyType = &PublicKey_RsaVerifyingSha256_2048{x}
		return true, err
	case 3: // key_type.ecdsa_verifying_p256
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.KeyType = &PublicKey_EcdsaVerifyingP256{x}
		return true, err
	default:
		return false, nil
	}
}

func _PublicKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PublicKey)
	// key_type
	switch x := m.KeyType.(type) {
	case *PublicKey_Ed25519:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Ed25519)))
		n += len(x.Ed25519)
	case *PublicKey_RsaVerifyingSha256_2048:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RsaVerifyingSha256_2048)))
		n += len(x.RsaVerifyingSha256_2048)
	case *PublicKey_EcdsaVerifyingP256:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EcdsaVerifyingP256)))
		n += len(x.EcdsaVerifyingP256)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// KeyValue is a map entry.
type KeyValue struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// SignedKV is a signed change to a map entry.
type SignedKV struct {
	// keyvalue is a serialized KeyValue.
	KeyValue []byte `protobuf:"bytes,1,opt,name=key_value,proto3" json:"key_value,omitempty"`
	// signatures on keyvalue. Must be signed by keys from both previous and
	// current epochs. The first proves ownership of new epoch key, and the
	// second proves the the correct owner is making this change.
	Signatures map[uint64][]byte `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SignedKV) Reset()                    { *m = SignedKV{} }
func (m *SignedKV) String() string            { return proto.CompactTextString(m) }
func (*SignedKV) ProtoMessage()               {}
func (*SignedKV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SignedKV) GetSignatures() map[uint64][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// Get request for a user object.
type GetEntryRequest struct {
	// Last trusted epoch by the client.
	EpochStart int64 `protobuf:"varint,5,opt,name=epoch_start" json:"epoch_start,omitempty"`
	// Absence of the epoch_end field indicates a request for the current value.
	EpochEnd int64 `protobuf:"varint,1,opt,name=epoch_end" json:"epoch_end,omitempty"`
	// User identifier. Most commonly an email address.
	UserId string `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *GetEntryRequest) Reset()                    { *m = GetEntryRequest{} }
func (m *GetEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntryRequest) ProtoMessage()               {}
func (*GetEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// Get a list of historical values for a user.
type ListEntryHistoryRequest struct {
	// The user identifier.
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	// from_epoch is the starting epcoh.
	StartEpoch int64 `protobuf:"varint,2,opt,name=start_epoch" json:"start_epoch,omitempty"`
	// The maximum number of entries to return.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size" json:"page_size,omitempty"`
}

func (m *ListEntryHistoryRequest) Reset()                    { *m = ListEntryHistoryRequest{} }
func (m *ListEntryHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*ListEntryHistoryRequest) ProtoMessage()               {}
func (*ListEntryHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// A paginated history of values for a user.
type ListEntryHistoryResponse struct {
	// The list of values this user_id has contained over time.
	Values []*GetEntryResponse `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	// The next time to query for pagination.
	NextEpoch int64 `protobuf:"varint,2,opt,name=next_epoch" json:"next_epoch,omitempty"`
}

func (m *ListEntryHistoryResponse) Reset()                    { *m = ListEntryHistoryResponse{} }
func (m *ListEntryHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*ListEntryHistoryResponse) ProtoMessage()               {}
func (*ListEntryHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListEntryHistoryResponse) GetValues() []*GetEntryResponse {
	if m != nil {
		return m.Values
	}
	return nil
}

type EntryUpdate struct {
	// update authorizes the change to profile.
	Update *SignedKV `protobuf:"bytes,2,opt,name=update" json:"update,omitempty"`
	// profile is the serialized protobuf Profile.
	Profile []byte `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	// commitment_key is 16 random bytes.
	CommitmentKey []byte `protobuf:"bytes,4,opt,name=commitment_key,proto3" json:"commitment_key,omitempty"`
	// Last trusted epoch by the client.
	EpochStart int64 `protobuf:"varint,6,opt,name=epoch_start" json:"epoch_start,omitempty"`
}

func (m *EntryUpdate) Reset()                    { *m = EntryUpdate{} }
func (m *EntryUpdate) String() string            { return proto.CompactTextString(m) }
func (*EntryUpdate) ProtoMessage()               {}
func (*EntryUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EntryUpdate) GetUpdate() *SignedKV {
	if m != nil {
		return m.Update
	}
	return nil
}

// Update a user's profile.
type UpdateEntryRequest struct {
	// user_id specifies the id for the new account to be registered.
	UserId      string       `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	EntryUpdate *EntryUpdate `protobuf:"bytes,2,opt,name=entry_update" json:"entry_update,omitempty"`
}

func (m *UpdateEntryRequest) Reset()                    { *m = UpdateEntryRequest{} }
func (m *UpdateEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEntryRequest) ProtoMessage()               {}
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateEntryRequest) GetEntryUpdate() *EntryUpdate {
	if m != nil {
		return m.EntryUpdate
	}
	return nil
}

// UpdateEntryResponse contains a proof once the update has been included in
// the Merkel Tree.
type UpdateEntryResponse struct {
	Proof *GetEntryResponse `protobuf:"bytes,1,opt,name=proof" json:"proof,omitempty"`
}

func (m *UpdateEntryResponse) Reset()                    { *m = UpdateEntryResponse{} }
func (m *UpdateEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateEntryResponse) ProtoMessage()               {}
func (*UpdateEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateEntryResponse) GetProof() *GetEntryResponse {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*GetEntryResponse)(nil), "security.e2ekeys.GetEntryResponse")
	proto.RegisterType((*Profile)(nil), "security.e2ekeys.Profile")
	proto.RegisterType((*Entry)(nil), "security.e2ekeys.Entry")
	proto.RegisterType((*PublicKey)(nil), "security.e2ekeys.PublicKey")
	proto.RegisterType((*KeyValue)(nil), "security.e2ekeys.KeyValue")
	proto.RegisterType((*SignedKV)(nil), "security.e2ekeys.SignedKV")
	proto.RegisterType((*GetEntryRequest)(nil), "security.e2ekeys.GetEntryRequest")
	proto.RegisterType((*ListEntryHistoryRequest)(nil), "security.e2ekeys.ListEntryHistoryRequest")
	proto.RegisterType((*ListEntryHistoryResponse)(nil), "security.e2ekeys.ListEntryHistoryResponse")
	proto.RegisterType((*EntryUpdate)(nil), "security.e2ekeys.EntryUpdate")
	proto.RegisterType((*UpdateEntryRequest)(nil), "security.e2ekeys.UpdateEntryRequest")
	proto.RegisterType((*UpdateEntryResponse)(nil), "security.e2ekeys.UpdateEntryResponse")
}

var fileDescriptor0 = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0x5d, 0x53, 0xd3, 0x40,
	0x14, 0xa5, 0x2d, 0xfd, 0xba, 0xad, 0x16, 0x02, 0xa3, 0x15, 0x47, 0x74, 0xc2, 0x8c, 0xc3, 0x80,
	0xa4, 0x36, 0x80, 0x83, 0x3e, 0xf8, 0xa0, 0x83, 0x76, 0x80, 0x07, 0x06, 0x94, 0x07, 0x5f, 0x76,
	0xd2, 0xe4, 0x36, 0xcd, 0xd8, 0x26, 0x31, 0xbb, 0x41, 0xeb, 0xaf, 0xf0, 0xbf, 0xf8, 0x07, 0xbd,
	0xbb, 0xdb, 0xd2, 0x36, 0x2d, 0x33, 0x3e, 0xb5, 0xbb, 0x7b, 0xf6, 0x9c, 0x7b, 0xcf, 0x3d, 0x59,
	0xd8, 0x8d, 0x93, 0x48, 0x44, 0x2d, 0x8e, 0x6e, 0x9a, 0x04, 0x62, 0xc4, 0xd0, 0xc6, 0xef, 0x38,
	0xe2, 0x2d, 0xfd, 0x2b, 0x46, 0x31, 0x72, 0x4b, 0x41, 0x8c, 0xb5, 0x09, 0xc6, 0x1a, 0x63, 0xb6,
	0xce, 0xfc, 0x40, 0xf4, 0xd3, 0xae, 0xe5, 0x46, 0xc3, 0x96, 0x1f, 0x45, 0xfe, 0x00, 0xe5, 0xb5,
	0x03, 0x3a, 0x3b, 0xe0, 0x98, 0xdc, 0x62, 0xd2, 0xca, 0x90, 0xbb, 0x62, 0xe8, 0xc4, 0x99, 0xa5,
	0x66, 0x37, 0xff, 0xe6, 0x61, 0xed, 0x33, 0x8a, 0xd3, 0x50, 0x24, 0xa3, 0x2b, 0xe4, 0x71, 0x14,
	0x72, 0x34, 0x6a, 0x50, 0xb8, 0x4d, 0x7a, 0xcd, 0xdc, 0x8b, 0xdc, 0x6e, 0xdd, 0x58, 0x87, 0x2a,
	0x2d, 0x18, 0xc1, 0xa3, 0x5e, 0x33, 0xaf, 0xb6, 0x1e, 0xc1, 0x43, 0xd2, 0x1e, 0x06, 0x62, 0x88,
	0xa1, 0x60, 0xa4, 0xdb, 0x2c, 0xa8, 0xfd, 0x06, 0x94, 0x09, 0xd6, 0x0b, 0x06, 0xd8, 0x5c, 0x55,
	0x1b, 0x87, 0x00, 0x03, 0x74, 0x26, 0x97, 0x8b, 0xb4, 0x57, 0xb3, 0x9f, 0x5b, 0x99, 0x42, 0x48,
	0xfe, 0x82, 0x40, 0x77, 0xea, 0xaf, 0xa0, 0xc0, 0xb1, 0xdf, 0x2c, 0x2d, 0x47, 0x5f, 0x07, 0x7e,
	0x88, 0xde, 0x69, 0x1c, 0xb9, 0xfd, 0x0e, 0x3a, 0x9e, 0xf1, 0x09, 0xd6, 0x5d, 0xba, 0x16, 0x70,
	0x81, 0xa1, 0x3b, 0x1a, 0x2b, 0x95, 0xd5, 0xdd, 0xfd, 0x25, 0x4a, 0x1f, 0xa7, 0xd8, 0x4b, 0x09,
	0xbd, 0x53, 0xdd, 0x27, 0x55, 0xd1, 0x6f, 0x56, 0xd4, 0xcd, 0xed, 0x25, 0x37, 0xaf, 0xbf, 0x74,
	0x26, 0x60, 0x33, 0x80, 0xf2, 0xa5, 0x6e, 0xd4, 0x68, 0xc3, 0xaa, 0x1c, 0x0a, 0x99, 0x55, 0xa0,
	0x8b, 0x3b, 0x56, 0x76, 0x5a, 0xd6, 0x18, 0x68, 0x9d, 0xd3, 0x42, 0xd9, 0xbc, 0xb5, 0x0f, 0xd5,
	0xbb, 0x85, 0xf4, 0x5a, 0x1a, 0x28, 0xbd, 0xae, 0x1a, 0x0f, 0xa0, 0x78, 0xeb, 0x0c, 0x52, 0xd4,
	0x3e, 0xbf, 0xcb, 0x9f, 0xe4, 0x4c, 0x1f, 0x8a, 0x1a, 0x68, 0x00, 0x4c, 0x4d, 0x1f, 0xcf, 0xe6,
	0x08, 0x1a, 0x4e, 0x2a, 0xfa, 0x51, 0x12, 0xfc, 0x46, 0x8f, 0xa9, 0x3a, 0xf2, 0xaa, 0x8e, 0xa7,
	0x4b, 0xea, 0x48, 0xbb, 0x83, 0xc0, 0x25, 0x61, 0x63, 0x13, 0xea, 0x69, 0xec, 0x39, 0x02, 0x99,
	0x1b, 0xa5, 0xc4, 0x25, 0x87, 0xb7, 0x6a, 0x46, 0x50, 0x9d, 0x42, 0xd6, 0xa1, 0x8c, 0x9e, 0x7d,
	0x7c, 0xdc, 0x7e, 0xab, 0x95, 0x3a, 0x2b, 0xc6, 0x0e, 0x3c, 0x49, 0xb8, 0xc3, 0x28, 0x5e, 0x41,
	0x6f, 0x14, 0x84, 0x3e, 0xe3, 0x7d, 0xc7, 0x3e, 0x7e, 0xc3, 0xec, 0xd7, 0x47, 0x27, 0xba, 0x5e,
	0x02, 0x6d, 0xc3, 0x26, 0xba, 0xde, 0x1c, 0x2c, 0x26, 0x90, 0xce, 0x47, 0x67, 0xe5, 0x03, 0x40,
	0x85, 0x8a, 0x61, 0x32, 0xdf, 0xe6, 0x4b, 0xa8, 0x90, 0xd4, 0x8d, 0xec, 0x77, 0xd6, 0x85, 0x7a,
	0xc6, 0x05, 0xf3, 0x4f, 0x0e, 0x2a, 0x7a, 0xea, 0xe7, 0x37, 0x32, 0x8d, 0x92, 0x40, 0x9f, 0x6b,
	0xf8, 0x7b, 0x00, 0x4e, 0xc7, 0x8e, 0x48, 0x13, 0x9c, 0xf4, 0xbf, 0xb7, 0xd8, 0xff, 0x84, 0x42,
	0xfd, 0xd1, 0x60, 0x3d, 0x8e, 0x36, 0x34, 0x32, 0x5b, 0xb3, 0xe5, 0x94, 0x96, 0x0d, 0xe5, 0x0c,
	0x1a, 0xd3, 0x8f, 0xe6, 0x47, 0x8a, 0x5c, 0x18, 0x1b, 0x50, 0x43, 0x19, 0x4a, 0xc6, 0x85, 0x93,
	0x08, 0x95, 0xf5, 0x82, 0xac, 0x56, 0x6f, 0x62, 0xe8, 0x29, 0xb6, 0x82, 0xfc, 0x46, 0x52, 0xfa,
	0x4a, 0x59, 0xe0, 0x29, 0xbe, 0xaa, 0x79, 0x05, 0x8f, 0x2f, 0x28, 0x91, 0x8a, 0xac, 0x43, 0x7f,
	0xa2, 0x29, 0xe7, 0x0c, 0x56, 0xe7, 0x83, 0x44, 0x14, 0x3d, 0x53, 0xac, 0x8a, 0x40, 0x89, 0xc4,
	0x8e, 0x8f, 0x8c, 0x53, 0x08, 0x94, 0xd1, 0x45, 0xb3, 0x0b, 0xcd, 0x45, 0xce, 0x71, 0xd0, 0x6d,
	0x28, 0xa9, 0x76, 0x26, 0x91, 0x35, 0x17, 0xad, 0x5a, 0x78, 0x10, 0x28, 0x7b, 0x21, 0xfe, 0x9a,
	0x93, 0x35, 0x7f, 0x42, 0x4d, 0x81, 0xbe, 0xaa, 0x28, 0x19, 0x7b, 0x50, 0xd2, 0xa1, 0x52, 0xc7,
	0x35, 0x7b, 0xeb, 0xfe, 0x09, 0xcc, 0xbe, 0x13, 0x85, 0x7b, 0x1e, 0x14, 0xfd, 0x7e, 0x64, 0x4c,
	0x2d, 0x29, 0xe1, 0x6f, 0x60, 0x68, 0xcd, 0x39, 0xff, 0x17, 0xbc, 0x3a, 0x84, 0x3a, 0x4a, 0x00,
	0x9b, 0x2b, 0xeb, 0xd9, 0x62, 0x59, 0x33, 0x5d, 0x98, 0x1d, 0xd8, 0x98, 0xe3, 0x1e, 0xf7, 0xdf,
	0x86, 0xa2, 0x7e, 0x58, 0x72, 0x8a, 0xe4, 0x3f, 0x2c, 0xeb, 0x96, 0xd4, 0xfb, 0x7a, 0xf8, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0x43, 0x3f, 0xd3, 0x2c, 0xe9, 0x05, 0x00, 0x00,
}
