// Code generated by protoc-gen-go.
// source: proto/security_e2ekeys_v2/e2ekeys.proto
// DO NOT EDIT!

/*
Package security_e2ekeys_v2 is a generated protocol buffer package.

It is generated from these files:
	proto/security_e2ekeys_v2/e2ekeys.proto

It has these top-level messages:
*/
package security_e2ekeys_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import security_e2ekeys "github.com/google/e2e-key-server/proto/security_e2ekeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for E2EKeyService service

type E2EKeyServiceClient interface {
	// GetEntry returns a user's entry in the Merkle Tree. Entries contain
	// signed commitments to a profile, which is also returned.
	GetEntry(ctx context.Context, in *security_e2ekeys.GetEntryRequest, opts ...grpc.CallOption) (*security_e2ekeys.GetEntryResponse, error)
	// ListEntryHistory returns a list of GetEntryRespons covering several epochs.
	ListEntryHistory(ctx context.Context, in *security_e2ekeys.ListEntryHistoryRequest, opts ...grpc.CallOption) (*security_e2ekeys.ListEntryHistoryResponse, error)
	// blocking or polling?
	// UpdateEntry submits a SignedEntryUpdate.  Returns empty until this update
	// has been included in an epoch.  Clients must retry until this function
	// returns a proof.
	UpdateEntry(ctx context.Context, in *security_e2ekeys.UpdateEntryRequest, opts ...grpc.CallOption) (*security_e2ekeys.UpdateEntryResponse, error)
}

type e2EKeyServiceClient struct {
	cc *grpc.ClientConn
}

func NewE2EKeyServiceClient(cc *grpc.ClientConn) E2EKeyServiceClient {
	return &e2EKeyServiceClient{cc}
}

func (c *e2EKeyServiceClient) GetEntry(ctx context.Context, in *security_e2ekeys.GetEntryRequest, opts ...grpc.CallOption) (*security_e2ekeys.GetEntryResponse, error) {
	out := new(security_e2ekeys.GetEntryResponse)
	err := grpc.Invoke(ctx, "/security.e2ekeys.v2.E2EKeyService/GetEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2EKeyServiceClient) ListEntryHistory(ctx context.Context, in *security_e2ekeys.ListEntryHistoryRequest, opts ...grpc.CallOption) (*security_e2ekeys.ListEntryHistoryResponse, error) {
	out := new(security_e2ekeys.ListEntryHistoryResponse)
	err := grpc.Invoke(ctx, "/security.e2ekeys.v2.E2EKeyService/ListEntryHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2EKeyServiceClient) UpdateEntry(ctx context.Context, in *security_e2ekeys.UpdateEntryRequest, opts ...grpc.CallOption) (*security_e2ekeys.UpdateEntryResponse, error) {
	out := new(security_e2ekeys.UpdateEntryResponse)
	err := grpc.Invoke(ctx, "/security.e2ekeys.v2.E2EKeyService/UpdateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for E2EKeyService service

type E2EKeyServiceServer interface {
	// GetEntry returns a user's entry in the Merkle Tree. Entries contain
	// signed commitments to a profile, which is also returned.
	GetEntry(context.Context, *security_e2ekeys.GetEntryRequest) (*security_e2ekeys.GetEntryResponse, error)
	// ListEntryHistory returns a list of GetEntryRespons covering several epochs.
	ListEntryHistory(context.Context, *security_e2ekeys.ListEntryHistoryRequest) (*security_e2ekeys.ListEntryHistoryResponse, error)
	// blocking or polling?
	// UpdateEntry submits a SignedEntryUpdate.  Returns empty until this update
	// has been included in an epoch.  Clients must retry until this function
	// returns a proof.
	UpdateEntry(context.Context, *security_e2ekeys.UpdateEntryRequest) (*security_e2ekeys.UpdateEntryResponse, error)
}

func RegisterE2EKeyServiceServer(s *grpc.Server, srv E2EKeyServiceServer) {
	s.RegisterService(&_E2EKeyService_serviceDesc, srv)
}

func _E2EKeyService_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(security_e2ekeys.GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2EKeyServiceServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.e2ekeys.v2.E2EKeyService/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2EKeyServiceServer).GetEntry(ctx, req.(*security_e2ekeys.GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2EKeyService_ListEntryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(security_e2ekeys.ListEntryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2EKeyServiceServer).ListEntryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.e2ekeys.v2.E2EKeyService/ListEntryHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2EKeyServiceServer).ListEntryHistory(ctx, req.(*security_e2ekeys.ListEntryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2EKeyService_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(security_e2ekeys.UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2EKeyServiceServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.e2ekeys.v2.E2EKeyService/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2EKeyServiceServer).UpdateEntry(ctx, req.(*security_e2ekeys.UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _E2EKeyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "security.e2ekeys.v2.E2EKeyService",
	HandlerType: (*E2EKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntry",
			Handler:    _E2EKeyService_GetEntry_Handler,
		},
		{
			MethodName: "ListEntryHistory",
			Handler:    _E2EKeyService_ListEntryHistory_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _E2EKeyService_UpdateEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x4d, 0x2e, 0x2d, 0xca, 0x2c, 0xa9, 0x8c, 0x4f, 0x35, 0x4a, 0xcd, 0x4e,
	0xad, 0x2c, 0x8e, 0x2f, 0x33, 0xd2, 0x87, 0x32, 0xf5, 0xc0, 0x2a, 0x84, 0x84, 0x61, 0x4a, 0xf4,
	0x60, 0xe2, 0x65, 0x46, 0x52, 0x9e, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9,
	0xfa, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0x20, 0x5d, 0xba, 0x40, 0x69, 0xdd, 0xe2, 0xd4, 0xa2,
	0xb2, 0xd4, 0x22, 0x7d, 0xec, 0xc6, 0x43, 0xcd, 0x2e, 0xa9, 0x2c, 0x48, 0x85, 0x9a, 0x6f, 0xb4,
	0x92, 0x89, 0x8b, 0xd7, 0xd5, 0xc8, 0xd5, 0x3b, 0xb5, 0x32, 0x18, 0xa8, 0x33, 0x33, 0x39, 0x55,
	0x28, 0x90, 0x8b, 0xc3, 0x3d, 0xb5, 0xc4, 0x35, 0xaf, 0xa4, 0xa8, 0x52, 0x48, 0x51, 0x0f, 0xc3,
	0x7a, 0x98, 0x5c, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x12, 0x3e, 0x25, 0xc5, 0x05,
	0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x99, 0x5c, 0x02, 0x3e, 0x99, 0xc5, 0x10, 0x41, 0x0f, 0x20, 0x23,
	0x1f, 0x68, 0xb4, 0x26, 0xa6, 0x3e, 0x74, 0x35, 0x30, 0x2b, 0xb4, 0x88, 0x51, 0x0a, 0xb5, 0x2a,
	0x8a, 0x8b, 0x3b, 0xb4, 0x20, 0x25, 0xb1, 0x24, 0x15, 0xe2, 0x01, 0x15, 0x4c, 0xad, 0x48, 0xd2,
	0x30, 0x0b, 0x54, 0x09, 0xa8, 0x82, 0x98, 0x9d, 0xc4, 0x06, 0x0e, 0x32, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x88, 0x04, 0x49, 0x44, 0xbd, 0x01, 0x00, 0x00,
}
